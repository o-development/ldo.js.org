{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Solid and RDF without the Complexity <p> <p>For Raw Rdf</p> <p>For Solid+React</p> <p></p>  In LDO   In RDF/JS  <pre><code>person.age = 23;\nperson.name.push(\"John\");\n</code></pre> <pre><code>dataset.deleteMatches(\n  namedNode(\"http://example.com/Person1\"),\n  namedNode(\"http://xmlns.com/foaf/0.1/age\")\n);\ndataset.add(\n  quad(\n    namedNode(\"http://example.com/Person1\"),\n    namedNode(\"http://xmlns.com/foaf/0.1/age\"),\n    literal(\"23\", \"http://www.w3.org/2001/XMLSchema#integer\")\n  )\n);\ndataset.add(\n  quad(\n    namedNode(\"http://example.com/Person1\"),\n    namedNode(\"http://xmlns.com/foaf/0.1/name\"),\n    literal(\"John\", \"http://www.w3.org/2001/XMLSchema#string\")\n  )\n);\n</code></pre>"},{"location":"api/","title":"API","text":"<p>This section is the API reference for the libraries that make up LDO (Listed Below):</p> <ul> <li>@ldo/cli: A command line interface for initializing LDO and building ShapeTypes</li> <li>@ldo/ldo: The primary interface for accessing Linked Data Objects given raw RDF</li> <li>@ldo/solid: Tools for interacting with the Solid interface built on top of LDO</li> <li>@ldo/solid-react: Tools for building a React app using Solid and LDO</li> </ul>"},{"location":"api/cli/","title":"@ldo/cli","text":"<p>The <code>@ldo/cli</code> is a command line interface for initializing LDO and building ShapeTypes.</p>"},{"location":"api/cli/#setup","title":"Setup","text":""},{"location":"api/cli/#automatic-setup","title":"Automatic Setup","text":"<p>To setup LDO, <code>cd</code> into your typescript project and run <code>npx @ldo/cli init</code>.</p> <pre><code>cd my-typescript-project\nnpx @ldo/cli init\n</code></pre>"},{"location":"api/cli/#manual-setup","title":"Manual Setup","text":"<p>The following is handled by the automatic setup:</p> <p>Install the LDO dependencies. <pre><code>npm install @ldo/ldo\nnpm install @ldo/cli --save-dev\n</code></pre></p> <p>Create a folder to store your ShEx shapes: <pre><code>mkdir shapes\n</code></pre></p> <p>Create a script to build ShEx shapes and convert them into Linked Data Objects. You can put this script in <code>package.json</code> <pre><code>{\n  ...\n  scripts: {\n    ...\n    \"build:ldo\": \"ldo build --input ./shapes --output ./ldo\"\n    ...\n  }\n  ...\n}\n</code></pre></p>"},{"location":"api/cli/#generating-a-shapetype","title":"Generating a ShapeType","text":"<p>@ldo/cli generates shape types using the <code>*.shex</code> files in the \"input\" folder. If you followed the instructions above, run the following command:</p> <pre><code>npm run build:ldo\n</code></pre> <p>This will generate five files:  - <code>./ldo/foafProfile.shapeTypes.ts</code> &lt;-- This is the important file  - <code>./ldo/foafProfile.typings.ts</code>  - <code>./ldo/foafProfile.schema.ts</code>  - <code>./ldo/foafProfile.context.ts</code></p>"},{"location":"api/cli/#api-details","title":"API Details","text":"<ul> <li><code>init</code> command</li> <li><code>build</code> command</li> </ul>"},{"location":"api/cli/build/","title":"<code>build</code> command","text":"<p>LDO's cli's <code>build`` command takes ShEx schemas from an</code>--input<code>folder, and converts them into LDO generated code in the</code>--output` folder.</p> <p>If you initialized your project using the <code>init</code> command, a the build command is already added to your <code>package.json</code>. Simply run:</p> <pre><code>npm run build:ldo\n</code></pre> <p>The <code>build</code> command can also be run manually. For example: </p> <pre><code>ldo build --input ./.shapes --output ./.ldo\n</code></pre> <p>This command will create a <code>.shapes</code> and <code>.ldo</code> folder that will store the schemas and generated code for LDO respectively.</p>"},{"location":"api/cli/build/#parameters","title":"Parameters","text":""},{"location":"api/cli/build/#-i-directory-input-directory","title":"<code>-i [directory]</code>, <code>--input [directory]</code>","text":"<p>Default Value: `./.shapes``</p> <p>The input directory. This directory should be filled with <code>*.shex</code> files.</p>"},{"location":"api/cli/build/#-o-directory-output-directory","title":"<code>-o [directory]</code>, <code>--output [directory]</code>","text":"<p>Default Value: `./.ldo``</p> <p>The output directory.</p>"},{"location":"api/cli/init/","title":"<code>init</code> command","text":"<p>LDO's cli's init command initializes LDO in an existing Typescript project.</p> <p>The command is intended to be run using NPX in the same folder as a project's package.json. For example:</p> <pre><code>cd my_project/\nnpx run @ldo/cli init\n</code></pre> <p>If <code>@ldo/cli</code> is installed globally, the <code>ldo</code> command can be used. For example:</p> <pre><code>npm i -g @ldo/cli\ncd my_project/\nldo init\n</code></pre> <p>This command will create a <code>.shapes</code> and <code>.ldo</code> folder that will store the schemas and generated code for LDO respectively.</p>"},{"location":"api/cli/init/#parameters","title":"Parameters","text":""},{"location":"api/cli/init/#-d-directory-directory-directory-optional","title":"<code>-d [directory]</code>, <code>--directory [directory]</code> (Optional)","text":"<p>The <code>init</code> command takes in one parameter: <code>-d</code> or <code>--directory</code>. If present, the <code>init</code> command will create the <code>.shapes</code> and <code>.ldo</code> folders in the given directory.</p> <pre><code>npx run @ldo/cli init --director ./my_cool_dir\n</code></pre> <pre><code>ldo init --directory ./my_cool_dir\n</code></pre>"},{"location":"api/cli/init/#further-details","title":"Further details","text":"<p>The command does the following:</p> <ul> <li>Installs <code>@ldo/ldo</code> as a dependency</li> <li>Installs <code>@ldo/cli</code>, <code>@types/shexj</code>, and <code>@types/jsonld</code> as dev dependencies</li> <li>Selects a <code>PARENT_DIRECTORY</code><ul> <li>If the <code>--directory</code> parameter is set, the <code>PARENT_DIRECTORY</code> is the given directory.</li> <li>If <code>src</code>, <code>lib</code>, or <code>bin</code> are present in the project, the <code>PARENT_DIRECTORY</code> is <code>src</code>, <code>lib</code>, or <code>bin</code> selected in that order.</li> <li>Else the <code>PARENT_DIRECTORY</code> is the project's root directory.</li> </ul> </li> <li>Creates a file at <code>PARENT_DIRECTORY/.shapes/foafProfile.shex</code> to serve as an example ShEx file. (This can be deleted at any time)</li> <li>Adds a build script, <code>build:ldo</code>, to <code>package.json</code>. For example, if the <code>PARENT_DIRECTORY</code> was <code>foo</code> the following would be added:  <pre><code>\"scripts\": {\n  ...\n  \"build:ldo\": \"ldo build --input foo/.shapes --output foo/.ldo\"\n}\n</code></pre></li> <li>Runs the build script, generating the <code>.ldo</code> folder</li> </ul>"},{"location":"api/dataset/","title":"Index","text":"<p>This page is not yet written.</p>"},{"location":"api/jsonld-dataset-proxy/","title":"Index","text":"<p>This page is not yet written.</p>"},{"location":"api/ldo/","title":"@ldo/ldo","text":"<p><code>@ldo/ldo</code> is the primary interface for accessing Linked Data Objects given raw RDF.</p>"},{"location":"api/ldo/#guide","title":"Guide","text":"<p>A full walkthrough for using the <code>@ldo/ldo</code> library can be found in the For RDF Usage Guide.</p>"},{"location":"api/ldo/#installation","title":"Installation","text":""},{"location":"api/ldo/#automatic-installation","title":"Automatic Installation","text":"<p>Navigate into your project's root folder and run the following command: <pre><code>cd my_project/\nnpx run @ldo/cli init\n</code></pre></p>"},{"location":"api/ldo/#manual-installation","title":"Manual Installation","text":"<p>If you already have generated ShapeTypes, you may install the <code>@ldo/ldo</code> library independently.</p> <pre><code>npm i @ldo/ldo\n</code></pre>"},{"location":"api/ldo/#simple-example","title":"Simple Example","text":"<p>Below is a simple example of LDO in a real use-case (changing the name on a Solid Pod). Assume that a ShapeType was previously generated and placed at <code>./.ldo/foafProfile.shapeTypes</code>.</p> <pre><code>import { parseRdf, startTransaction, toSparqlUpdate, toTurtle } from \"@ldo/ldo\";\nimport { FoafProfileShapeType } from \"./.ldo/foafProfile.shapeTypes\";\n\nasync function run() {\n  const rawTurtle = `\n  &lt;#me&gt; a &lt;http://xmlns.com/foaf/0.1/Person&gt;;\n      &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jane Doe\".\n  `;\n\n  /**\n   * Step 1: Convert Raw RDF into a Linked Data Object\n   */\n  const ldoDataset = await parseRdf(rawTurtle, {\n    baseIRI: \"https://solidweb.me/jane_doe/profile/card\",\n  });\n  // Create a linked data object by telling the dataset the type and subject of\n  // the object\n  const janeProfile = ldoDataset\n    // Tells the LDO dataset that we're looking for a FoafProfile\n    .usingType(FoafProfileShapeType)\n    // Says the subject of the FoafProfile\n    .fromSubject(\"https://solidweb.me/jane_doe/profile/card#me\");\n\n  /**\n   * Step 2: Manipulate the Linked Data Object\n   */\n  // Logs \"Jane Doe\"\n  console.log(janeProfile.name);\n  // Logs \"Person\"\n  console.log(janeProfile.type);\n  // Logs 0\n  console.log(janeProfile.knows?.length);\n\n  // Begins a transaction that tracks your changes\n  startTransaction(janeProfile);\n  janeProfile.name = \"Jane Smith\";\n  janeProfile.knows?.push({\n    \"@id\": \"https://solidweb.me/john_smith/profile/card#me\",\n    type: {\n      \"@id\": \"Person\",\n    },\n    name: \"John Smith\",\n    knows: [janeProfile],\n  });\n\n  // Logs \"Jane Smith\"\n  console.log(janeProfile.name);\n  // Logs \"John Smith\"\n  console.log(janeProfile.knows?.[0].name);\n  // Logs \"Jane Smith\"\n  console.log(janeProfile.knows?.[0].knows?.[0].name);\n\n  /**\n   * Step 3: Convert it back to RDF\n   */\n  // Logs:\n  // &lt;https://solidweb.me/jane_doe/profile/card#me&gt; a &lt;http://xmlns.com/foaf/0.1/Person&gt;;\n  //   &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jane Smith\";\n  //   &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;https://solidweb.me/john_smith/profile/card#me&gt;.\n  // &lt;https://solidweb.me/john_smith/profile/card#me&gt; a &lt;http://xmlns.com/foaf/0.1/Person&gt;;\n  //   &lt;http://xmlns.com/foaf/0.1/name&gt; \"John Smith\";\n  //   &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;https://solidweb.me/jane_doe/profile/card#me&gt;.\n  console.log(await toTurtle(janeProfile));\n  // Logs:\n  // DELETE DATA {\n  //   &lt;https://solidweb.me/jane_doe/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jane Doe\" .\n  // };\n  // INSERT DATA {\n  //   &lt;https://solidweb.me/jane_doe/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jane Smith\" .\n  //   &lt;https://solidweb.me/jane_doe/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;https://solidweb.me/john_smith/profile/card#me&gt; .\n  //   &lt;https://solidweb.me/john_smith/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"John Smith\" .\n  //   &lt;https://solidweb.me/john_smith/profile/card#me&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; .\n  //   &lt;https://solidweb.me/john_smith/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;https://solidweb.me/jane_doe/profile/card#me&gt; .\n  // }\n  console.log(await toSparqlUpdate(janeProfile));\n}\nrun();\n</code></pre>"},{"location":"api/ldo/#api-details","title":"API Details","text":"<p>Types</p> <ul> <li><code>LdoBase</code></li> <li><code>ShapeType</code></li> </ul> <p>Getting a LdoDataset</p> <ul> <li><code>parseRdf</code></li> <li><code>createLdoDatasetFactory</code></li> <li><code>LdoDatasetFactory</code></li> <li><code>createLdoDataset</code></li> <li><code>LdoDataset</code></li> </ul> <p>Getting a Linked Data Object</p> <ul> <li><code>LdoBuilder</code></li> </ul> <p>Converting a Linked Data Object to Raw RDF</p> <ul> <li><code>toTurtle</code></li> <li><code>toNTriples</code></li> <li><code>serialize</code></li> </ul> <p>Transactions</p> <ul> <li>transactions</li> <li><code>toSparqlUpdate</code></li> </ul> <p>Language Tag Support</p> <ul> <li><code>languageOf</code></li> <li><code>setLanguagePreferences</code></li> </ul> <p>Graph Support</p> <ul> <li><code>graphOf</code></li> <li><code>write</code></li> </ul> <p>Other Helper Functions</p> <ul> <li><code>getDataset</code></li> </ul>"},{"location":"api/ldo/LdoBase/","title":"<code>LdoBase</code>","text":"<p><code>LdoBase</code> is an interface defining that a Linked Data Object is a JavaScript Object Literal.</p>"},{"location":"api/ldo/LdoBase/#definition","title":"Definition","text":"<pre><code>type LdoBase = Record&lt;string, any&gt;;\n</code></pre>"},{"location":"api/ldo/LdoBuilder/","title":"<code>LdoBuilder</code>","text":"<p>An LdoBuilder contains utility methods for building a Linked Data Object for a certain type.</p> <p>It is not recommended to instantiate an LdoDataset. Instead use the <code>createLdoDataset</code> function.</p>"},{"location":"api/ldo/LdoBuilder/#usage","title":"Usage","text":"<pre><code>import { LdoDataset, createLdoDatasetFactory } from \"@ldo/ldo\";\nimport { FoafProfileShapeType } from \"./.ldo/foafProfile.shapeTypes\";\n\nconst ldoDataset = createLdoDataset();\nconst ldoBuilder = ldoDataset.usingType(FoafProfileShapeType);\nconst profile = ldoBuilder\n  .write(\"https://example.com/someGraph\")\n  .fromSubject(\"https://example.com/profile#me\");\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#definition","title":"Definition","text":"<pre><code>class LdoBuilder&lt;Type extends LdoBase&gt; \n</code></pre>"},{"location":"api/ldo/LdoBuilder/#constructor","title":"<code>constructor</code>","text":"<pre><code>constructor(\n  jsonldDatasetProxyBuilder: JsonldDatasetProxyBuilder,\n  shapeType: ShapeType&lt;Type&gt;,\n)\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#parameters","title":"Parameters","text":"<ul> <li><code>jsonldDatasetProxyBuilder</code>: A JsonldDatasetProxyBuilder</li> <li><code>shapeType</code>: The ShapeType for this builder</li> </ul>"},{"location":"api/ldo/LdoBuilder/#fromsubject","title":"<code>fromSubject</code>","text":"<p><code>fromSubject</code> lets you define a an <code>entryNode</code>, the place of entry for the graph. The object returned by <code>jsonldDatasetProxy</code> will represent the given node. This parameter accepts both <code>namedNode</code>s and <code>blankNode</code>s. <code>fromSubject</code> takes a generic type representing the typescript type of the given subject.</p> <pre><code>fromSubject(subject: SubjectNode | string): Type\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#properties","title":"Properties","text":"<ul> <li><code>subject</code>: The node to match</li> </ul>"},{"location":"api/ldo/LdoBuilder/#usage_1","title":"Usage","text":"<pre><code>const profile = ldoDataset\n  .usingType(FoafProfileShapeType)\n  .fromSubject(\"http://example.com/Person1\");\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#matchsubject","title":"<code>matchSubject</code>","text":"<p><code>matchSubject</code> returns a Jsonld Dataset Proxy representing all subjects in the dataset matching the given predicate, object, and graph.</p> <pre><code>matchSubject(\n  predicate: PredicateNode | string,\n  object?: ObjectNode | string,\n  graph?: GraphNode | string,\n): Type[]\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#parameters_1","title":"Parameters","text":"<ul> <li><code>predicate</code> (Optional): A valid Predicate Node (NamedNode) or a string URI.</li> <li><code>object</code> (Optional): A valid object node (NamedNode, Blank Node, or Literal) or a string URI.</li> <li><code>graph</code> (Optional): A valid graph node (NamedNode or DefaultGraph) or a string URI.</li> </ul>"},{"location":"api/ldo/LdoBuilder/#usage_2","title":"Usage","text":"<pre><code>const profiles = ldoDataset\n  .usingType(FoafProfileShapeType)\n  .matchSubject(\n    namedNode(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"),\n    namedNode(\"http://xmlns.com/foaf/0.1/Person\")\n  );\nprofiles.forEach((person) =&gt; {\n  console.log(person.fn);\n});\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#matchobject","title":"<code>matchObject</code>","text":"<p><code>matchObject</code> returns a Jsonld Dataset Proxy representing all objects in the dataset matching the given subject, predicate, and graph.</p> <pre><code>matchObject(\n  subject?: SubjectNode | string,\n  predicate?: PredicateNode | string,\n  graph?: GraphNode | string,\n): Type[]\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#parameters_2","title":"Parameters","text":"<ul> <li><code>subject</code> (Optional): A valid object node (NamedNode or Blank Node) or a string URI.</li> <li><code>predicate</code> (Optional): A valid Predicate Node (NamedNode) or a string URI.</li> <li><code>graph</code> (Optional): A valid graph node (NamedNode or DefaultGraph) or a string URI.</li> </ul>"},{"location":"api/ldo/LdoBuilder/#usage_3","title":"Usage","text":"<pre><code>const friendsOfPerson1 = ldoDataset\n  .usingType(FoafProfileShapeType)\n  .matchSubject(\n    namedNode(\"http://example.com/Person1\"),\n    namedNode(\"http://xmlns.com/foaf/0.1/knows\")\n  );\nfriendsOfPerson1.forEach((person) =&gt; {\n  console.log(person.fn);\n});\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#fromjson","title":"<code>fromJson</code>","text":"<p><code>fromJson</code> will take any regular Json, add the information to the dataset, and return a Jsonld Dataset Proxy representing the given data.</p> <pre><code>fromJson(inputData: Type): Type\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#parameters_3","title":"Parameters","text":"<ul> <li><code>inputData</code>: Initial data matching the type</li> </ul>"},{"location":"api/ldo/LdoBuilder/#usage_4","title":"Usage","text":"<pre><code>const person2 = ldoDataset\n  .usingType(FoafProfileShapeType)\n  .fromJson({\n    \"@id\": \"http://example.com/Person2\",\n    fn: [\"Jane Doe\"],\n  });\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#write","title":"<code>write</code>","text":"<p>By default, all new quads are added to the default graph, but you can change the graph to which new quads are added.</p> <p>NOTE: These operations only dictate the graph for new triples. Any operations that delete triples will delete triples regardless of their graph.</p> <pre><code>write(...graphs: (GraphNode | string)[]): LdoBuilder&lt;Type&gt;\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#parameters_4","title":"Parameters","text":"<ul> <li><code>...graphs</code>: any number of Graph Nodes or string URIs that all add operations will be put in.</li> </ul>"},{"location":"api/ldo/LdoBuilder/#usage_5","title":"Usage","text":"<pre><code>const person1 = ldoDataset.usingType(FoafShapeType)\n  .write(namedNode(\"http://example.com/ExampleGraph\"))\n  .fromSubject(namedNode(\"http://example.com/Person1\"));\nperson1.name.push(\"Jack\");\nconsole.log(dataset.toString());\n// Logs:\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jack\" &lt;http://example.com/ExampleGraph&gt; .\n</code></pre>"},{"location":"api/ldo/LdoBuilder/#setlanguagepreferences","title":"<code>setLanguagePreferences</code>","text":"<p>Sets the order of language preferences for Language Strings. Acceptable values are EITF language tags, \"@none\" and \"@other\"</p>"},{"location":"api/ldo/LdoBuilder/#parameters_5","title":"Parameters","text":"<ul> <li><code>...languageOrdering</code>: The order languages will be selected. Acceptable values are EITF language tags, \"@none\" and \"@other\".</li> </ul>"},{"location":"api/ldo/LdoBuilder/#usage_6","title":"Usage","text":"<pre><code>// Read Spansih first, then Korean, then language strings with no language\n// New writes are in Spanish\n[\"es\", \"ko\", \"@none\"]\n\n// Read any language other than french, then french\n// New writes are in French\n[\"@other\", \"fr\"]\n</code></pre>"},{"location":"api/ldo/LdoDataset/","title":"<code>LdoDataset</code>","text":"<p>An LdoDataset is a utility for building a linked data object.</p> <p>It is not recommended to instantiate an LdoDataset. Instead use the <code>createLdoDataset</code> function.</p>"},{"location":"api/ldo/LdoDataset/#usage","title":"Usage","text":"<pre><code>import { LdoDataset, createLdoDatasetFactory } from \"@ldo/ldo\";\nimport { FoafProfileShapeType } from \"./.ldo/foafProfile.shapeTypes\";\n\nconst ldoDatasetFactory = createLdoDatasetFactory();\nconst ldoDataset = new LdoDataset();\nconst ldoBuilder = ldoDataset.usingType(FoafProfileShapeType);\n</code></pre>"},{"location":"api/ldo/LdoDataset/#definition","title":"Definition","text":"<pre><code>class LdoDataset implements SubscribableDataset&lt;Quad&gt;, Dataset&lt;Quad, Quad&gt;\n</code></pre>"},{"location":"api/ldo/LdoDataset/#constructor","title":"<code>constructor</code>","text":"<pre><code>constructor(\n  datasetFactory: DatasetFactory&lt;InAndOutQuad, InAndOutQuad&gt;,\n  initialDataset?: Dataset&lt;InAndOutQuad, InAndOutQuad&gt;,\n)\n</code></pre>"},{"location":"api/ldo/LdoDataset/#parameters","title":"Parameters","text":"<ul> <li><code>datasetFractory</code>: A RDF/JS Dataset Factory</li> <li><code>initialDataset</code> (Optional): An RDF/JS Dataset with initial Quads</li> </ul>"},{"location":"api/ldo/LdoDataset/#dataset-methods","title":"Dataset Methods","text":"<p>LdoDataset implements all methods defined in the Dataset class.</p>"},{"location":"api/ldo/LdoDataset/#subscribable-dataset-methods","title":"Subscribable Dataset Methods","text":"<p>LdoDataset implements all methods defined in the SubscribableDataset class.</p>"},{"location":"api/ldo/LdoDataset/#usingtype","title":"<code>usingType</code>","text":"<pre><code>usingType&lt;Type extends LdoBase&gt;(shapeType: ShapeType&lt;Type&gt;): LdoBuilder&lt;Type&gt;\n</code></pre> <p>Creates an LdoBuilder for a given shapeType</p>"},{"location":"api/ldo/LdoDataset/#parameters_1","title":"Parameters","text":"<ul> <li><code>shapeType</code>: A ShapeType</li> </ul>"},{"location":"api/ldo/LdoDatasetFactory/","title":"<code>LdoDatasetFactory</code>","text":"<p><code>LdoDatasetFactory</code> is a helper class that includes methods for creating LdoDatasets.</p> <p>This class exists for parity with RDF/JS. Most developers will not use it. Instead, it's better to use <code>createLdoDataset</code>.</p>"},{"location":"api/ldo/LdoDatasetFactory/#usage","title":"Usage","text":"<pre><code>import { createLdoDatasetFactory } from \"ldo\";\n\nconst datasetFactory = // some RDF/JS Dataset Factory\nconst ldoDatasetFactory = new LdoDatasetFactory(datasetFactory);\nconst ldoDataset = ldoDatasetFactory.dataset(initialDataset);\n</code></pre>"},{"location":"api/ldo/LdoDatasetFactory/#definition","title":"Definition","text":"<pre><code>class LdoDatasetFactory implements DatasetFactory&lt;Quad, Quad&gt;\n</code></pre>"},{"location":"api/ldo/LdoDatasetFactory/#constructor","title":"<code>constructor</code>","text":"<pre><code>new LdoDatasetFactory(datasetFactory: DatasetFactory&lt;Quad, Quad&gt;)\n</code></pre>"},{"location":"api/ldo/LdoDatasetFactory/#parameters","title":"Parameters","text":"<ul> <li><code>datasetFactory</code>: A generic dataset factory this factory will wrap</li> </ul>"},{"location":"api/ldo/LdoDatasetFactory/#dataset","title":"<code>dataset</code>","text":"<pre><code>dataset(quads?: Dataset&lt;Quad, Quad&gt; | Quad[]): LdoDataset\n</code></pre>"},{"location":"api/ldo/LdoDatasetFactory/#parameters_1","title":"Parameters","text":"<ul> <li><code>quads</code>: A list of quads to initialize the dataset</li> </ul>"},{"location":"api/ldo/ShapeType/","title":"<code>ShapeType</code>","text":"<p>A <code>ShapeType</code> is an interface that contains information required by LDO to create a Linked Data Object. ShapeTypes are generated by the <code>@ldo/cli</code> <code>build</code> command, and it contains the following data:</p> <ul> <li>ShEx Schema</li> <li>Generated Typescript Typings</li> <li>Generated Context</li> </ul>"},{"location":"api/ldo/ShapeType/#usage","title":"Usage","text":"<p>The following is the ShapeType generated for the example <code>FoafProfile.shex</code> file. <pre><code>import { ShapeType } from \"ldo\";\nimport { foafProfileSchema } from \"./foafProfile.schema\";\nimport { foafProfileContext } from \"./foafProfile.context\";\nimport { FoafProfile } from \"./foafProfile.typings\";\n\n/**\n * FoafProfile ShapeType\n */\nexport const FoafProfileShapeType: ShapeType&lt;FoafProfile&gt; = {\n  schema: foafProfileSchema,\n  shape: \"https://example.com/FoafProfile\",\n  context: foafProfileContext,\n};\n</code></pre></p> <p>This can be imported and used to create a Linked Data Object. <pre><code>import { FoafProfileShapeType } from \"./.ldo/foafProfile.shapeTypes\";\nimport { FoafProfile } from \"./.ldo/foafProfile.typings\";\n\nconst profile: FoafProfile = ldoDataset\n  .usingType(FoafProfileShapeType)\n  .fromSubject(\"https://example.com/profile.ttl#me\");\n</code></pre></p>"},{"location":"api/ldo/ShapeType/#definition","title":"Definition","text":"<pre><code>type ShapeType&lt;Type extends LdoBase&gt; = {\n  schema: Schema;\n  shape: string;\n  context: ContextDefinition;\n  exampleData?: Type;\n}\n</code></pre>"},{"location":"api/ldo/ShapeType/#fields","title":"Fields","text":"<ul> <li><code>schema</code>: The ShEx Schema</li> <li><code>shape</code>: The key of the shape within the schema to which this ShapeType refers</li> <li><code>context</code>: A JSON-LD context generated for this Schema</li> <li><code>exampleData</code> (Optional): This field is optional and the <code>@ldo/cli</code> <code>build</code> command will not provide this field. The <code>exampleData</code> field's primary purpose is to force the TypeScript parser to recognize the provided <code>Type</code> so it can be auto-inferenced in the <code>LdoDataset.usingType</code> method.</li> </ul>"},{"location":"api/ldo/createLdoDataset/","title":"<code>createLdoDataset</code>","text":"<p>A function that initializes an LdoDataset.</p>"},{"location":"api/ldo/createLdoDataset/#definition","title":"Definition","text":"<pre><code>createLdoDataset(initialDataset?: Dataset&lt;Quad, Quad&gt; | Quad[]): LdoDataset\n</code></pre>"},{"location":"api/ldo/createLdoDataset/#parameters","title":"Parameters","text":"<ul> <li><code>initialDataset</code>: An optional dataset or array of quads for the new dataset</li> </ul>"},{"location":"api/ldo/createLdoDataset/#usage","title":"Usage","text":"<pre><code>import { createLdoDataset } from \"@ldo/ldo\";\n\nconst ldoDataset = createLdoDataset();\n</code></pre>"},{"location":"api/ldo/createLdoDatasetFactory/","title":"<code>createLdoDatasetFactory</code>","text":"<p><code>createLdoDatasetFactory</code> is a helper function that creates an LdoDatasetFactory.</p> <p>This function exists for parity with RDF/JS. Most developers will not use it. Instead, it's better to use <code>createLdoDataset</code>.</p>"},{"location":"api/ldo/createLdoDatasetFactory/#usage","title":"Usage","text":"<pre><code>import { createLdoDatasetFactory } from \"@ldo/ldo\";\n\nconst ldoDatasetFactory = createLdoDatasetFactory();\nconst ldoDataset = ldoDatasetFactory.dataset(initialDataset);\n</code></pre>"},{"location":"api/ldo/createLdoDatasetFactory/#definition","title":"Definition","text":"<pre><code>createLdoDatasetFactory(): Promise&lt;LdoDatasetFactory&gt;\n</code></pre>"},{"location":"api/ldo/getDataset/","title":"<code>toNTriples</code>","text":"<p>Returns the Linked Data Object's underlying RDFJS dataset. Modifying this dataset will change the Linked Data Object as well.</p>"},{"location":"api/ldo/getDataset/#usage","title":"Usage","text":"<pre><code>import { getDataset } from \"@ldo/ldo\"\nconst dataset = getDataset(profile);\n</code></pre>"},{"location":"api/ldo/getDataset/#definition","title":"Definition","text":"<pre><code>getDataset(ldo: LdoBase): Dataset\n</code></pre>"},{"location":"api/ldo/getDataset/#parameters","title":"Parameters","text":"<ul> <li><code>ldo</code>: Any linked data object</li> </ul>"},{"location":"api/ldo/graphOf/","title":"<code>graphOf</code>","text":"<p>The graph of specific information can be detected using the <code>graphOf(subject, predicate, object)</code> function.</p>"},{"location":"api/ldo/graphOf/#usage","title":"Usage","text":"<pre><code>import { graphOf } from \"@ldo/ldo\";\n\ngraphOf(person, \"name\", 0); // returns defaultGraph()\ngraphOf(person, \"age\"); // returns defaultGraph()\n</code></pre>"},{"location":"api/ldo/graphOf/#definition","title":"Definition","text":"<pre><code>import { graphOf } from \"@ldo/ldo\"\n\ngraphOf(\n  subject: LdoBase,\n  predicate: string | Symbol,\n  object?: number | LdoBase\n): GraphNode[]\n</code></pre>"},{"location":"api/ldo/graphOf/#parameters","title":"Parameters","text":"<ul> <li><code>subject</code>: A Linked Data Object that represents the subject of a quad.</li> <li><code>predicate</code>: A field on the given Linked Data Object</li> <li><code>object</code> (Optional): An optional parameter that represents the direct object of a statement. This could be a Linked Data Object or a number to indicate the location in an array. This argument can be left blank if the given field is not an array.</li> </ul>"},{"location":"api/ldo/graphOf/#return","title":"Return","text":"<p>A GraphNode (defaultGraph or namedNode).</p>"},{"location":"api/ldo/languageOf/","title":"<code>languageOf</code>","text":"<p>The <code>languageOf</code> function lets you view and modify the language strings directly. <code>languageOf</code> takes two properties:</p> <p>It returns a mapping of languages to strings or sets of strings depending on the cardinality of the JSON-LD context.</p>"},{"location":"api/ldo/languageOf/#languageof-definition","title":"<code>languageOf</code> Definition","text":"<pre><code>languagesOf(ldo: LdoBase, field: string | Symbol): LanguageSetMap | LanguageMap\n</code></pre>"},{"location":"api/ldo/languageOf/#parameters","title":"Parameters","text":"<ul> <li><code>ldo</code>: Any Linked Data Object</li> <li><code>field</code>: Any field on the provided Linked Data Object</li> </ul>"},{"location":"api/ldo/languageOf/#return","title":"Return","text":"<p><code>languageOf</code> returns either a <code>LanguageSetMap</code> if the given field is an array, or a <code>LanguageMap</code> if the given field is a singular value. For example, <code>languageOf(profile, \"friends\")</code> would return a <code>LanguageSetMap</code> because there the <code>listOfFriendNames</code> field has a cardinality over 1, but <code>languageOf(profile, \"familyName\")</code> would return a <code>LanguageMap</code> because it has a cardinality of 1.</p>"},{"location":"api/ldo/languageOf/#langaugemap","title":"<code>LangaugeMap</code>","text":"<pre><code>type LanguageMap = {\n  \"@none\"?: string;\n  [language: string]: string | undefined;\n}\n</code></pre> <p>The <code>LanguageMap</code> is a mapping between various language tags (including the <code>@none</code> tag) and the singular language value for that tag. Modifying the <code>LanguageMap</code> will automatically update the underlying dataset.</p>"},{"location":"api/ldo/languageOf/#usage","title":"Usage","text":"<pre><code>const labelLanguages = languagesOf(hospitalInfo, \"label\");\n// labelLanguages: { '@none': 'Hospital', fr: 'H\u00f4pital', ko: '\ubcd1\uc6d0' }\n// logs \"\ubcd1\uc6d0\"\nconsole.log(labelLanguages.ko);\n// Adds a Chinese label\nlabelLanguages.zh = \"\u533b\u9662\";\n// Changes the no-language label from to \"Super Hospital\"\nlabelLanguages[\"@none\"] = \"Super Hospital\";\n// Removes the French label\ndelete labelLanguages.fr;\n</code></pre>"},{"location":"api/ldo/languageOf/#langaugesetmap","title":"<code>LangaugeSetMap</code>","text":"<pre><code>type LanguageMap = {\n  \"@none\"?: string;\n  [language: string]: string | undefined;\n}\n</code></pre> <p>The <code>LanguageSetMap</code> is a mapping between various language tags (including the <code>@none</code> tag) and a JavaScript Set of all values for that tag. Modifying the <code>LanguageSetMap</code> will automatically update the underlying dataset.</p>"},{"location":"api/ldo/languageOf/#usage_1","title":"Usage","text":"<pre><code>const descriptionLanguages = languagesOf(hospitalInfo, \"description\");\n// descriptionLanguages:\n// {\n//   '@none': Set(2) { 'Heals patients', 'Has doctors' },\n//   fr: Set(2) { 'Gu\u00e9rit les malades', 'A des m\u00e9decins' },\n//   ko: Set(2) { '\ud658\uc790\ub97c \uce58\ub8cc\ud558\ub2e4', '\uc758\uc0ac \uc788\uc74c' }\n// }\n// Logs: \ud658\uc790\ub97c \uce58\ub8cc\ud558\ub2e4\\n\uc758\uc0ac \uc788\uc74c\nArray.from(descriptionLanguages.ko).forEach((str) =&gt; console.log(str));\n// Adds a Hindi description\ndescriptionLanguages.hi?.add(\"\u0930\u094b\u0917\u093f\u092f\u094b\u0902 \u0915\u094b \u0920\u0940\u0915 \u0915\u0930\u0924\u093e \u0939\u0948\");\n// Checks to see if the korean label contains \"\uc758\uc0ac \uc788\uc74c\"\ndescriptionLanguages.ko?.has(\"\uc758\uc0ac \uc788\uc74c\"); // returns true\n// Removes \"Has Doctors\" from the no-language description\ndescriptionLanguages[\"@none\"]?.delete(\"Has Doctors\");\n</code></pre>"},{"location":"api/ldo/parseRdf/","title":"<code>parseRdf</code>","text":"<p>Parses raw RDF and puts its results into an LdoDataset.</p>"},{"location":"api/ldo/parseRdf/#usage","title":"Usage","text":"<pre><code>import { parseRdf } from \"ldo\";\n\nconst rawTurtle = \"...\";\nconst ldoDataset = parseRdf(rawTurtle, { baseIRI: \"https://example.com/\" });\n</code></pre>"},{"location":"api/ldo/parseRdf/#definition","title":"Definition","text":"<pre><code>parseRdf(data: string, parserOptions?: ParserOptions): Promise&lt;LdoDataset&gt;\n</code></pre>"},{"location":"api/ldo/parseRdf/#parameters","title":"Parameters","text":"<ul> <li><code>data</code>: The raw data to parse as a <code>string</code>.</li> <li><code>options</code> (optional): Parse options containing the following keys:<ul> <li><code>format</code> (optional): The format the data is in. The following are acceptable formats: <code>Turtle</code>, <code>TriG</code>, <code>N-Triples</code>, <code>N-Quads</code>, <code>N3</code>, <code>Notation3</code>.</li> <li><code>baseIRI</code> (optional): If this data is hosted at a specific location, you can provide the baseIRI of that location.</li> <li><code>blankNodePrefix</code> (optional): If blank nodes should have a prefix, that should be provided here.</li> <li><code>factory</code> (optional): a RDF Data Factory from  <code>@rdfjs/data-model</code>. </li> </ul> </li> </ul>"},{"location":"api/ldo/serialize/","title":"<code>serialize</code>","text":"<p>Converts a Linked Data Object to a string representation based on a provided configuration.</p>"},{"location":"api/ldo/serialize/#usage","title":"Usage","text":"<pre><code>import { serialize } from \"@ldo/ldo\"\n// ...\nconst rawTurtle: string = await serialize(profile, {\n  format: \"Turtle\",\n  prefixes: {\n    ex: \"https://example.com/\",\n    foaf: \"http://xmlns.com/foaf/0.1/\",\n  }\n});\n</code></pre>"},{"location":"api/ldo/serialize/#definition","title":"Definition","text":"<pre><code>serialize(ldo: LdoBase, options: WriterOptions): Promise&lt;string&gt; \n</code></pre>"},{"location":"api/ldo/serialize/#parameters","title":"Parameters","text":"<ul> <li><code>ldo</code>: Any linked data object</li> <li><code>options</code>: WriterOptions from N3:</li> <li><code>format</code> (Optional): <code>string | MimeFormat | undefined</code> The name of the format to serialize.</li> <li><code>prefixes</code> (Optional): <code>Prefixes&lt;RDF.NamedNode | string&gt; | - undefined</code> A list of prefixes that should be in the document. </li> </ul>"},{"location":"api/ldo/setLanguagePreferences/","title":"<code>setLanguagePreferences</code>","text":"<p>A language preference is an ordered list telling the Linked Data Object the language you prefer as well as callbacks. </p> <p>For read operations, the Linked Data Object will search for values in order of the preference. Write operations will choose the first language in the language preference, unless that language is <code>@other</code>, in which case it will choose the next language.</p> <pre><code>// Read Spansih first, then Korean, then language strings with no language\n// New writes are in Spanish\n[\"es\", \"ko\", \"@none\"]\n\n// Read any language other than french, then french\n// New writes are in French\n[\"@other\", \"fr\"]\n</code></pre>"},{"location":"api/ldo/setLanguagePreferences/#setlanguagepreferencesusing","title":"<code>setLanguagePreferences.using</code>","text":"<p>The <code>setLanguagePreferences(...).using(...)</code> function sets the language preferences for a set of Linked Data Objects. </p> <pre><code>setLanguagePreference(...languageOrdering: (\"@none\" | \"@other\" | string)[])\n  .using(...ldos: LdoBase[]): void\n</code></pre>"},{"location":"api/ldo/setLanguagePreferences/#parameters","title":"Parameters","text":"<p>setLanguagePreference</p> <ul> <li><code>languageOrdering</code>: An ordering of preferred languages. Valid values for the language preferences includes any IETF Language Tag as well as the special tags <code>@none</code> and <code>@other</code>. <code>@none</code> represents any language literal that doesn't have a language tag. <code>@other</code> represents any language literal that isn't listed among the language preferences.</li> </ul> <p>using</p> <ul> <li><code>ldos</code>: Any number of linked data objects that should have the provided language preferences applied.</li> </ul>"},{"location":"api/ldo/setLanguagePreferences/#usage","title":"Usage","text":"<pre><code>import { setLanguagePreferences } from \"@ldo/ldo\";\n\nsetLanguagePreferences(\"fr\", \"ko\").using(hospitalInfo);\nconsole.log(hospitalInfo.label); // Logs \"H\u00f4pital\"\nsetLanguagePreferences(\"@none\").using(hospitalInfo);\nconsole.log(hospitalInfo.label); // Logs \"Hospital\"\n</code></pre>"},{"location":"api/ldo/setLanguagePreferences/#setlanguagepreferencesusingcopy","title":"<code>setLanguagePreferences.usingCopy</code>","text":"<p>The <code>setLanguagePreferences(...).usingCopy(...)</code> function returns a copy of the provided Linked Data Objects with the given language preferences.</p> <pre><code>setLanguagePreference(...languageOrdering: (\"@none\" | \"@other\" | string)[])\n  .using(...ldos: LdoBase[]): LdoBase[]\n</code></pre>"},{"location":"api/ldo/setLanguagePreferences/#parameters_1","title":"Parameters","text":"<p>setLanguagePreference</p> <ul> <li><code>languageOrdering</code>: An ordering of preferred languages. Valid values for the language preferences includes any IETF Language Tag as well as the special tags <code>@none</code> and <code>@other</code>. <code>@none</code> represents any language literal that doesn't have a language tag. <code>@other</code> represents any language literal that isn't listed among the language preferences.</li> </ul> <p>using</p> <ul> <li><code>ldos</code>: Any number of linked data objects that should have the provided language preferences applied to a copy.</li> </ul>"},{"location":"api/ldo/setLanguagePreferences/#return","title":"Return","text":"<p>An array of copied Linked Data Objects with the given language preferences applied.</p>"},{"location":"api/ldo/setLanguagePreferences/#usage_1","title":"Usage","text":"<pre><code>import { setLanguagePreferences } from \"@ldo/ldo\";\n\n// ...\n\nconst [frenchPreference] = setLanguagePreferences(\"fr\").usingCopy(hospitalInfo);\nconst [koreanPreference] = setLanguagePreferences(\"ko\").usingCopy(hospitalInfo);\nconsole.log(frenchPreference.label); // Logs \"H\u00f4pital\"\nconsole.log(koreanPreference.label); // Logs \"\ubcd1\uc6d0\"\n</code></pre>"},{"location":"api/ldo/toNTriples/","title":"<code>toNTriples</code>","text":"<p>Converts a Linked Data Object to a NTriples string</p>"},{"location":"api/ldo/toNTriples/#usage","title":"Usage","text":"<pre><code>import { toNTriples } from \"@ldo/ldo\"\n// ...\nconst rawNTriples: string = await toNTriples(profile);\n</code></pre>"},{"location":"api/ldo/toNTriples/#definition","title":"Definition","text":"<pre><code>toNTriples(ldo: LdoBase): Promise&lt;string&gt;\n</code></pre>"},{"location":"api/ldo/toNTriples/#parameters","title":"Parameters","text":"<ul> <li><code>ldo</code>: Any linked data object</li> </ul>"},{"location":"api/ldo/toSparqlUpdate/","title":"<code>toNTriples</code>","text":"<p>Converts a \"transactable\" Linked Data Object (A Linked Data Object that has been passed as a parameter to the <code>startTransaction</code> function) to a SPARQL/Update string.</p>"},{"location":"api/ldo/toSparqlUpdate/#usage","title":"Usage","text":"<pre><code>import { toSparqlUpdate, startTransaction } from \"@ldo/ldo\"\n// ...\nstartTransaction(profile);\nconst sparqlUpdate: string = await toSparqlUpdate(profile);\n</code></pre>"},{"location":"api/ldo/toSparqlUpdate/#definition","title":"Definition","text":"<pre><code>toSparqlUpdate(ldo: LdoBase): Promise&lt;string&gt;\n</code></pre>"},{"location":"api/ldo/toSparqlUpdate/#parameters","title":"Parameters","text":"<ul> <li><code>ldo</code>: Any linked data object that is currently \"transactable\"</li> </ul>"},{"location":"api/ldo/toTurtle/","title":"<code>toTurtle</code>","text":"<p>Converts a Linked Data Object to a Turtle string</p>"},{"location":"api/ldo/toTurtle/#usage","title":"Usage","text":"<pre><code>import { toTurtle } from \"@ldo/ldo\"\n// ...\nconst rawTurtle: string = await toTurtle(profile);\n</code></pre>"},{"location":"api/ldo/toTurtle/#definition","title":"Definition","text":"<pre><code>toTurtle(ldo: LdoBase): Promise&lt;string&gt; \n</code></pre>"},{"location":"api/ldo/toTurtle/#parameters","title":"Parameters","text":"<ul> <li><code>ldo</code>: Any linked data object</li> </ul>"},{"location":"api/ldo/transactions/","title":"transactions","text":"<p>Transactions let you modify data and commit all modifications at once. It's also useful for seeing the changes that were made.</p>"},{"location":"api/ldo/transactions/#usage","title":"Usage","text":"<pre><code>import {\n  startTransaction,\n  transactionChanges,\n  toSparqlUpdate,\n  commitTransaction,\n} from \"@ldo/ldo\"; \n\n// ... Get the profile linked data object\n\nstartTransaction(profile);\nprofile.name = \"Kuzon\"\nconst changes = transactionChanges(profile));\n// Logs: &lt;https://example.com/aang&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Kuzon\"\nconsole.log(changes.added?.toString())\n// Logs: &lt;https://example.com/aang&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Aang\"\nconsole.log(changes.removed?.toString())\ncommitTransaction(profile);\n</code></pre>"},{"location":"api/ldo/transactions/#starttransaction","title":"<code>startTransaction</code>","text":"<p>Begins a transaction for a Linked Data Object. After this function is run, the Linked Data Object is considered to be \"transactable\" where all modifications are not written to the underlying dataset are stored separately as a delta.</p> <p>Note: If a Linked Data Object is \"transactable\", it cannot be passed into <code>startTransaction</code> a second time.</p> <pre><code>startTransaction(ldo: LdoBase): void\n</code></pre>"},{"location":"api/ldo/transactions/#parameters","title":"Parameters","text":"<ul> <li><code>ldo</code>: Any linked data object that is not currently \"transactable\"</li> </ul>"},{"location":"api/ldo/transactions/#committransaction","title":"<code>commitTransaction</code>","text":"<p>Commits a transaction, writing all the stored changes to the underlying dataset. After this function is run, the Linked Data Object is considered to be NOT \"transactable\" all further modifications will be written directly to the underlying dataset.</p> <pre><code>commitTransaction(ldo: LdoBase): void\n</code></pre>"},{"location":"api/ldo/transactions/#parameters_1","title":"Parameters","text":"<ul> <li><code>ldo</code>: Any linked data object that is currently \"transactable\"</li> </ul>"},{"location":"api/ldo/transactions/#transactionchanges","title":"<code>transactionChanges</code>","text":"<p>Returns the changes that are made on a \"transactable\" Linked Data Object.</p> <pre><code>transactionChanges(ldo: LdoBase): DatasetChanges&lt;Quad&gt;\n</code></pre>"},{"location":"api/ldo/transactions/#parameters_2","title":"Parameters","text":"<ul> <li><code>ldo</code>: Any linked data object that is currently \"transactable\"</li> </ul>"},{"location":"api/ldo/transactions/#return-value","title":"Return Value","text":"<p>DatasetChanges</p> <ul> <li><code>added</code> (Optional): <code>Dataset&lt;Quad&gt;</code>: All quads added during this transaction.</li> <li><code>removed</code> (Optional): <code>Dataset&lt;Quad&gt;</code>: All quads removed during this transaction</li> </ul>"},{"location":"api/ldo/write/","title":"<code>write</code>","text":"<p>By default, all new quads are added to the default graph, but you can change the graph to which new quads are added using the <code>write</code> function.</p>"},{"location":"api/ldo/write/#writeusing","title":"<code>write.using</code>","text":"<p>The <code>write(...).using(...)</code> function lets you define the graphs you wish to write to using specific jsonldDatasetProxies.</p> <pre><code>write(...graphs: GraphNode[])\n  .using(...ldos: LdoBase[]): void\n</code></pre>"},{"location":"api/ldo/write/#parameters","title":"Parameters","text":"<p>setLanguagePreference</p> <ul> <li><code>graphs</code>: Any number of GraphNodes (DefaultNode or NamedNode)</li> </ul> <p>using</p> <ul> <li><code>ldos</code>: Any number of linked data objects that should have changes written to the provided graph upon modification.</li> </ul>"},{"location":"api/ldo/write/#usage","title":"Usage","text":"<pre><code>import { write } from \"@ldo/ldo\";\n\n// Now all additions with person1 will be on ExampleGraph1\nwrite(namedNode(\"http://example.com/ExampleGraph1\")).using(person1);\nperson1.name.push(\"Jack\");\n// Now all additions with person1 will be on ExampleGraph2\nwrite(namedNode(\"http://example.com/ExampleGraph2\")).using(person1);\nperson1.name.push(\"Spicer\");\n\nconsole.log(dataset.toString());\n// Logs:\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jack\" &lt;http://example.com/ExampleGraph1&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Spicer\" &lt;http://example.com/ExampleGraph2&gt; .\n</code></pre> <p>The function also returns an <code>end</code> function that will reset the graph to what it was before. This is useful for nesting graph modifications.</p> <pre><code>person1.name.push(\"default\");\nconst end1 = write(namedNode(\"http://example.com/Graph1\")).using(person1);\nperson1.name.push(\"1\");\nconst end2 = write(namedNode(\"http://example.com/Graph2\")).using(person1);\nperson1.name.push(\"2\");\nconst end3 = write(namedNode(\"http://example.com/Graph3\")).using(person1);\nperson1.name.push(\"3\");\nend3();\nperson1.name.push(\"2 again\");\nend2();\nperson1.name.push(\"1 again\");\nend1();\nperson1.name.push(\"default again\");\nconsole.log(dataset.toString());\n// Logs:\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"default\" .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"default again\" .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"1\" &lt;http://example.com/Graph1&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"1 again\" &lt;http://example.com/Graph1&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"2\" &lt;http://example.com/Graph2&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"2 again\" &lt;http://example.com/Graph2&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"3\" &lt;http://example.com/Graph3&gt; .\n</code></pre>"},{"location":"api/ldo/write/#writeusingcopy","title":"<code>write.usingCopy</code>","text":"<p>If you would like a new variable to write to without modifying the original Jsonld Dataset Proxy, you can use <code>write(...).usingCopy(...)</code>.</p> <pre><code>setLanguagePreference(...languageOrdering: (\"@none\" | \"@other\" | string)[])\n  .using(...ldos: LdoBase[]): LdoBase[]\n</code></pre>"},{"location":"api/ldo/write/#parameters_1","title":"Parameters","text":"<p>setLanguagePreference</p> <ul> <li><code>graphs</code>: Any number of GraphNodes (DefaultNode or NamedNode)</li> </ul> <p>using</p> <ul> <li><code>ldos</code>: Any number of linked data objects that should have changes written to the provided graph upon modification.</li> </ul>"},{"location":"api/ldo/write/#return","title":"Return","text":"<p>An array of copied Linked Data Objects with the given write graphs applied.</p>"},{"location":"api/ldo/write/#usage_1","title":"Usage","text":"<pre><code>const [person1WritingToNewGraph] = write(\n  namedNode(\"http://example.com/NewGraph\")\n).usingCopy(person1);\nperson1WritingToNewGraph.name.push(\"Brandon\");\nperson1.name.push(\"Sanderson\");\nconsole.log(dataset.toString());\n// Logs:\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Brandon\" &lt;http://example.com/NewGraph&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Sanderson\" .\n</code></pre>"},{"location":"api/rdf-utils/","title":"Index","text":"<p>This page is not yet written.</p>"},{"location":"api/schema-converter-shex/","title":"Index","text":"<p>This page is not yet written.</p>"},{"location":"api/solid/","title":"@ldo/solid","text":"<p>@ldo/solid is a client that implements the Solid specification with the use of Linked Data Objects.</p>"},{"location":"api/solid/#installation","title":"Installation","text":"<p>Navigate into your project's root folder and run the following command: <pre><code>cd my_project/\nnpx run @ldo/cli init\n</code></pre></p> <p>Now install the @ldo/solid library</p> <pre><code>npm i @ldo/solid\n</code></pre>"},{"location":"api/solid/#manual-installation","title":"Manual Installation","text":"<p>If you already have generated ShapeTypes, you may install the <code>@ldo/ldo</code> and <code>@ldo/solid</code> libraries independently.</p> <pre><code>npm i @ldo/ldo @ldo/solid\n</code></pre>"},{"location":"api/solid/#simple-examples","title":"Simple Examples","text":"<p>Below is a simple example of @ldo/solid. Assume that a ShapeType was previously generated and placed at <code>./.ldo/foafProfile.shapeTypes</code>. Also assume we have a shape type for social media at <code>./.ldo/socialMediaPost.shapeTypes</code></p> <pre><code>import { changeData, commitData, createSolidLdoDataset } from \"@ldo/solid\";\nimport { fetch, getDefaultSession } from \"@inrupt/solid-client-authn-browser\";\nimport { FoafProfileShapeType } from \"./.ldo/foafProfile.shapeTypes\";\nimport { SocialMediaPostShapeType } from \"./.ldo/socialMediaPost.shapeTypes\";\n\nasync function main() {\n  /**\n   * ===========================================================================\n   * READING DATA FROM A POD\n   * ===========================================================================\n   */\n\n  // Before we begin using @ldo/solid. Let's get the WebId of the current user\n  const webIdUri = getDefaultSession().info.webId;\n  if (!webIdUri) throw new Error(\"User is not logged in\");\n\n  // Now let's proceed with @ldo/solid. Our first step is setting up a\n  // SolidLdoDataset. You can think of this dataset as a local store for all the\n  // information in the Solidverse. Don't forget to pass the authenticated fetch\n  // function to do your queries!\n  const solidLdoDataset = createSolidLdoDataset({ fetch });\n\n  // We'll start with getting a representation of our WebId's resource\n  const webIdResource = solidLdoDataset.getResource(webIdUri);\n\n  // This resource is currently unfetched\n  console.log(webIdResource.isUnfetched()); // Logs true\n\n  // So let's fetch it! Running the `read` command will make a request to get\n  // the WebId.\n  const readResult = await webIdResource.read();\n\n  // @ldo/solid will never throw an error. Instead, it will return errors. This\n  // design decision was made to force you to handle any errors. It may seem a\n  // bit annoying at first, but it will result in more resiliant code. You can\n  // easily follow intellisense tooltips to see what kinds of errors each action\n  // can throw.\n  if (readResult.isError) {\n    switch (readResult.type) {\n      case \"serverError\":\n        console.error(\"The solid server had an error:\", readResult.message);\n        return;\n      case \"noncompliantPodError\":\n        console.error(\"The Pod responded in a way not compliant with the spec\");\n        return;\n      default:\n        console.error(\"Some other error was detected:\", readResult.message);\n    }\n  }\n\n  // When fetching a data resource, read triples will automatically be added to\n  // the solidLdoDataset. You can access them using Linked Data Objects. In\n  // the following example we're using a Profile Linked Data Object that was\n  // generated with the init step.\n  const profile = solidLdoDataset\n    .usingType(FoafProfileShapeType)\n    .fromSubject(webIdUri);\n\n  // Now you can read \"profile\" like any JSON.\n  console.log(profile.name);\n\n  /**\n   * ===========================================================================\n   * MODIFYING DATA\n   * ===========================================================================\n   */\n\n  // When we want to modify data the first step is to use the `changeData`\n  // function. We pass in an object that we want to change (in this case,\n  // \"profile\") as well an a list of any resources to which we want those\n  // changes to be applied (in this case, just the webIdResource). This gives\n  // us a new variable (conventionally named with a c for \"changed\") that we can\n  // write changes to.\n  const cProfile = changeData(profile, webIdResource);\n\n  // We can make changes just like it's regular JSON\n  cProfile.name = \"Captain Cool Dude\";\n\n  // Committing data is as easy as running the \"commitData\" function.\n  const commitResult = await commitData(cProfile);\n\n  // Remember to check for and handle errors! We'll keep it short this time.\n  if (commitResult.isError) throw commitResult;\n\n  /**\n   * ===========================================================================\n   * CREATING NEW RESOURCES\n   * ===========================================================================\n   */\n\n  // Let's create some social media posts to be stored on the Solid Pod!\n  // Our first step is going to be finding where to place these posts. In the\n  // future, there will be advanced ways to determine the location of resources\n  // but for now, let's throw it in the root folder.\n\n  // But, first, let's find out where the root folder is. We can take our WebId\n  // resource and call `getRootContainer`. Let's assume the root container has\n  // a URI \"https://example.com/\"\n  const rootContainer = await webIdResource.getRootContainer();\n  if (rootContainer.isError) throw rootContainer;\n\n  // Now, let's create a container for our posts\n  const createPostContainerResult =\n    await rootContainer.createChildIfAbsent(\"social-posts/\");\n  if (createPostContainerResult.isError) throw createPostContainerResult;\n\n  // Most results store the affected resource in the \"resource\" field. This\n  // container has the URI \"https://example.com/social-posts/\"\n  const postContainer = createPostContainerResult.resource;\n\n  // Now that we have our container, let's make a Post resource! This is a data\n  // resource, which means we can put raw Solid Data (RDF) into it.\n  const postResourceResult =\n    await postContainer.createChildAndOverwrite(\"post1.ttl\");\n  if (postResourceResult.isError) throw postResourceResult;\n  const postResource = postResourceResult.resource;\n\n  // We can also create binary resources with things like images\n  const imageResourceResult = await postContainer.uploadChildAndOverwrite(\n    // name of the binary\n    \"image1.svg\",\n    // A blob for the binary\n    new Blob([`&lt;svg&gt;&lt;circle r=\"9\" /&gt;&lt;/svg&gt;`]),\n    // mime type of the binary\n    \"image/svg+xml\",\n  );\n  if (imageResourceResult.isError) throw imageResourceResult;\n  const imageResource = imageResourceResult.resource;\n\n  /**\n   * ===========================================================================\n   * CREATING NEW DATA\n   * ===========================================================================\n   */\n\n  // We create data in a similar way to the way we modify data. We can use the\n  // \"createData\" method.\n  const cPost = solidLdoDataset.createData(\n    // An LDO ShapeType saying that this is a social media psot\n    SocialMediaPostShapeType,\n    // The URI of the post (in this case we'll make it the same as the resource)\n    postResource.uri,\n    // The resource we should write it to\n    postResource,\n  );\n\n  // We can add new data\n  cPost.text = \"Check out this bad svg:\";\n  cPost.image = { \"@id\": imageResource.uri };\n\n  // And now we commit data\n  const newDataResult = await commitData(cPost);\n  if (newDataResult.isError) throw newDataResult;\n\n  /**\n   * ===========================================================================\n   * DELETING RESOURCES\n   * ===========================================================================\n   */\n\n  // Deleting resources can be done with a single method call. In this case,\n  // the container will be deleted along with all its contained resources\n  const deleteResult = await postContainer.delete();\n  if (deleteResult.isError) throw deleteResult;\n}\nmain();\n</code></pre>"},{"location":"api/solid/#api-details","title":"API Details","text":"<p>SolidLdoDataset</p> <ul> <li>createSolidLdoDataset</li> <li>SolidLdoDataset</li> </ul> <p>Resources (Manage batching requests)</p> <ul> <li>LeafUri</li> <li>ContainerUri</li> <li>Leaf</li> <li>Container</li> </ul> <p>Standalone Functions</p> <ul> <li>checkRootContainter</li> <li>createDataResource</li> <li>deleteResource</li> <li>readResource</li> <li>updateResource</li> <li>uploadResource</li> </ul> <p>Data Functions  - changeData  - commitData</p>"},{"location":"api/solid/#sponsorship","title":"Sponsorship","text":"<p>This project was made possible by a grant from NGI Zero Entrust via nlnet. Learn more on the NLnet project page.</p> <p> </p>"},{"location":"api/solid/#liscense","title":"Liscense","text":"<p>MIT</p>"},{"location":"api/solid/modules/","title":"@ldo/solid","text":""},{"location":"api/solid/modules/#classes","title":"Classes","text":"<ul> <li>Container</li> <li>Leaf</li> <li>Resource</li> <li>SolidLdoDataset</li> <li>SolidLdoTransactionDataset</li> </ul>"},{"location":"api/solid/modules/#interfaces","title":"Interfaces","text":"<ul> <li>AccessModeList</li> <li>BasicRequestOptions</li> <li>CreateSolidLdoDatasetOptions</li> <li>DatasetRequestOptions</li> <li>GetWacRuleSuccess</li> <li>GetWacUriSuccess</li> <li>SetWacRuleSuccess</li> <li>SolidLdoDatasetContext</li> <li>WacRule</li> <li>WacRuleAbsent</li> </ul>"},{"location":"api/solid/modules/#type-aliases","title":"Type Aliases","text":"<ul> <li>CheckRootResult</li> <li>CheckRootResultError</li> <li>ContainerCreateAndOverwriteResult</li> <li>ContainerCreateIfAbsentResult</li> <li>ContainerUri</li> <li>CreateAndOverwriteResultErrors</li> <li>CreateErrors</li> <li>CreateIfAbsentResultErrors</li> <li>DeleteResult</li> <li>DeleteResultError</li> <li>GetWacRuleError</li> <li>GetWacRuleResult</li> <li>GetWacUriError</li> <li>GetWacUriResult</li> <li>LeafCreateAndOverwriteResult</li> <li>LeafCreateIfAbsentResult</li> <li>LeafUri</li> <li>ReadContainerResult</li> <li>ReadLeafResult</li> <li>ReadResultError</li> <li>SetWacRuleError</li> <li>SetWacRuleResult</li> <li>SharedStatuses</li> <li>UpdateResult</li> <li>UpdateResultError</li> </ul>"},{"location":"api/solid/modules/#functions","title":"Functions","text":"<ul> <li>changeData</li> <li>checkHeadersForRootContainer</li> <li>checkRootContainer</li> <li>commitData</li> <li>createDataResource</li> <li>createSolidLdoDataset</li> <li>deleteResource</li> <li>getWacRuleWithAclUri</li> <li>getWacUri</li> <li>isContainerUri</li> <li>isLeafUri</li> <li>readResource</li> <li>setWacRuleForAclUri</li> <li>updateDataResource</li> <li>uploadResource</li> </ul>"},{"location":"api/solid/classes/Container/","title":"Class: Container","text":"<p>Represents the current status of a specific container on a Pod as known by LDO.</p> <p><code>Example</code></p> <pre><code>const container = solidLdoDataset\n  .getResource(\"https://example.com/container/\");\n</code></pre>"},{"location":"api/solid/classes/Container/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Resource</code></li> </ul> <p>\u21b3 <code>Container</code></p>"},{"location":"api/solid/classes/Container/#constructors","title":"Constructors","text":""},{"location":"api/solid/classes/Container/#constructor","title":"constructor","text":"<p>\u2022 new Container(<code>uri</code>, <code>context</code>): <code>Container</code></p>"},{"location":"api/solid/classes/Container/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>ContainerUri</code> The uri of the container <code>context</code> <code>SolidLdoDatasetContext</code> SolidLdoDatasetContext for the parent dataset"},{"location":"api/solid/classes/Container/#returns","title":"Returns","text":"<p><code>Container</code></p>"},{"location":"api/solid/classes/Container/#overrides","title":"Overrides","text":"<p>Resource.constructor</p>"},{"location":"api/solid/classes/Container/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:87</p>"},{"location":"api/solid/classes/Container/#properties","title":"Properties","text":""},{"location":"api/solid/classes/Container/#absent","title":"absent","text":"<p>\u2022 <code>Protected</code> absent: <code>undefined</code> | <code>boolean</code></p> <p>True if this resource has been fetched but does not exist</p>"},{"location":"api/solid/classes/Container/#inherited-from","title":"Inherited from","text":"<p>Resource.absent</p>"},{"location":"api/solid/classes/Container/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:84</p>"},{"location":"api/solid/classes/Container/#context","title":"context","text":"<p>\u2022 <code>Protected</code> <code>Readonly</code> context: <code>SolidLdoDatasetContext</code></p> <p>The SolidLdoDatasetContext from the Parent Dataset</p>"},{"location":"api/solid/classes/Container/#inherited-from_1","title":"Inherited from","text":"<p>Resource.context</p>"},{"location":"api/solid/classes/Container/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:51</p>"},{"location":"api/solid/classes/Container/#didinitialfetch","title":"didInitialFetch","text":"<p>\u2022 <code>Protected</code> didInitialFetch: <code>boolean</code> = <code>false</code></p> <p>True if this resource has been fetched at least once</p>"},{"location":"api/solid/classes/Container/#inherited-from_2","title":"Inherited from","text":"<p>Resource.didInitialFetch</p>"},{"location":"api/solid/classes/Container/#defined-in_3","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:78</p>"},{"location":"api/solid/classes/Container/#iserror","title":"isError","text":"<p>\u2022 <code>Readonly</code> isError: <code>false</code></p> <p>Indicates that this resource is not an error</p>"},{"location":"api/solid/classes/Container/#defined-in_4","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:71</p>"},{"location":"api/solid/classes/Container/#requester","title":"requester","text":"<p>\u2022 <code>Protected</code> requester: <code>ContainerBatchedRequester</code></p> <p>Batched Requester for the Container</p>"},{"location":"api/solid/classes/Container/#overrides_1","title":"Overrides","text":"<p>Resource.requester</p>"},{"location":"api/solid/classes/Container/#defined-in_5","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:55</p>"},{"location":"api/solid/classes/Container/#rootcontainer","title":"rootContainer","text":"<p>\u2022 <code>Protected</code> rootContainer: <code>undefined</code> | <code>boolean</code></p> <p>True if this is the root container, false if not, undefined if unknown</p>"},{"location":"api/solid/classes/Container/#defined-in_6","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:61</p>"},{"location":"api/solid/classes/Container/#status","title":"status","text":"<p>\u2022 status: <code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code> | <code>DeleteSuccess</code> | <code>CheckRootContainerSuccess</code> | <code>Unfetched</code></p> <p>The status of the last request made for this container</p>"},{"location":"api/solid/classes/Container/#overrides_2","title":"Overrides","text":"<p>Resource.status</p>"},{"location":"api/solid/classes/Container/#defined-in_7","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:76</p>"},{"location":"api/solid/classes/Container/#type","title":"type","text":"<p>\u2022 <code>Readonly</code> type: <code>\"container\"</code></p> <p>Indicates that this resource is a container resource</p>"},{"location":"api/solid/classes/Container/#overrides_3","title":"Overrides","text":"<p>Resource.type</p>"},{"location":"api/solid/classes/Container/#defined-in_8","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:66</p>"},{"location":"api/solid/classes/Container/#uri","title":"uri","text":"<p>\u2022 <code>Readonly</code> uri: <code>ContainerUri</code></p> <p>The URI of the container</p>"},{"location":"api/solid/classes/Container/#overrides_4","title":"Overrides","text":"<p>Resource.uri</p>"},{"location":"api/solid/classes/Container/#defined-in_9","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:49</p>"},{"location":"api/solid/classes/Container/#wacrule","title":"wacRule","text":"<p>\u2022 <code>Protected</code> <code>Optional</code> wacRule: <code>WacRule</code></p> <p>If a wac rule was fetched, it is cached here</p>"},{"location":"api/solid/classes/Container/#inherited-from_3","title":"Inherited from","text":"<p>Resource.wacRule</p>"},{"location":"api/solid/classes/Container/#defined-in_10","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:96</p>"},{"location":"api/solid/classes/Container/#wacuri","title":"wacUri","text":"<p>\u2022 <code>Protected</code> <code>Optional</code> wacUri: <code>LeafUri</code></p> <p>If a wac uri is fetched, it is cached here</p>"},{"location":"api/solid/classes/Container/#inherited-from_4","title":"Inherited from","text":"<p>Resource.wacUri</p>"},{"location":"api/solid/classes/Container/#defined-in_11","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:90</p>"},{"location":"api/solid/classes/Container/#methods","title":"Methods","text":""},{"location":"api/solid/classes/Container/#addlistener","title":"addListener","text":"<p>\u25b8 addListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Container/#type-parameters","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_1","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Container/#returns_1","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_5","title":"Inherited from","text":"<p>Resource.addListener</p>"},{"location":"api/solid/classes/Container/#defined-in_12","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:22</p>"},{"location":"api/solid/classes/Container/#checkifisrootcontainer","title":"checkIfIsRootContainer","text":"<p>\u25b8 checkIfIsRootContainer(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>CheckRootResult</code>, <code>Container</code>&gt;&gt;</p> <p>Checks if this container is a root container by making a request</p>"},{"location":"api/solid/classes/Container/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>CheckRootResult</code>, <code>Container</code>&gt;&gt;</p> <p>CheckRootResult</p>"},{"location":"api/solid/classes/Container/#defined-in_13","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:211</p>"},{"location":"api/solid/classes/Container/#child","title":"child","text":"<p>\u25b8 child(<code>slug</code>): <code>Container</code></p> <p>Returns a child resource with a given name (slug)</p>"},{"location":"api/solid/classes/Container/#parameters_2","title":"Parameters","text":"Name Type Description <code>slug</code> <code>ContainerUri</code> the given name for that child resource"},{"location":"api/solid/classes/Container/#returns_3","title":"Returns","text":"<p><code>Container</code></p> <p>the child resource (either a Leaf or Container depending on the name)</p> <p><code>Example</code></p> <pre><code>const root = solidLdoDataset.getResource(\"https://example.com/\");\nconst container = solidLdoDataset.child(\"container/\");\n// Logs \"https://example.com/container/\"\nconsole.log(container.uri);\nconst resource = container.child(\"resource.ttl\");\n// Logs \"https://example.com/container/resource.ttl\"\nconsole.log(resource.uri);\n</code></pre>"},{"location":"api/solid/classes/Container/#defined-in_14","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:331</p> <p>\u25b8 child(<code>slug</code>): <code>Leaf</code></p>"},{"location":"api/solid/classes/Container/#parameters_3","title":"Parameters","text":"Name Type <code>slug</code> <code>LeafUri</code>"},{"location":"api/solid/classes/Container/#returns_4","title":"Returns","text":"<p><code>Leaf</code></p>"},{"location":"api/solid/classes/Container/#defined-in_15","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:332</p> <p>\u25b8 child(<code>slug</code>): <code>Leaf</code> | <code>Container</code></p>"},{"location":"api/solid/classes/Container/#parameters_4","title":"Parameters","text":"Name Type <code>slug</code> <code>string</code>"},{"location":"api/solid/classes/Container/#returns_5","title":"Returns","text":"<p><code>Leaf</code> | <code>Container</code></p>"},{"location":"api/solid/classes/Container/#defined-in_16","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:333</p>"},{"location":"api/solid/classes/Container/#children","title":"children","text":"<p>\u25b8 children(): (<code>Leaf</code> | <code>Container</code>)[]</p> <p>Lists the currently cached children of this container (no request is made)</p>"},{"location":"api/solid/classes/Container/#returns_6","title":"Returns","text":"<p>(<code>Leaf</code> | <code>Container</code>)[]</p> <p>An array of children</p> <pre><code>const result = await container.read();\nif (!result.isError) {\n  const children = container.children();\n  children.forEach((child) =&gt; {\n    console.log(child.uri);\n  });\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#defined-in_17","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:302</p>"},{"location":"api/solid/classes/Container/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>AggregateSuccess</code>\\&lt;<code>ResourceSuccess</code>\\&lt;<code>DeleteSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt; | <code>AggregateError</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code>&gt;, <code>Container</code>&gt;&gt;</p> <p>Deletes all contents in this container</p>"},{"location":"api/solid/classes/Container/#returns_7","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>AggregateSuccess</code>\\&lt;<code>ResourceSuccess</code>\\&lt;<code>DeleteSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt; | <code>AggregateError</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code>&gt;, <code>Container</code>&gt;&gt;</p> <p>An AggregateSuccess or Aggregate error corresponding with all the deleted resources</p> <p><code>Example</code></p> <pre><code>const result = container.clear();\nif (!result.isError) {\n  console.log(\"All deleted resources:\");\n  result.results.forEach((result) =&gt; console.log(result.uri));\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#defined-in_18","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:500</p>"},{"location":"api/solid/classes/Container/#createandoverwrite","title":"createAndOverwrite","text":"<p>\u25b8 createAndOverwrite(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ContainerCreateAndOverwriteResult</code>, <code>Container</code>&gt;&gt;</p> <p>Creates a container at this URI and overwrites any that already exists</p>"},{"location":"api/solid/classes/Container/#returns_8","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ContainerCreateAndOverwriteResult</code>, <code>Container</code>&gt;&gt;</p> <p>ContainerCreateAndOverwriteResult</p> <p><code>Example</code></p> <pre><code>const result = await container.createAndOverwrite();\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#overrides_5","title":"Overrides","text":"<p>Resource.createAndOverwrite</p>"},{"location":"api/solid/classes/Container/#defined-in_19","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:570</p>"},{"location":"api/solid/classes/Container/#createchildandoverwrite","title":"createChildAndOverwrite","text":"<p>\u25b8 createChildAndOverwrite(<code>slug</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ContainerCreateAndOverwriteResult</code>, <code>Container</code>&gt;&gt;</p> <p>Creates a resource and overwrites any existing resource that existed at the URI</p>"},{"location":"api/solid/classes/Container/#parameters_5","title":"Parameters","text":"Name Type Description <code>slug</code> <code>ContainerUri</code> the name of the resource"},{"location":"api/solid/classes/Container/#returns_9","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ContainerCreateAndOverwriteResult</code>, <code>Container</code>&gt;&gt;</p> <p>the result of creating that resource</p> <p><code>Example</code></p> <pre><code>const container = solidLdoDataset\n  .getResource(\"https://example.com/container/\");\ncosnt result = await container.createChildAndOverwrite(\"resource.ttl\");\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#defined-in_20","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:361</p> <p>\u25b8 createChildAndOverwrite(<code>slug</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>, <code>Leaf</code>&gt;&gt;</p>"},{"location":"api/solid/classes/Container/#parameters_6","title":"Parameters","text":"Name Type <code>slug</code> <code>LeafUri</code>"},{"location":"api/solid/classes/Container/#returns_10","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>, <code>Leaf</code>&gt;&gt;</p>"},{"location":"api/solid/classes/Container/#defined-in_21","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:364</p> <p>\u25b8 createChildAndOverwrite(<code>slug</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p>"},{"location":"api/solid/classes/Container/#parameters_7","title":"Parameters","text":"Name Type <code>slug</code> <code>string</code>"},{"location":"api/solid/classes/Container/#returns_11","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p>"},{"location":"api/solid/classes/Container/#defined-in_22","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:367</p>"},{"location":"api/solid/classes/Container/#createchildifabsent","title":"createChildIfAbsent","text":"<p>\u25b8 createChildIfAbsent(<code>slug</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ContainerCreateIfAbsentResult</code>, <code>Container</code>&gt;&gt;</p> <p>Creates a resource only if that resource doesn't already exist on the Solid Pod</p>"},{"location":"api/solid/classes/Container/#parameters_8","title":"Parameters","text":"Name Type Description <code>slug</code> <code>ContainerUri</code> the name of the resource"},{"location":"api/solid/classes/Container/#returns_12","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ContainerCreateIfAbsentResult</code>, <code>Container</code>&gt;&gt;</p> <p>the result of creating that resource</p> <p><code>Example</code></p> <pre><code>const container = solidLdoDataset\n  .getResource(\"https://example.com/container/\");\ncosnt result = await container.createChildIfAbsent(\"resource.ttl\");\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#defined-in_23","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:403</p> <p>\u25b8 createChildIfAbsent(<code>slug</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateIfAbsentResult</code>, <code>Leaf</code>&gt;&gt;</p>"},{"location":"api/solid/classes/Container/#parameters_9","title":"Parameters","text":"Name Type <code>slug</code> <code>LeafUri</code>"},{"location":"api/solid/classes/Container/#returns_13","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateIfAbsentResult</code>, <code>Leaf</code>&gt;&gt;</p>"},{"location":"api/solid/classes/Container/#defined-in_24","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:406</p> <p>\u25b8 createChildIfAbsent(<code>slug</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p>"},{"location":"api/solid/classes/Container/#parameters_10","title":"Parameters","text":"Name Type <code>slug</code> <code>string</code>"},{"location":"api/solid/classes/Container/#returns_14","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p>"},{"location":"api/solid/classes/Container/#defined-in_25","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:409</p>"},{"location":"api/solid/classes/Container/#createifabsent","title":"createIfAbsent","text":"<p>\u25b8 createIfAbsent(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ContainerCreateIfAbsentResult</code>, <code>Container</code>&gt;&gt;</p> <p>Creates a container at this URI if the container doesn't already exist</p>"},{"location":"api/solid/classes/Container/#returns_15","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ContainerCreateIfAbsentResult</code>, <code>Container</code>&gt;&gt;</p> <p>ContainerCreateIfAbsentResult</p> <p><code>Example</code></p> <pre><code>const result = await container.createIfAbsent();\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#overrides_6","title":"Overrides","text":"<p>Resource.createIfAbsent</p>"},{"location":"api/solid/classes/Container/#defined-in_26","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:591</p>"},{"location":"api/solid/classes/Container/#delete","title":"delete","text":"<p>\u25b8 delete(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>DeleteResult</code> | <code>AggregateError</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code>&gt;, <code>Container</code>&gt;&gt;</p> <p>Deletes this container and all its contents</p>"},{"location":"api/solid/classes/Container/#returns_16","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>DeleteResult</code> | <code>AggregateError</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code>&gt;, <code>Container</code>&gt;&gt;</p> <p>A Delete result for this container</p> <pre><code>const result = await container.delete();\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#defined-in_27","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:545</p>"},{"location":"api/solid/classes/Container/#emit","title":"emit","text":"<p>\u25b8 emit\\&lt;<code>E</code>&gt;(<code>event</code>, <code>...args</code>): <code>boolean</code></p>"},{"location":"api/solid/classes/Container/#type-parameters_1","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_11","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>...args</code> <code>Parameters</code>\\&lt;{ <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]&gt;"},{"location":"api/solid/classes/Container/#returns_17","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_6","title":"Inherited from","text":"<p>Resource.emit</p>"},{"location":"api/solid/classes/Container/#defined-in_28","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:32</p>"},{"location":"api/solid/classes/Container/#emitthisandparent","title":"emitThisAndParent","text":"<p>\u25b8 emitThisAndParent(): <code>void</code></p> <p>Emits an update event for both this resource and the parent</p>"},{"location":"api/solid/classes/Container/#returns_18","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_7","title":"Inherited from","text":"<p>Resource.emitThisAndParent</p>"},{"location":"api/solid/classes/Container/#defined-in_29","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:313</p>"},{"location":"api/solid/classes/Container/#eventnames","title":"eventNames","text":"<p>\u25b8 eventNames(): (<code>string</code> | <code>symbol</code>)[]</p>"},{"location":"api/solid/classes/Container/#returns_19","title":"Returns","text":"<p>(<code>string</code> | <code>symbol</code>)[]</p>"},{"location":"api/solid/classes/Container/#inherited-from_8","title":"Inherited from","text":"<p>Resource.eventNames</p>"},{"location":"api/solid/classes/Container/#defined-in_30","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:34</p>"},{"location":"api/solid/classes/Container/#getmaxlisteners","title":"getMaxListeners","text":"<p>\u25b8 getMaxListeners(): <code>number</code></p>"},{"location":"api/solid/classes/Container/#returns_20","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_9","title":"Inherited from","text":"<p>Resource.getMaxListeners</p>"},{"location":"api/solid/classes/Container/#defined-in_31","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:39</p>"},{"location":"api/solid/classes/Container/#getparentcontainer","title":"getParentContainer","text":"<p>\u25b8 getParentContainer(): <code>Promise</code>\\&lt;<code>undefined</code> | <code>CheckRootResultError</code> | <code>Container</code>&gt;</p> <p>Gets the parent container for this container by making a request</p>"},{"location":"api/solid/classes/Container/#returns_21","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>undefined</code> | <code>CheckRootResultError</code> | <code>Container</code>&gt;</p> <p>The parent container or undefined if there is no parent container because this container is the root container</p> <p><code>Example</code></p> <p>Suppose the root container is at <code>https://example.com/</code></p> <pre><code>const root = solidLdoDataset.getResource(\"https://example.com/\");\nconst container = solidLdoDataset\n  .getResource(\"https://example.com/container\");\nconst rootParent = await root.getParentContainer();\nconsole.log(rootParent); // Logs \"undefined\"\nconst containerParent = await container.getParentContainer();\nif (!containerParent.isError) {\n  // Logs \"https://example.com/\"\n  console.log(containerParent.uri);\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#overrides_7","title":"Overrides","text":"<p>Resource.getParentContainer</p>"},{"location":"api/solid/classes/Container/#defined-in_32","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:270</p>"},{"location":"api/solid/classes/Container/#getrootcontainer","title":"getRootContainer","text":"<p>\u25b8 getRootContainer(): <code>Promise</code>\\&lt;<code>CheckRootResultError</code> | <code>Container</code>&gt;</p> <p>Gets the root container of this container. If this container is the root container, this function returns itself.</p>"},{"location":"api/solid/classes/Container/#returns_22","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>CheckRootResultError</code> | <code>Container</code>&gt;</p> <p>The root container for this container</p> <p><code>Example</code></p> <p>Suppose the root container is at <code>https://example.com/</code></p> <pre><code>const container = ldoSolidDataset\n  .getResource(\"https://example.com/container/\");\nconst rootContainer = await container.getRootContainer();\nif (!rootContainer.isError) {\n  // logs \"https://example.com/\"\n  console.log(rootContainer.uri);\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#overrides_8","title":"Overrides","text":"<p>Resource.getRootContainer</p>"},{"location":"api/solid/classes/Container/#defined-in_33","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:240</p>"},{"location":"api/solid/classes/Container/#getwac","title":"getWac","text":"<p>\u25b8 getWac(<code>options?</code>): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>GetWacRuleSuccess</code> | <code>WacRuleAbsent</code>&gt;</p> <p>Retrieves web access control (WAC) rules for this resource</p>"},{"location":"api/solid/classes/Container/#parameters_12","title":"Parameters","text":"Name Type Description <code>options?</code> <code>Object</code> set the \"ignoreCache\" field to true to ignore any cached information on WAC rules. <code>options.ignoreCache</code> <code>boolean</code> -"},{"location":"api/solid/classes/Container/#returns_23","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>GetWacRuleSuccess</code> | <code>WacRuleAbsent</code>&gt;</p> <p>WAC Rules results</p> <p><code>Example</code></p> <pre><code>const resource = ldoSolidDataset\n  .getResource(\"https://example.com/container/resource.ttl\");\nconst wacRulesResult = await resource.getWac();\nif (!wacRulesResult.isError) {\n  const wacRules = wacRulesResult.wacRule;\n  // True if the resource is publicly readable\n  console.log(wacRules.public.read);\n  // True if authenticated agents can write to the resource\n  console.log(wacRules.authenticated.write);\n  // True if the given WebId has append access\n  console.log(\n    wacRules.agent[https://example.com/person1/profile/card#me].append\n  );\n  // True if the given WebId has control access\n  console.log(\n    wacRules.agent[https://example.com/person1/profile/card#me].control\n  );\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_10","title":"Inherited from","text":"<p>Resource.getWac</p>"},{"location":"api/solid/classes/Container/#defined-in_34","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:596</p>"},{"location":"api/solid/classes/Container/#getwacuri","title":"getWacUri","text":"<p>\u25b8 getWacUri(<code>options?</code>): <code>Promise</code>\\&lt;<code>GetWacUriResult</code>&gt;</p> <p>Retrieves the URI for the web access control (WAC) rules for this resource</p>"},{"location":"api/solid/classes/Container/#parameters_13","title":"Parameters","text":"Name Type Description <code>options?</code> <code>Object</code> set the \"ignoreCache\" field to true to ignore any cached information on WAC rules. <code>options.ignoreCache</code> <code>boolean</code> -"},{"location":"api/solid/classes/Container/#returns_24","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>GetWacUriResult</code>&gt;</p> <p>WAC Rules results</p>"},{"location":"api/solid/classes/Container/#inherited-from_11","title":"Inherited from","text":"<p>Resource.getWacUri</p>"},{"location":"api/solid/classes/Container/#defined-in_35","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:545</p>"},{"location":"api/solid/classes/Container/#handlecreateandoverwrite","title":"handleCreateAndOverwrite","text":"<p>\u25b8 handleCreateAndOverwrite(): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code>&gt;</p> <p>Helper method that handles the core functions for creating and overwriting a resource</p>"},{"location":"api/solid/classes/Container/#returns_25","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code>&gt;</p> <p>DeleteResult</p>"},{"location":"api/solid/classes/Container/#inherited-from_12","title":"Inherited from","text":"<p>Resource.handleCreateAndOverwrite</p>"},{"location":"api/solid/classes/Container/#defined-in_36","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:457</p>"},{"location":"api/solid/classes/Container/#handlecreateifabsent","title":"handleCreateIfAbsent","text":"<p>\u25b8 handleCreateIfAbsent(): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code>&gt;</p> <p>Helper method that handles the core functions for creating a resource if  absent</p>"},{"location":"api/solid/classes/Container/#returns_26","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code>&gt;</p> <p>DeleteResult</p>"},{"location":"api/solid/classes/Container/#inherited-from_13","title":"Inherited from","text":"<p>Resource.handleCreateIfAbsent</p>"},{"location":"api/solid/classes/Container/#defined-in_37","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:493</p>"},{"location":"api/solid/classes/Container/#handledelete","title":"handleDelete","text":"<p>\u25b8 handleDelete(): <code>Promise</code>\\&lt;<code>DeleteResult</code>&gt;</p> <p>Helper method that handles the core functions for deleting a resource</p>"},{"location":"api/solid/classes/Container/#returns_27","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>DeleteResult</code>&gt;</p> <p>DeleteResult</p>"},{"location":"api/solid/classes/Container/#inherited-from_14","title":"Inherited from","text":"<p>Resource.handleDelete</p>"},{"location":"api/solid/classes/Container/#defined-in_38","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:405</p>"},{"location":"api/solid/classes/Container/#handleread","title":"handleRead","text":"<p>\u25b8 handleRead(): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>&gt;</p> <p>A helper method that handles the core functions for reading</p>"},{"location":"api/solid/classes/Container/#returns_28","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>&gt;</p> <p>ReadResult</p>"},{"location":"api/solid/classes/Container/#inherited-from_15","title":"Inherited from","text":"<p>Resource.handleRead</p>"},{"location":"api/solid/classes/Container/#defined-in_39","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:343</p>"},{"location":"api/solid/classes/Container/#isabsent","title":"isAbsent","text":"<p>\u25b8 isAbsent(): <code>undefined</code> | <code>boolean</code></p> <p>Is this resource currently absent (it does not exist)</p>"},{"location":"api/solid/classes/Container/#returns_29","title":"Returns","text":"<p><code>undefined</code> | <code>boolean</code></p> <p>true if the resource is absent, false if not, undefined if unknown</p> <p><code>Example</code></p> <pre><code>// Logs \"undefined\"\nconsole.log(resource.isAbsent());\nconst result = resource.read();\nif (!result.isError) {\n  // False if the resource exists, true if it does not\n  console.log(resource.isAbsent());\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_16","title":"Inherited from","text":"<p>Resource.isAbsent</p>"},{"location":"api/solid/classes/Container/#defined-in_40","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:280</p>"},{"location":"api/solid/classes/Container/#iscreating","title":"isCreating","text":"<p>\u25b8 isCreating(): <code>boolean</code></p> <p>Checks to see if this resource is being created</p>"},{"location":"api/solid/classes/Container/#returns_30","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being created</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isCreating())\n});\n// Logs \"true\"\nconsole.log(resource.isCreating());\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_17","title":"Inherited from","text":"<p>Resource.isCreating</p>"},{"location":"api/solid/classes/Container/#defined-in_41","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:144</p>"},{"location":"api/solid/classes/Container/#isdeleting","title":"isDeleting","text":"<p>\u25b8 isDeleting(): <code>boolean</code></p> <p>Checks to see if this resource is being deleted</p>"},{"location":"api/solid/classes/Container/#returns_31","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being deleted</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isDeleting())\n});\n// Logs \"true\"\nconsole.log(resource.isDeleting());\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_18","title":"Inherited from","text":"<p>Resource.isDeleting</p>"},{"location":"api/solid/classes/Container/#defined-in_42","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:180</p>"},{"location":"api/solid/classes/Container/#isdoinginitialfetch","title":"isDoingInitialFetch","text":"<p>\u25b8 isDoingInitialFetch(): <code>boolean</code></p> <p>Checks to see if this resource is being read for the first time</p>"},{"location":"api/solid/classes/Container/#returns_32","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being read for the first time</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isDoingInitialFetch())\n});\n// Logs \"true\"\nconsole.log(resource.isDoingInitialFetch());\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_19","title":"Inherited from","text":"<p>Resource.isDoingInitialFetch</p>"},{"location":"api/solid/classes/Container/#defined-in_43","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:198</p>"},{"location":"api/solid/classes/Container/#isfetched","title":"isFetched","text":"<p>\u25b8 isFetched(): <code>boolean</code></p> <p>Check to see if this resource has been fetched</p>"},{"location":"api/solid/classes/Container/#returns_33","title":"Returns","text":"<p><code>boolean</code></p> <p>true if this resource has been fetched before</p> <p><code>Example</code></p> <pre><code>// Logs \"false\"\nconsole.log(resource.isFetched());\nconst result = await resource.read();\nif (!result.isError) {\n  // Logs \"true\"\n  console.log(resource.isFetched());\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_20","title":"Inherited from","text":"<p>Resource.isFetched</p>"},{"location":"api/solid/classes/Container/#defined-in_44","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:242</p>"},{"location":"api/solid/classes/Container/#isloading","title":"isLoading","text":"<p>\u25b8 isLoading(): <code>boolean</code></p> <p>Checks to see if this resource is loading in any way</p>"},{"location":"api/solid/classes/Container/#returns_34","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently loading</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isLoading())\n});\n// Logs \"true\"\nconsole.log(resource.isLoading());\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_21","title":"Inherited from","text":"<p>Resource.isLoading</p>"},{"location":"api/solid/classes/Container/#defined-in_45","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:126</p>"},{"location":"api/solid/classes/Container/#ispresent","title":"isPresent","text":"<p>\u25b8 isPresent(): <code>undefined</code> | <code>boolean</code></p> <p>Is this resource currently present on the Pod</p>"},{"location":"api/solid/classes/Container/#returns_35","title":"Returns","text":"<p><code>undefined</code> | <code>boolean</code></p> <p>false if the resource is absent, true if not, undefined if unknown</p> <p><code>Example</code></p> <pre><code>// Logs \"undefined\"\nconsole.log(resource.isPresent());\nconst result = resource.read();\nif (!result.isError) {\n  // True if the resource exists, false if it does not\n  console.log(resource.isPresent());\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_22","title":"Inherited from","text":"<p>Resource.isPresent</p>"},{"location":"api/solid/classes/Container/#defined-in_46","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:299</p>"},{"location":"api/solid/classes/Container/#isreading","title":"isReading","text":"<p>\u25b8 isReading(): <code>boolean</code></p> <p>Checks to see if this resource is being read</p>"},{"location":"api/solid/classes/Container/#returns_36","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being read</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isReading())\n});\n// Logs \"true\"\nconsole.log(resource.isReading());\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_23","title":"Inherited from","text":"<p>Resource.isReading</p>"},{"location":"api/solid/classes/Container/#defined-in_47","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:162</p>"},{"location":"api/solid/classes/Container/#isreloading","title":"isReloading","text":"<p>\u25b8 isReloading(): <code>boolean</code></p> <p>Checks to see if this resource is being read for a subsequent time</p>"},{"location":"api/solid/classes/Container/#returns_37","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being read for a subsequent time</p> <p><code>Example</code></p> <pre><code>await resource.read();\nresource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isCreating())\n});\n// Logs \"true\"\nconsole.log(resource.isCreating());\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_24","title":"Inherited from","text":"<p>Resource.isReloading</p>"},{"location":"api/solid/classes/Container/#defined-in_48","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:217</p>"},{"location":"api/solid/classes/Container/#isrootcontainer","title":"isRootContainer","text":"<p>\u25b8 isRootContainer(): <code>undefined</code> | <code>boolean</code></p> <p>Checks if this container is a root container</p>"},{"location":"api/solid/classes/Container/#returns_38","title":"Returns","text":"<p><code>undefined</code> | <code>boolean</code></p> <p>true if this container is a root container, false if not, and undefined if this is unknown at the moment.</p> <p><code>Example</code></p> <pre><code>// Returns \"undefined\" when the container is unfetched\nconsole.log(container.isRootContainer());\nconst result = await container.read();\nif (!result.isError) {\n  // Returns true or false\n  console.log(container.isRootContainer());\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#defined-in_49","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:110</p>"},{"location":"api/solid/classes/Container/#isunfetched","title":"isUnfetched","text":"<p>\u25b8 isUnfetched(): <code>boolean</code></p> <p>Check to see if this resource is currently unfetched</p>"},{"location":"api/solid/classes/Container/#returns_39","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently unfetched</p> <p><code>Example</code></p> <pre><code>// Logs \"true\"\nconsole.log(resource.isUnetched());\nconst result = await resource.read();\nif (!result.isError) {\n  // Logs \"false\"\n  console.log(resource.isUnfetched());\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_25","title":"Inherited from","text":"<p>Resource.isUnfetched</p>"},{"location":"api/solid/classes/Container/#defined-in_50","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:261</p>"},{"location":"api/solid/classes/Container/#listenercount","title":"listenerCount","text":"<p>\u25b8 listenerCount\\&lt;<code>E</code>&gt;(<code>event</code>): <code>number</code></p>"},{"location":"api/solid/classes/Container/#type-parameters_2","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_14","title":"Parameters","text":"Name Type <code>event</code> <code>E</code>"},{"location":"api/solid/classes/Container/#returns_40","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_26","title":"Inherited from","text":"<p>Resource.listenerCount</p>"},{"location":"api/solid/classes/Container/#defined-in_51","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:37</p>"},{"location":"api/solid/classes/Container/#listeners","title":"listeners","text":"<p>\u25b8 listeners\\&lt;<code>E</code>&gt;(<code>event</code>): { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Container/#type-parameters_3","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_15","title":"Parameters","text":"Name Type <code>event</code> <code>E</code>"},{"location":"api/solid/classes/Container/#returns_41","title":"Returns","text":"<p>{ <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Container/#inherited-from_27","title":"Inherited from","text":"<p>Resource.listeners</p>"},{"location":"api/solid/classes/Container/#defined-in_52","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:36</p>"},{"location":"api/solid/classes/Container/#off","title":"off","text":"<p>\u25b8 off\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Container/#type-parameters_4","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_16","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Container/#returns_42","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_28","title":"Inherited from","text":"<p>Resource.off</p>"},{"location":"api/solid/classes/Container/#defined-in_53","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:28</p>"},{"location":"api/solid/classes/Container/#on","title":"on","text":"<p>\u25b8 on\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Container/#type-parameters_5","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_17","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Container/#returns_43","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_29","title":"Inherited from","text":"<p>Resource.on</p>"},{"location":"api/solid/classes/Container/#defined-in_54","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:23</p>"},{"location":"api/solid/classes/Container/#once","title":"once","text":"<p>\u25b8 once\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Container/#type-parameters_6","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_18","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Container/#returns_44","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_30","title":"Inherited from","text":"<p>Resource.once</p>"},{"location":"api/solid/classes/Container/#defined-in_55","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:24</p>"},{"location":"api/solid/classes/Container/#prependlistener","title":"prependListener","text":"<p>\u25b8 prependListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Container/#type-parameters_7","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_19","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Container/#returns_45","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_31","title":"Inherited from","text":"<p>Resource.prependListener</p>"},{"location":"api/solid/classes/Container/#defined-in_56","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:25</p>"},{"location":"api/solid/classes/Container/#prependoncelistener","title":"prependOnceListener","text":"<p>\u25b8 prependOnceListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Container/#type-parameters_8","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_20","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Container/#returns_46","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_32","title":"Inherited from","text":"<p>Resource.prependOnceListener</p>"},{"location":"api/solid/classes/Container/#defined-in_57","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:26</p>"},{"location":"api/solid/classes/Container/#rawlisteners","title":"rawListeners","text":"<p>\u25b8 rawListeners\\&lt;<code>E</code>&gt;(<code>event</code>): { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Container/#type-parameters_9","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_21","title":"Parameters","text":"Name Type <code>event</code> <code>E</code>"},{"location":"api/solid/classes/Container/#returns_47","title":"Returns","text":"<p>{ <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Container/#inherited-from_33","title":"Inherited from","text":"<p>Resource.rawListeners</p>"},{"location":"api/solid/classes/Container/#defined-in_58","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:35</p>"},{"location":"api/solid/classes/Container/#read","title":"read","text":"<p>\u25b8 read(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ReadContainerResult</code>, <code>Container</code>&gt;&gt;</p> <p>Reads the container</p>"},{"location":"api/solid/classes/Container/#returns_48","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ReadContainerResult</code>, <code>Container</code>&gt;&gt;</p> <p>A read result</p> <p><code>Example</code></p> <pre><code>const result = await container.read();\nif (result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#overrides_9","title":"Overrides","text":"<p>Resource.read</p>"},{"location":"api/solid/classes/Container/#defined-in_59","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:146</p>"},{"location":"api/solid/classes/Container/#readifunfetched","title":"readIfUnfetched","text":"<p>\u25b8 readIfUnfetched(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ReadContainerResult</code>, <code>Container</code>&gt;&gt;</p> <p>Makes a request to read this container if it hasn't been fetched yet. If it has, return the cached informtation</p>"},{"location":"api/solid/classes/Container/#returns_49","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ReadContainerResult</code>, <code>Container</code>&gt;&gt;</p> <p>a ReadContainerResult</p> <p><code>Example</code></p> <pre><code>const result = await container.read();\nif (!result.isError) {\n  // Will execute without making a request\n  const result2 = await container.readIfUnfetched();\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#overrides_10","title":"Overrides","text":"<p>Resource.readIfUnfetched</p>"},{"location":"api/solid/classes/Container/#defined-in_60","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:192</p>"},{"location":"api/solid/classes/Container/#removealllisteners","title":"removeAllListeners","text":"<p>\u25b8 removeAllListeners\\&lt;<code>E</code>&gt;(<code>event?</code>): <code>this</code></p>"},{"location":"api/solid/classes/Container/#type-parameters_10","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_22","title":"Parameters","text":"Name Type <code>event?</code> <code>E</code>"},{"location":"api/solid/classes/Container/#returns_50","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_34","title":"Inherited from","text":"<p>Resource.removeAllListeners</p>"},{"location":"api/solid/classes/Container/#defined-in_61","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:29</p>"},{"location":"api/solid/classes/Container/#removelistener","title":"removeListener","text":"<p>\u25b8 removeListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Container/#type-parameters_11","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Container/#parameters_23","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Container/#returns_51","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_35","title":"Inherited from","text":"<p>Resource.removeListener</p>"},{"location":"api/solid/classes/Container/#defined-in_62","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:30</p>"},{"location":"api/solid/classes/Container/#setmaxlisteners","title":"setMaxListeners","text":"<p>\u25b8 setMaxListeners(<code>maxListeners</code>): <code>this</code></p>"},{"location":"api/solid/classes/Container/#parameters_24","title":"Parameters","text":"Name Type <code>maxListeners</code> <code>number</code>"},{"location":"api/solid/classes/Container/#returns_52","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_36","title":"Inherited from","text":"<p>Resource.setMaxListeners</p>"},{"location":"api/solid/classes/Container/#defined-in_63","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:40</p>"},{"location":"api/solid/classes/Container/#setwac","title":"setWac","text":"<p>\u25b8 setWac(<code>wacRule</code>): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>SetWacRuleSuccess</code>&gt;</p> <p>Sets access rules for a specific resource</p>"},{"location":"api/solid/classes/Container/#parameters_25","title":"Parameters","text":"Name Type Description <code>wacRule</code> <code>WacRule</code> the access rules to set"},{"location":"api/solid/classes/Container/#returns_53","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>SetWacRuleSuccess</code>&gt;</p> <p>SetWacRuleResult</p> <p><code>Example</code></p> <pre><code>const resource = ldoSolidDataset\n  .getResource(\"https://example.com/container/resource.ttl\");\nconst wacRulesResult = await resource.setWac({\n  public: {\n    read: true,\n    write: false,\n    append: false,\n    control: false\n  },\n  authenticated: {\n    read: true,\n    write: false,\n    append: true,\n    control: false\n  },\n  agent: {\n    \"https://example.com/person1/profile/card#me\": {\n      read: true,\n      write: true,\n      append: true,\n      control: true\n    }\n  }\n});\n</code></pre>"},{"location":"api/solid/classes/Container/#inherited-from_37","title":"Inherited from","text":"<p>Resource.setWac</p>"},{"location":"api/solid/classes/Container/#defined-in_64","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:669</p>"},{"location":"api/solid/classes/Container/#toreadresult","title":"toReadResult","text":"<p>\u25b8 toReadResult(): <code>ResourceResult</code>\\&lt;<code>ReadContainerResult</code>, <code>Container</code>&gt;</p> <p>Converts the current state of this container to a readResult</p>"},{"location":"api/solid/classes/Container/#returns_54","title":"Returns","text":"<p><code>ResourceResult</code>\\&lt;<code>ReadContainerResult</code>, <code>Container</code>&gt;</p> <p>a ReadContainerResult</p>"},{"location":"api/solid/classes/Container/#overrides_11","title":"Overrides","text":"<p>Resource.toReadResult</p>"},{"location":"api/solid/classes/Container/#defined-in_65","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:157</p>"},{"location":"api/solid/classes/Container/#updatewithcreatesuccess","title":"updateWithCreateSuccess","text":"<p>\u25b8 updateWithCreateSuccess(<code>result</code>): <code>void</code></p> <p>A helper method updates this resource's internal state upon create success</p>"},{"location":"api/solid/classes/Container/#parameters_26","title":"Parameters","text":"Name Type <code>result</code> <code>ResourceSuccess</code>"},{"location":"api/solid/classes/Container/#returns_55","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_38","title":"Inherited from","text":"<p>Resource.updateWithCreateSuccess</p>"},{"location":"api/solid/classes/Container/#defined-in_66","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:424</p>"},{"location":"api/solid/classes/Container/#updatewithdeletesuccess","title":"updateWithDeleteSuccess","text":"<p>\u25b8 updateWithDeleteSuccess(<code>_result</code>): <code>void</code></p> <p>A helper method updates this resource's internal state upon delete success</p>"},{"location":"api/solid/classes/Container/#parameters_27","title":"Parameters","text":"Name Type <code>_result</code> <code>DeleteSuccess</code>"},{"location":"api/solid/classes/Container/#returns_56","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Container/#inherited-from_39","title":"Inherited from","text":"<p>Resource.updateWithDeleteSuccess</p>"},{"location":"api/solid/classes/Container/#defined-in_67","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:395</p>"},{"location":"api/solid/classes/Container/#updatewithreadsuccess","title":"updateWithReadSuccess","text":"<p>\u25b8 updateWithReadSuccess(<code>result</code>): <code>void</code></p> <p>A helper method updates this container's internal state upon read success</p>"},{"location":"api/solid/classes/Container/#parameters_28","title":"Parameters","text":"Name Type Description <code>result</code> <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code> the result of the read success"},{"location":"api/solid/classes/Container/#returns_57","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Container/#overrides_12","title":"Overrides","text":"<p>Resource.updateWithReadSuccess</p>"},{"location":"api/solid/classes/Container/#defined-in_68","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:125</p>"},{"location":"api/solid/classes/Container/#uploadchildandoverwrite","title":"uploadChildAndOverwrite","text":"<p>\u25b8 uploadChildAndOverwrite(<code>slug</code>, <code>blob</code>, <code>mimeType</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>Creates a new binary resource and overwrites any existing resource that existed at the URI</p>"},{"location":"api/solid/classes/Container/#parameters_29","title":"Parameters","text":"Name Type Description <code>slug</code> <code>LeafUri</code> the name of the resource <code>blob</code> <code>Blob</code> - <code>mimeType</code> <code>string</code> -"},{"location":"api/solid/classes/Container/#returns_58","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>the result of creating that resource</p> <p><code>Example</code></p> <pre><code>const container = solidLdoDataset\n  .getResource(\"https://example.com/container/\");\ncosnt result = await container.uploadChildAndOverwrite(\n  \"resource.txt\",\n  new Blob(\"some text.\"),\n  \"text/txt\",\n);\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#defined-in_69","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:449</p>"},{"location":"api/solid/classes/Container/#uploadchildifabsent","title":"uploadChildIfAbsent","text":"<p>\u25b8 uploadChildIfAbsent(<code>slug</code>, <code>blob</code>, <code>mimeType</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateIfAbsentResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>Creates a new binary resource and overwrites any existing resource that existed at the URI</p>"},{"location":"api/solid/classes/Container/#parameters_30","title":"Parameters","text":"Name Type Description <code>slug</code> <code>LeafUri</code> the name of the resource <code>blob</code> <code>Blob</code> - <code>mimeType</code> <code>string</code> -"},{"location":"api/solid/classes/Container/#returns_59","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateIfAbsentResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>the result of creating that resource</p> <p><code>Example</code></p> <pre><code>const container = solidLdoDataset\n  .getResource(\"https://example.com/container/\");\ncosnt result = await container.uploadChildIfAbsent(\n  \"resource.txt\",\n  new Blob(\"some text.\"),\n  \"text/txt\",\n);\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Container/#defined-in_70","title":"Defined in","text":"<p>packages/solid/src/resource/Container.ts:478</p>"},{"location":"api/solid/classes/Leaf/","title":"Class: Leaf","text":"<p>Represents the current status of a specific Leaf on a Pod as known by LDO.</p> <p><code>Example</code></p> <pre><code>const leaf = solidLdoDataset\n  .getResource(\"https://example.com/container/resource.ttl\");\n</code></pre>"},{"location":"api/solid/classes/Leaf/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Resource</code></li> </ul> <p>\u21b3 <code>Leaf</code></p>"},{"location":"api/solid/classes/Leaf/#constructors","title":"Constructors","text":""},{"location":"api/solid/classes/Leaf/#constructor","title":"constructor","text":"<p>\u2022 new Leaf(<code>uri</code>, <code>context</code>): <code>Leaf</code></p>"},{"location":"api/solid/classes/Leaf/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>LeafUri</code> The uri of the leaf <code>context</code> <code>SolidLdoDatasetContext</code> SolidLdoDatasetContext for the parent dataset"},{"location":"api/solid/classes/Leaf/#returns","title":"Returns","text":"<p><code>Leaf</code></p>"},{"location":"api/solid/classes/Leaf/#overrides","title":"Overrides","text":"<p>Resource.constructor</p>"},{"location":"api/solid/classes/Leaf/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:78</p>"},{"location":"api/solid/classes/Leaf/#properties","title":"Properties","text":""},{"location":"api/solid/classes/Leaf/#absent","title":"absent","text":"<p>\u2022 <code>Protected</code> absent: <code>undefined</code> | <code>boolean</code></p> <p>True if this resource has been fetched but does not exist</p>"},{"location":"api/solid/classes/Leaf/#inherited-from","title":"Inherited from","text":"<p>Resource.absent</p>"},{"location":"api/solid/classes/Leaf/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:84</p>"},{"location":"api/solid/classes/Leaf/#binarydata","title":"binaryData","text":"<p>\u2022 <code>Protected</code> binaryData: <code>undefined</code> | { <code>blob</code>: <code>Blob</code> ; <code>mimeType</code>: <code>string</code>  }</p> <p>The raw binary data if this leaf is a Binary resource</p>"},{"location":"api/solid/classes/Leaf/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:72</p>"},{"location":"api/solid/classes/Leaf/#context","title":"context","text":"<p>\u2022 <code>Protected</code> <code>Readonly</code> context: <code>SolidLdoDatasetContext</code></p> <p>The SolidLdoDatasetContext from the Parent Dataset</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_1","title":"Inherited from","text":"<p>Resource.context</p>"},{"location":"api/solid/classes/Leaf/#defined-in_3","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:51</p>"},{"location":"api/solid/classes/Leaf/#didinitialfetch","title":"didInitialFetch","text":"<p>\u2022 <code>Protected</code> didInitialFetch: <code>boolean</code> = <code>false</code></p> <p>True if this resource has been fetched at least once</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_2","title":"Inherited from","text":"<p>Resource.didInitialFetch</p>"},{"location":"api/solid/classes/Leaf/#defined-in_4","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:78</p>"},{"location":"api/solid/classes/Leaf/#iserror","title":"isError","text":"<p>\u2022 <code>Readonly</code> isError: <code>false</code></p> <p>Indicates that this resource is not an error</p>"},{"location":"api/solid/classes/Leaf/#defined-in_5","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:56</p>"},{"location":"api/solid/classes/Leaf/#requester","title":"requester","text":"<p>\u2022 <code>Protected</code> requester: <code>LeafBatchedRequester</code></p> <p>Batched Requester for the Leaf</p>"},{"location":"api/solid/classes/Leaf/#overrides_1","title":"Overrides","text":"<p>Resource.requester</p>"},{"location":"api/solid/classes/Leaf/#defined-in_6","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:46</p>"},{"location":"api/solid/classes/Leaf/#status","title":"status","text":"<p>\u2022 status: <code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>AbsentReadSuccess</code> | <code>DeleteSuccess</code> | <code>UpdateSuccess</code> | <code>Unfetched</code></p> <p>The status of the last request made for this leaf</p>"},{"location":"api/solid/classes/Leaf/#overrides_2","title":"Overrides","text":"<p>Resource.status</p>"},{"location":"api/solid/classes/Leaf/#defined-in_7","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:61</p>"},{"location":"api/solid/classes/Leaf/#type","title":"type","text":"<p>\u2022 <code>Readonly</code> type: <code>\"leaf\"</code></p> <p>Indicates that this resource is a leaf resource</p>"},{"location":"api/solid/classes/Leaf/#overrides_3","title":"Overrides","text":"<p>Resource.type</p>"},{"location":"api/solid/classes/Leaf/#defined-in_8","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:51</p>"},{"location":"api/solid/classes/Leaf/#uri","title":"uri","text":"<p>\u2022 <code>Readonly</code> uri: <code>LeafUri</code></p> <p>The URI of the leaf</p>"},{"location":"api/solid/classes/Leaf/#overrides_4","title":"Overrides","text":"<p>Resource.uri</p>"},{"location":"api/solid/classes/Leaf/#defined-in_9","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:40</p>"},{"location":"api/solid/classes/Leaf/#wacrule","title":"wacRule","text":"<p>\u2022 <code>Protected</code> <code>Optional</code> wacRule: <code>WacRule</code></p> <p>If a wac rule was fetched, it is cached here</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_3","title":"Inherited from","text":"<p>Resource.wacRule</p>"},{"location":"api/solid/classes/Leaf/#defined-in_10","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:96</p>"},{"location":"api/solid/classes/Leaf/#wacuri","title":"wacUri","text":"<p>\u2022 <code>Protected</code> <code>Optional</code> wacUri: <code>LeafUri</code></p> <p>If a wac uri is fetched, it is cached here</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_4","title":"Inherited from","text":"<p>Resource.wacUri</p>"},{"location":"api/solid/classes/Leaf/#defined-in_11","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:90</p>"},{"location":"api/solid/classes/Leaf/#methods","title":"Methods","text":""},{"location":"api/solid/classes/Leaf/#addlistener","title":"addListener","text":"<p>\u25b8 addListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Leaf/#type-parameters","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_1","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Leaf/#returns_1","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_5","title":"Inherited from","text":"<p>Resource.addListener</p>"},{"location":"api/solid/classes/Leaf/#defined-in_12","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:22</p>"},{"location":"api/solid/classes/Leaf/#createandoverwrite","title":"createAndOverwrite","text":"<p>\u25b8 createAndOverwrite(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>Creates a leaf at this URI and overwrites any that already exists</p>"},{"location":"api/solid/classes/Leaf/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>LeafCreateAndOverwriteResult</p> <p><code>Example</code></p> <pre><code>const result = await leaf.createAndOverwrite();\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#overrides_5","title":"Overrides","text":"<p>Resource.createAndOverwrite</p>"},{"location":"api/solid/classes/Leaf/#defined-in_13","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:402</p>"},{"location":"api/solid/classes/Leaf/#createifabsent","title":"createIfAbsent","text":"<p>\u25b8 createIfAbsent(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateIfAbsentResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>Creates a leaf at this URI if the leaf doesn't already exist</p>"},{"location":"api/solid/classes/Leaf/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateIfAbsentResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>LeafCreateIfAbsentResult</p> <p><code>Example</code></p> <pre><code>const result = await leaf.createIfAbsent();\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#overrides_6","title":"Overrides","text":"<p>Resource.createIfAbsent</p>"},{"location":"api/solid/classes/Leaf/#defined-in_14","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:423</p>"},{"location":"api/solid/classes/Leaf/#delete","title":"delete","text":"<p>\u25b8 delete(): <code>Promise</code>\\&lt;<code>DeleteResult</code>&gt;</p> <p>Deletes this leaf and all its contents</p>"},{"location":"api/solid/classes/Leaf/#returns_4","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>DeleteResult</code>&gt;</p> <p>A Delete result for this leaf</p> <pre><code>const result = await container.leaf();\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#defined-in_15","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:372</p>"},{"location":"api/solid/classes/Leaf/#emit","title":"emit","text":"<p>\u25b8 emit\\&lt;<code>E</code>&gt;(<code>event</code>, <code>...args</code>): <code>boolean</code></p>"},{"location":"api/solid/classes/Leaf/#type-parameters_1","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_2","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>...args</code> <code>Parameters</code>\\&lt;{ <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]&gt;"},{"location":"api/solid/classes/Leaf/#returns_5","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_6","title":"Inherited from","text":"<p>Resource.emit</p>"},{"location":"api/solid/classes/Leaf/#defined-in_16","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:32</p>"},{"location":"api/solid/classes/Leaf/#emitthisandparent","title":"emitThisAndParent","text":"<p>\u25b8 emitThisAndParent(): <code>void</code></p> <p>Emits an update event for both this resource and the parent</p>"},{"location":"api/solid/classes/Leaf/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_7","title":"Inherited from","text":"<p>Resource.emitThisAndParent</p>"},{"location":"api/solid/classes/Leaf/#defined-in_17","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:313</p>"},{"location":"api/solid/classes/Leaf/#eventnames","title":"eventNames","text":"<p>\u25b8 eventNames(): (<code>string</code> | <code>symbol</code>)[]</p>"},{"location":"api/solid/classes/Leaf/#returns_7","title":"Returns","text":"<p>(<code>string</code> | <code>symbol</code>)[]</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_8","title":"Inherited from","text":"<p>Resource.eventNames</p>"},{"location":"api/solid/classes/Leaf/#defined-in_18","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:34</p>"},{"location":"api/solid/classes/Leaf/#getblob","title":"getBlob","text":"<p>\u25b8 getBlob(): <code>undefined</code> | <code>Blob</code></p> <p>If this resource is a binary resource, returns the Blob</p>"},{"location":"api/solid/classes/Leaf/#returns_8","title":"Returns","text":"<p><code>undefined</code> | <code>Blob</code></p> <p>The Blob  if this resource is a binary resource, undefined otherwise</p> <p><code>Example</code></p> <pre><code>// Logs \"some text.\"\nconsole.log(leaf.getBlob()?.toString());\n</code></pre>"},{"location":"api/solid/classes/Leaf/#defined-in_19","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:153</p>"},{"location":"api/solid/classes/Leaf/#getmaxlisteners","title":"getMaxListeners","text":"<p>\u25b8 getMaxListeners(): <code>number</code></p>"},{"location":"api/solid/classes/Leaf/#returns_9","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_9","title":"Inherited from","text":"<p>Resource.getMaxListeners</p>"},{"location":"api/solid/classes/Leaf/#defined-in_20","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:39</p>"},{"location":"api/solid/classes/Leaf/#getmimetype","title":"getMimeType","text":"<p>\u25b8 getMimeType(): <code>undefined</code> | <code>string</code></p> <p>If this resource is a binary resource, returns the mime type</p>"},{"location":"api/solid/classes/Leaf/#returns_10","title":"Returns","text":"<p><code>undefined</code> | <code>string</code></p> <p>The mime type if this resource is a binary resource, undefined otherwise</p> <p><code>Example</code></p> <pre><code>// Logs \"text/txt\"\nconsole.log(leaf.getMimeType());\n</code></pre>"},{"location":"api/solid/classes/Leaf/#defined-in_21","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:138</p>"},{"location":"api/solid/classes/Leaf/#getparentcontainer","title":"getParentContainer","text":"<p>\u25b8 getParentContainer(): <code>Promise</code>\\&lt;<code>Container</code>&gt;</p> <p>Gets the parent container for this leaf by making a request</p>"},{"location":"api/solid/classes/Leaf/#returns_11","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Container</code>&gt;</p> <p>The parent container</p> <p><code>Example</code></p> <pre><code>const leaf = solidLdoDataset\n  .getResource(\"https://example.com/container/resource.ttl\");\nconst leafParent = await leaf.getParentContainer();\nif (!leafParent.isError) {\n  // Logs \"https://example.com/container/\"\n  console.log(leafParent.uri);\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#overrides_7","title":"Overrides","text":"<p>Resource.getParentContainer</p>"},{"location":"api/solid/classes/Leaf/#defined-in_22","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:319</p>"},{"location":"api/solid/classes/Leaf/#getrootcontainer","title":"getRootContainer","text":"<p>\u25b8 getRootContainer(): <code>Promise</code>\\&lt;<code>CheckRootResultError</code> | <code>Container</code>&gt;</p> <p>Gets the root container for this leaf.</p>"},{"location":"api/solid/classes/Leaf/#returns_12","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>CheckRootResultError</code> | <code>Container</code>&gt;</p> <p>The root container for this leaf</p> <p><code>Example</code></p> <p>Suppose the root container is at <code>https://example.com/</code></p> <pre><code>const leaf = ldoSolidDataset\n  .getResource(\"https://example.com/container/resource.ttl\");\nconst rootContainer = await leaf.getRootContainer();\nif (!rootContainer.isError) {\n  // logs \"https://example.com/\"\n  console.log(rootContainer.uri);\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#overrides_8","title":"Overrides","text":"<p>Resource.getRootContainer</p>"},{"location":"api/solid/classes/Leaf/#defined-in_23","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:341</p>"},{"location":"api/solid/classes/Leaf/#getwac","title":"getWac","text":"<p>\u25b8 getWac(<code>options?</code>): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>GetWacRuleSuccess</code> | <code>WacRuleAbsent</code>&gt;</p> <p>Retrieves web access control (WAC) rules for this resource</p>"},{"location":"api/solid/classes/Leaf/#parameters_3","title":"Parameters","text":"Name Type Description <code>options?</code> <code>Object</code> set the \"ignoreCache\" field to true to ignore any cached information on WAC rules. <code>options.ignoreCache</code> <code>boolean</code> -"},{"location":"api/solid/classes/Leaf/#returns_13","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>GetWacRuleSuccess</code> | <code>WacRuleAbsent</code>&gt;</p> <p>WAC Rules results</p> <p><code>Example</code></p> <pre><code>const resource = ldoSolidDataset\n  .getResource(\"https://example.com/container/resource.ttl\");\nconst wacRulesResult = await resource.getWac();\nif (!wacRulesResult.isError) {\n  const wacRules = wacRulesResult.wacRule;\n  // True if the resource is publicly readable\n  console.log(wacRules.public.read);\n  // True if authenticated agents can write to the resource\n  console.log(wacRules.authenticated.write);\n  // True if the given WebId has append access\n  console.log(\n    wacRules.agent[https://example.com/person1/profile/card#me].append\n  );\n  // True if the given WebId has control access\n  console.log(\n    wacRules.agent[https://example.com/person1/profile/card#me].control\n  );\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_10","title":"Inherited from","text":"<p>Resource.getWac</p>"},{"location":"api/solid/classes/Leaf/#defined-in_24","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:596</p>"},{"location":"api/solid/classes/Leaf/#getwacuri","title":"getWacUri","text":"<p>\u25b8 getWacUri(<code>options?</code>): <code>Promise</code>\\&lt;<code>GetWacUriResult</code>&gt;</p> <p>Retrieves the URI for the web access control (WAC) rules for this resource</p>"},{"location":"api/solid/classes/Leaf/#parameters_4","title":"Parameters","text":"Name Type Description <code>options?</code> <code>Object</code> set the \"ignoreCache\" field to true to ignore any cached information on WAC rules. <code>options.ignoreCache</code> <code>boolean</code> -"},{"location":"api/solid/classes/Leaf/#returns_14","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>GetWacUriResult</code>&gt;</p> <p>WAC Rules results</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_11","title":"Inherited from","text":"<p>Resource.getWacUri</p>"},{"location":"api/solid/classes/Leaf/#defined-in_25","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:545</p>"},{"location":"api/solid/classes/Leaf/#handlecreateandoverwrite","title":"handleCreateAndOverwrite","text":"<p>\u25b8 handleCreateAndOverwrite(): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code>&gt;</p> <p>Helper method that handles the core functions for creating and overwriting a resource</p>"},{"location":"api/solid/classes/Leaf/#returns_15","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code>&gt;</p> <p>DeleteResult</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_12","title":"Inherited from","text":"<p>Resource.handleCreateAndOverwrite</p>"},{"location":"api/solid/classes/Leaf/#defined-in_26","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:457</p>"},{"location":"api/solid/classes/Leaf/#handlecreateifabsent","title":"handleCreateIfAbsent","text":"<p>\u25b8 handleCreateIfAbsent(): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code>&gt;</p> <p>Helper method that handles the core functions for creating a resource if  absent</p>"},{"location":"api/solid/classes/Leaf/#returns_16","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code>&gt;</p> <p>DeleteResult</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_13","title":"Inherited from","text":"<p>Resource.handleCreateIfAbsent</p>"},{"location":"api/solid/classes/Leaf/#defined-in_27","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:493</p>"},{"location":"api/solid/classes/Leaf/#handledelete","title":"handleDelete","text":"<p>\u25b8 handleDelete(): <code>Promise</code>\\&lt;<code>DeleteResult</code>&gt;</p> <p>Helper method that handles the core functions for deleting a resource</p>"},{"location":"api/solid/classes/Leaf/#returns_17","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>DeleteResult</code>&gt;</p> <p>DeleteResult</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_14","title":"Inherited from","text":"<p>Resource.handleDelete</p>"},{"location":"api/solid/classes/Leaf/#defined-in_28","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:405</p>"},{"location":"api/solid/classes/Leaf/#handleread","title":"handleRead","text":"<p>\u25b8 handleRead(): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>&gt;</p> <p>A helper method that handles the core functions for reading</p>"},{"location":"api/solid/classes/Leaf/#returns_18","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>&gt;</p> <p>ReadResult</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_15","title":"Inherited from","text":"<p>Resource.handleRead</p>"},{"location":"api/solid/classes/Leaf/#defined-in_29","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:343</p>"},{"location":"api/solid/classes/Leaf/#isabsent","title":"isAbsent","text":"<p>\u25b8 isAbsent(): <code>undefined</code> | <code>boolean</code></p> <p>Is this resource currently absent (it does not exist)</p>"},{"location":"api/solid/classes/Leaf/#returns_19","title":"Returns","text":"<p><code>undefined</code> | <code>boolean</code></p> <p>true if the resource is absent, false if not, undefined if unknown</p> <p><code>Example</code></p> <pre><code>// Logs \"undefined\"\nconsole.log(resource.isAbsent());\nconst result = resource.read();\nif (!result.isError) {\n  // False if the resource exists, true if it does not\n  console.log(resource.isAbsent());\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_16","title":"Inherited from","text":"<p>Resource.isAbsent</p>"},{"location":"api/solid/classes/Leaf/#defined-in_30","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:280</p>"},{"location":"api/solid/classes/Leaf/#isbinary","title":"isBinary","text":"<p>\u25b8 isBinary(): <code>undefined</code> | <code>boolean</code></p> <p>Check if this resource is a binary resource</p>"},{"location":"api/solid/classes/Leaf/#returns_20","title":"Returns","text":"<p><code>undefined</code> | <code>boolean</code></p> <p>True if this resource is a binary resource, false if not, undefined if unknown</p> <p><code>Example</code></p> <pre><code>// Logs \"undefined\"\nconsole.log(leaf.isBinary());\nconst result = await leaf.read();\nif (!result.isError) {\n  // Logs \"true\"\n  console.log(leaf.isBinary());\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#defined-in_31","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:173</p>"},{"location":"api/solid/classes/Leaf/#iscreating","title":"isCreating","text":"<p>\u25b8 isCreating(): <code>boolean</code></p> <p>Checks to see if this resource is being created</p>"},{"location":"api/solid/classes/Leaf/#returns_21","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being created</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isCreating())\n});\n// Logs \"true\"\nconsole.log(resource.isCreating());\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_17","title":"Inherited from","text":"<p>Resource.isCreating</p>"},{"location":"api/solid/classes/Leaf/#defined-in_32","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:144</p>"},{"location":"api/solid/classes/Leaf/#isdataresource","title":"isDataResource","text":"<p>\u25b8 isDataResource(): <code>undefined</code> | <code>boolean</code></p> <p>Check if this resource is a data (RDF) resource</p>"},{"location":"api/solid/classes/Leaf/#returns_22","title":"Returns","text":"<p><code>undefined</code> | <code>boolean</code></p> <p>True if this resource is a data resource, false if not, undefined if unknown</p> <p><code>Example</code></p> <pre><code>// Logs \"undefined\"\nconsole.log(leaf.isDataResource());\nconst result = await leaf.read();\nif (!result.isError) {\n  // Logs \"true\"\n  console.log(leaf.isDataResource());\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#defined-in_33","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:196</p>"},{"location":"api/solid/classes/Leaf/#isdeleting","title":"isDeleting","text":"<p>\u25b8 isDeleting(): <code>boolean</code></p> <p>Checks to see if this resource is being deleted</p>"},{"location":"api/solid/classes/Leaf/#returns_23","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being deleted</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isDeleting())\n});\n// Logs \"true\"\nconsole.log(resource.isDeleting());\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_18","title":"Inherited from","text":"<p>Resource.isDeleting</p>"},{"location":"api/solid/classes/Leaf/#defined-in_34","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:180</p>"},{"location":"api/solid/classes/Leaf/#isdoinginitialfetch","title":"isDoingInitialFetch","text":"<p>\u25b8 isDoingInitialFetch(): <code>boolean</code></p> <p>Checks to see if this resource is being read for the first time</p>"},{"location":"api/solid/classes/Leaf/#returns_24","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being read for the first time</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isDoingInitialFetch())\n});\n// Logs \"true\"\nconsole.log(resource.isDoingInitialFetch());\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_19","title":"Inherited from","text":"<p>Resource.isDoingInitialFetch</p>"},{"location":"api/solid/classes/Leaf/#defined-in_35","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:198</p>"},{"location":"api/solid/classes/Leaf/#isfetched","title":"isFetched","text":"<p>\u25b8 isFetched(): <code>boolean</code></p> <p>Check to see if this resource has been fetched</p>"},{"location":"api/solid/classes/Leaf/#returns_25","title":"Returns","text":"<p><code>boolean</code></p> <p>true if this resource has been fetched before</p> <p><code>Example</code></p> <pre><code>// Logs \"false\"\nconsole.log(resource.isFetched());\nconst result = await resource.read();\nif (!result.isError) {\n  // Logs \"true\"\n  console.log(resource.isFetched());\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_20","title":"Inherited from","text":"<p>Resource.isFetched</p>"},{"location":"api/solid/classes/Leaf/#defined-in_36","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:242</p>"},{"location":"api/solid/classes/Leaf/#isloading","title":"isLoading","text":"<p>\u25b8 isLoading(): <code>boolean</code></p> <p>Checks to see if this resource is loading in any way</p>"},{"location":"api/solid/classes/Leaf/#returns_26","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently loading</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isLoading())\n});\n// Logs \"true\"\nconsole.log(resource.isLoading());\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_21","title":"Inherited from","text":"<p>Resource.isLoading</p>"},{"location":"api/solid/classes/Leaf/#defined-in_37","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:126</p>"},{"location":"api/solid/classes/Leaf/#ispresent","title":"isPresent","text":"<p>\u25b8 isPresent(): <code>undefined</code> | <code>boolean</code></p> <p>Is this resource currently present on the Pod</p>"},{"location":"api/solid/classes/Leaf/#returns_27","title":"Returns","text":"<p><code>undefined</code> | <code>boolean</code></p> <p>false if the resource is absent, true if not, undefined if unknown</p> <p><code>Example</code></p> <pre><code>// Logs \"undefined\"\nconsole.log(resource.isPresent());\nconst result = resource.read();\nif (!result.isError) {\n  // True if the resource exists, false if it does not\n  console.log(resource.isPresent());\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_22","title":"Inherited from","text":"<p>Resource.isPresent</p>"},{"location":"api/solid/classes/Leaf/#defined-in_38","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:299</p>"},{"location":"api/solid/classes/Leaf/#isreading","title":"isReading","text":"<p>\u25b8 isReading(): <code>boolean</code></p> <p>Checks to see if this resource is being read</p>"},{"location":"api/solid/classes/Leaf/#returns_28","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being read</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isReading())\n});\n// Logs \"true\"\nconsole.log(resource.isReading());\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_23","title":"Inherited from","text":"<p>Resource.isReading</p>"},{"location":"api/solid/classes/Leaf/#defined-in_39","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:162</p>"},{"location":"api/solid/classes/Leaf/#isreloading","title":"isReloading","text":"<p>\u25b8 isReloading(): <code>boolean</code></p> <p>Checks to see if this resource is being read for a subsequent time</p>"},{"location":"api/solid/classes/Leaf/#returns_29","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being read for a subsequent time</p> <p><code>Example</code></p> <pre><code>await resource.read();\nresource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isCreating())\n});\n// Logs \"true\"\nconsole.log(resource.isCreating());\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_24","title":"Inherited from","text":"<p>Resource.isReloading</p>"},{"location":"api/solid/classes/Leaf/#defined-in_40","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:217</p>"},{"location":"api/solid/classes/Leaf/#isunfetched","title":"isUnfetched","text":"<p>\u25b8 isUnfetched(): <code>boolean</code></p> <p>Check to see if this resource is currently unfetched</p>"},{"location":"api/solid/classes/Leaf/#returns_30","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently unfetched</p> <p><code>Example</code></p> <pre><code>// Logs \"true\"\nconsole.log(resource.isUnetched());\nconst result = await resource.read();\nif (!result.isError) {\n  // Logs \"false\"\n  console.log(resource.isUnfetched());\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_25","title":"Inherited from","text":"<p>Resource.isUnfetched</p>"},{"location":"api/solid/classes/Leaf/#defined-in_41","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:261</p>"},{"location":"api/solid/classes/Leaf/#isupdating","title":"isUpdating","text":"<p>\u25b8 isUpdating(): <code>boolean</code></p> <p>Checks to see if the resource is currently updating data</p>"},{"location":"api/solid/classes/Leaf/#returns_31","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the current resource is updating</p> <p><code>Example</code></p> <pre><code>leaf.update(datasetChanges).then(() =&gt; {\n  // Logs \"false\"\n  console.log(leaf.isUpdating())\n});\n// Logs \"true\"\nconsole.log(leaf.isUpdating());\n</code></pre>"},{"location":"api/solid/classes/Leaf/#defined-in_42","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:123</p>"},{"location":"api/solid/classes/Leaf/#isuploading","title":"isUploading","text":"<p>\u25b8 isUploading(): <code>boolean</code></p> <p>Checks to see if the resource is currently uploading data</p>"},{"location":"api/solid/classes/Leaf/#returns_32","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the current resource is uploading</p> <p><code>Example</code></p> <pre><code>leaf.uploadAndOverwrite(new Blob(\"some text\"), \"text/txt\").then(() =&gt; {\n  // Logs \"false\"\n  console.log(leaf.isUploading())\n});\n// Logs \"true\"\nconsole.log(leaf.isUploading());\n</code></pre>"},{"location":"api/solid/classes/Leaf/#defined-in_43","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:105</p>"},{"location":"api/solid/classes/Leaf/#listenercount","title":"listenerCount","text":"<p>\u25b8 listenerCount\\&lt;<code>E</code>&gt;(<code>event</code>): <code>number</code></p>"},{"location":"api/solid/classes/Leaf/#type-parameters_2","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_5","title":"Parameters","text":"Name Type <code>event</code> <code>E</code>"},{"location":"api/solid/classes/Leaf/#returns_33","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_26","title":"Inherited from","text":"<p>Resource.listenerCount</p>"},{"location":"api/solid/classes/Leaf/#defined-in_44","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:37</p>"},{"location":"api/solid/classes/Leaf/#listeners","title":"listeners","text":"<p>\u25b8 listeners\\&lt;<code>E</code>&gt;(<code>event</code>): { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Leaf/#type-parameters_3","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_6","title":"Parameters","text":"Name Type <code>event</code> <code>E</code>"},{"location":"api/solid/classes/Leaf/#returns_34","title":"Returns","text":"<p>{ <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_27","title":"Inherited from","text":"<p>Resource.listeners</p>"},{"location":"api/solid/classes/Leaf/#defined-in_45","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:36</p>"},{"location":"api/solid/classes/Leaf/#off","title":"off","text":"<p>\u25b8 off\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Leaf/#type-parameters_4","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_7","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Leaf/#returns_35","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_28","title":"Inherited from","text":"<p>Resource.off</p>"},{"location":"api/solid/classes/Leaf/#defined-in_46","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:28</p>"},{"location":"api/solid/classes/Leaf/#on","title":"on","text":"<p>\u25b8 on\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Leaf/#type-parameters_5","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_8","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Leaf/#returns_36","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_29","title":"Inherited from","text":"<p>Resource.on</p>"},{"location":"api/solid/classes/Leaf/#defined-in_47","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:23</p>"},{"location":"api/solid/classes/Leaf/#once","title":"once","text":"<p>\u25b8 once\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Leaf/#type-parameters_6","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_9","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Leaf/#returns_37","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_30","title":"Inherited from","text":"<p>Resource.once</p>"},{"location":"api/solid/classes/Leaf/#defined-in_48","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:24</p>"},{"location":"api/solid/classes/Leaf/#prependlistener","title":"prependListener","text":"<p>\u25b8 prependListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Leaf/#type-parameters_7","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_10","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Leaf/#returns_38","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_31","title":"Inherited from","text":"<p>Resource.prependListener</p>"},{"location":"api/solid/classes/Leaf/#defined-in_49","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:25</p>"},{"location":"api/solid/classes/Leaf/#prependoncelistener","title":"prependOnceListener","text":"<p>\u25b8 prependOnceListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Leaf/#type-parameters_8","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_11","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Leaf/#returns_39","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_32","title":"Inherited from","text":"<p>Resource.prependOnceListener</p>"},{"location":"api/solid/classes/Leaf/#defined-in_50","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:26</p>"},{"location":"api/solid/classes/Leaf/#rawlisteners","title":"rawListeners","text":"<p>\u25b8 rawListeners\\&lt;<code>E</code>&gt;(<code>event</code>): { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Leaf/#type-parameters_9","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_12","title":"Parameters","text":"Name Type <code>event</code> <code>E</code>"},{"location":"api/solid/classes/Leaf/#returns_40","title":"Returns","text":"<p>{ <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Leaf/#inherited-from_33","title":"Inherited from","text":"<p>Resource.rawListeners</p>"},{"location":"api/solid/classes/Leaf/#defined-in_51","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:35</p>"},{"location":"api/solid/classes/Leaf/#read","title":"read","text":"<p>\u25b8 read(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ReadLeafResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>Reads the leaf by making a request</p>"},{"location":"api/solid/classes/Leaf/#returns_41","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ReadLeafResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>A read result</p> <p><code>Example</code></p> <pre><code>const result = await leaf.read();\nif (result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#overrides_9","title":"Overrides","text":"<p>Resource.read</p>"},{"location":"api/solid/classes/Leaf/#defined-in_52","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:237</p>"},{"location":"api/solid/classes/Leaf/#readifunfetched","title":"readIfUnfetched","text":"<p>\u25b8 readIfUnfetched(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ReadLeafResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>Makes a request to read this leaf if it hasn't been fetched yet. If it has, return the cached informtation</p>"},{"location":"api/solid/classes/Leaf/#returns_42","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>ReadLeafResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>a ReadLeafResult</p> <p><code>Example</code></p> <pre><code>const result = await leaf.read();\nif (!result.isError) {\n  // Will execute without making a request\n  const result2 = await leaf.readIfUnfetched();\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#overrides_10","title":"Overrides","text":"<p>Resource.readIfUnfetched</p>"},{"location":"api/solid/classes/Leaf/#defined-in_53","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:292</p>"},{"location":"api/solid/classes/Leaf/#removealllisteners","title":"removeAllListeners","text":"<p>\u25b8 removeAllListeners\\&lt;<code>E</code>&gt;(<code>event?</code>): <code>this</code></p>"},{"location":"api/solid/classes/Leaf/#type-parameters_10","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_13","title":"Parameters","text":"Name Type <code>event?</code> <code>E</code>"},{"location":"api/solid/classes/Leaf/#returns_43","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_34","title":"Inherited from","text":"<p>Resource.removeAllListeners</p>"},{"location":"api/solid/classes/Leaf/#defined-in_54","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:29</p>"},{"location":"api/solid/classes/Leaf/#removelistener","title":"removeListener","text":"<p>\u25b8 removeListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Leaf/#type-parameters_11","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Leaf/#parameters_14","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Leaf/#returns_44","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_35","title":"Inherited from","text":"<p>Resource.removeListener</p>"},{"location":"api/solid/classes/Leaf/#defined-in_55","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:30</p>"},{"location":"api/solid/classes/Leaf/#setmaxlisteners","title":"setMaxListeners","text":"<p>\u25b8 setMaxListeners(<code>maxListeners</code>): <code>this</code></p>"},{"location":"api/solid/classes/Leaf/#parameters_15","title":"Parameters","text":"Name Type <code>maxListeners</code> <code>number</code>"},{"location":"api/solid/classes/Leaf/#returns_45","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Leaf/#inherited-from_36","title":"Inherited from","text":"<p>Resource.setMaxListeners</p>"},{"location":"api/solid/classes/Leaf/#defined-in_56","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:40</p>"},{"location":"api/solid/classes/Leaf/#setwac","title":"setWac","text":"<p>\u25b8 setWac(<code>wacRule</code>): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>SetWacRuleSuccess</code>&gt;</p> <p>Sets access rules for a specific resource</p>"},{"location":"api/solid/classes/Leaf/#parameters_16","title":"Parameters","text":"Name Type Description <code>wacRule</code> <code>WacRule</code> the access rules to set"},{"location":"api/solid/classes/Leaf/#returns_46","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>SetWacRuleSuccess</code>&gt;</p> <p>SetWacRuleResult</p> <p><code>Example</code></p> <pre><code>const resource = ldoSolidDataset\n  .getResource(\"https://example.com/container/resource.ttl\");\nconst wacRulesResult = await resource.setWac({\n  public: {\n    read: true,\n    write: false,\n    append: false,\n    control: false\n  },\n  authenticated: {\n    read: true,\n    write: false,\n    append: true,\n    control: false\n  },\n  agent: {\n    \"https://example.com/person1/profile/card#me\": {\n      read: true,\n      write: true,\n      append: true,\n      control: true\n    }\n  }\n});\n</code></pre>"},{"location":"api/solid/classes/Leaf/#inherited-from_37","title":"Inherited from","text":"<p>Resource.setWac</p>"},{"location":"api/solid/classes/Leaf/#defined-in_57","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:669</p>"},{"location":"api/solid/classes/Leaf/#toreadresult","title":"toReadResult","text":"<p>\u25b8 toReadResult(): <code>ResourceResult</code>\\&lt;<code>ReadLeafResult</code>, <code>Leaf</code>&gt;</p> <p>Converts the current state of this leaf to a readResult</p>"},{"location":"api/solid/classes/Leaf/#returns_47","title":"Returns","text":"<p><code>ResourceResult</code>\\&lt;<code>ReadLeafResult</code>, <code>Leaf</code>&gt;</p> <p>a ReadLeafResult</p>"},{"location":"api/solid/classes/Leaf/#overrides_11","title":"Overrides","text":"<p>Resource.toReadResult</p>"},{"location":"api/solid/classes/Leaf/#defined-in_58","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:248</p>"},{"location":"api/solid/classes/Leaf/#update","title":"update","text":"<p>\u25b8 update(<code>changes</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UpdateResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>Updates a data resource with the changes provided</p>"},{"location":"api/solid/classes/Leaf/#parameters_17","title":"Parameters","text":"Name Type Description <code>changes</code> <code>DatasetChanges</code>\\&lt;<code>Quad</code>&gt; Dataset changes that will be applied to the resoruce"},{"location":"api/solid/classes/Leaf/#returns_48","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UpdateResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>An UpdateResult</p> <p><code>Example</code></p> <pre><code>import {\n  updateDataResource,\n  transactionChanges,\n  changeData,\n  createSolidLdoDataset,\n} from \"@ldo/solid\";\n\n//...\n\n// Get a Linked Data Object\nconst profile = solidLdoDataset\n  .usingType(ProfileShapeType)\n  .fromSubject(\"https://example.com/profile#me\");\ncosnt resource = solidLdoDataset\n  .getResource(\"https://example.com/profile\");\n// Create a transaction to change data\nconst cProfile = changeData(profile, resource);\ncProfile.name = \"John Doe\";\n// Get data in \"DatasetChanges\" form\nconst datasetChanges = transactionChanges(someLinkedDataObject);\n// Use \"update\" to apply the changes\ncosnt result = resource.update(datasetChanges);\n</code></pre>"},{"location":"api/solid/classes/Leaf/#defined-in_59","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:539</p>"},{"location":"api/solid/classes/Leaf/#updatewithcreatesuccess","title":"updateWithCreateSuccess","text":"<p>\u25b8 updateWithCreateSuccess(<code>_result</code>): <code>void</code></p> <p>A helper method updates this leaf's internal state upon create success</p>"},{"location":"api/solid/classes/Leaf/#parameters_18","title":"Parameters","text":"Name Type Description <code>_result</code> <code>ResourceSuccess</code> the result of the create success"},{"location":"api/solid/classes/Leaf/#returns_49","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Leaf/#overrides_12","title":"Overrides","text":"<p>Resource.updateWithCreateSuccess</p>"},{"location":"api/solid/classes/Leaf/#defined-in_60","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:386</p>"},{"location":"api/solid/classes/Leaf/#updatewithdeletesuccess","title":"updateWithDeleteSuccess","text":"<p>\u25b8 updateWithDeleteSuccess(<code>_result</code>): <code>void</code></p> <p>A helper method updates this leaf's internal state upon delete success</p>"},{"location":"api/solid/classes/Leaf/#parameters_19","title":"Parameters","text":"Name Type <code>_result</code> <code>DeleteSuccess</code>"},{"location":"api/solid/classes/Leaf/#returns_50","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Leaf/#overrides_13","title":"Overrides","text":"<p>Resource.updateWithDeleteSuccess</p>"},{"location":"api/solid/classes/Leaf/#defined-in_61","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:357</p>"},{"location":"api/solid/classes/Leaf/#updatewithreadsuccess","title":"updateWithReadSuccess","text":"<p>\u25b8 updateWithReadSuccess(<code>result</code>): <code>void</code></p> <p>A helper method updates this leaf's internal state upon read success</p>"},{"location":"api/solid/classes/Leaf/#parameters_20","title":"Parameters","text":"Name Type Description <code>result</code> <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>AbsentReadSuccess</code> the result of the read success"},{"location":"api/solid/classes/Leaf/#returns_51","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Leaf/#overrides_14","title":"Overrides","text":"<p>Resource.updateWithReadSuccess</p>"},{"location":"api/solid/classes/Leaf/#defined-in_62","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:214</p>"},{"location":"api/solid/classes/Leaf/#uploadandoverwrite","title":"uploadAndOverwrite","text":"<p>\u25b8 uploadAndOverwrite(<code>blob</code>, <code>mimeType</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>Uploads a binary resource to this URI. If there is already a resource present at this URI, it will be overwritten</p>"},{"location":"api/solid/classes/Leaf/#parameters_21","title":"Parameters","text":"Name Type Description <code>blob</code> <code>Blob</code> the Blob of the binary <code>mimeType</code> <code>string</code> the MimeType of the binary"},{"location":"api/solid/classes/Leaf/#returns_52","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>A LeafCreateAndOverwriteResult</p> <p><code>Example</code></p> <pre><code>const result = await leaf.uploadAndOverwrite(\n  new Blob(\"some text.\"),\n  \"text/txt\",\n);\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#defined-in_63","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:457</p>"},{"location":"api/solid/classes/Leaf/#uploadifabsent","title":"uploadIfAbsent","text":"<p>\u25b8 uploadIfAbsent(<code>blob</code>, <code>mimeType</code>): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateIfAbsentResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>Uploads a binary resource to this URI tf there not is already a resource present at this URI.</p>"},{"location":"api/solid/classes/Leaf/#parameters_22","title":"Parameters","text":"Name Type Description <code>blob</code> <code>Blob</code> the Blob of the binary <code>mimeType</code> <code>string</code> the MimeType of the binary"},{"location":"api/solid/classes/Leaf/#returns_53","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>LeafCreateIfAbsentResult</code>, <code>Leaf</code>&gt;&gt;</p> <p>A LeafCreateIfAbsentResult</p> <p><code>Example</code></p> <pre><code>const result = await leaf.uploadIfAbsent(\n  new Blob(\"some text.\"),\n  \"text/txt\",\n);\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Leaf/#defined-in_64","title":"Defined in","text":"<p>packages/solid/src/resource/Leaf.ts:489</p>"},{"location":"api/solid/classes/Resource/","title":"Class: Resource","text":"<p>Represents the current status of a specific Resource on a Pod as known by LDO.</p>"},{"location":"api/solid/classes/Resource/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>TypedEventEmitter</code>\\&lt;{ <code>update</code>: () =&gt; <code>void</code>  }, <code>this</code>&gt;</li> </ul> <p>\u21b3 <code>Resource</code></p> <p>\u21b3\u21b3 <code>Container</code></p> <p>\u21b3\u21b3 <code>Leaf</code></p>"},{"location":"api/solid/classes/Resource/#constructors","title":"Constructors","text":""},{"location":"api/solid/classes/Resource/#constructor","title":"constructor","text":"<p>\u2022 new Resource(<code>context</code>): <code>Resource</code></p>"},{"location":"api/solid/classes/Resource/#parameters","title":"Parameters","text":"Name Type Description <code>context</code> <code>SolidLdoDatasetContext</code> SolidLdoDatasetContext for the parent dataset"},{"location":"api/solid/classes/Resource/#returns","title":"Returns","text":"<p><code>Resource</code></p>"},{"location":"api/solid/classes/Resource/#overrides","title":"Overrides","text":"<p>(EventEmitter as new () =\\&gt; TypedEmitter\\&lt;{   update: () =\\&gt; void; }\\&gt;).constructor</p>"},{"location":"api/solid/classes/Resource/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:101</p>"},{"location":"api/solid/classes/Resource/#properties","title":"Properties","text":""},{"location":"api/solid/classes/Resource/#absent","title":"absent","text":"<p>\u2022 <code>Protected</code> absent: <code>undefined</code> | <code>boolean</code></p> <p>True if this resource has been fetched but does not exist</p>"},{"location":"api/solid/classes/Resource/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:84</p>"},{"location":"api/solid/classes/Resource/#context","title":"context","text":"<p>\u2022 <code>Protected</code> <code>Readonly</code> context: <code>SolidLdoDatasetContext</code></p> <p>The SolidLdoDatasetContext from the Parent Dataset</p>"},{"location":"api/solid/classes/Resource/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:51</p>"},{"location":"api/solid/classes/Resource/#didinitialfetch","title":"didInitialFetch","text":"<p>\u2022 <code>Protected</code> didInitialFetch: <code>boolean</code> = <code>false</code></p> <p>True if this resource has been fetched at least once</p>"},{"location":"api/solid/classes/Resource/#defined-in_3","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:78</p>"},{"location":"api/solid/classes/Resource/#requester","title":"requester","text":"<p>\u2022 <code>Protected</code> <code>Readonly</code> <code>Abstract</code> requester: <code>BatchedRequester</code></p> <p>Batched Requester for the Resource</p>"},{"location":"api/solid/classes/Resource/#defined-in_4","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:72</p>"},{"location":"api/solid/classes/Resource/#status","title":"status","text":"<p>\u2022 <code>Abstract</code> status: <code>RequesterResult</code></p> <p>The status of the last request made for this resource</p>"},{"location":"api/solid/classes/Resource/#defined-in_5","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:66</p>"},{"location":"api/solid/classes/Resource/#type","title":"type","text":"<p>\u2022 <code>Readonly</code> <code>Abstract</code> type: <code>string</code></p> <p>The type of resource (leaf or container)</p>"},{"location":"api/solid/classes/Resource/#defined-in_6","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:61</p>"},{"location":"api/solid/classes/Resource/#uri","title":"uri","text":"<p>\u2022 <code>Readonly</code> <code>Abstract</code> uri: <code>string</code></p> <p>The uri of the resource</p>"},{"location":"api/solid/classes/Resource/#defined-in_7","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:56</p>"},{"location":"api/solid/classes/Resource/#wacrule","title":"wacRule","text":"<p>\u2022 <code>Protected</code> <code>Optional</code> wacRule: <code>WacRule</code></p> <p>If a wac rule was fetched, it is cached here</p>"},{"location":"api/solid/classes/Resource/#defined-in_8","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:96</p>"},{"location":"api/solid/classes/Resource/#wacuri","title":"wacUri","text":"<p>\u2022 <code>Protected</code> <code>Optional</code> wacUri: <code>LeafUri</code></p> <p>If a wac uri is fetched, it is cached here</p>"},{"location":"api/solid/classes/Resource/#defined-in_9","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:90</p>"},{"location":"api/solid/classes/Resource/#methods","title":"Methods","text":""},{"location":"api/solid/classes/Resource/#addlistener","title":"addListener","text":"<p>\u25b8 addListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Resource/#type-parameters","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_1","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Resource/#returns_1","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).addListener</p>"},{"location":"api/solid/classes/Resource/#defined-in_10","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:22</p>"},{"location":"api/solid/classes/Resource/#createandoverwrite","title":"createAndOverwrite","text":"<p>\u25b8 createAndOverwrite(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p> <p>Creates a resource at this URI and overwrites any that already exists</p>"},{"location":"api/solid/classes/Resource/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p> <p>CreateAndOverwriteResult</p> <p><code>Example</code></p> <pre><code>const result = await resource.createAndOverwrite();\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_11","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:444</p>"},{"location":"api/solid/classes/Resource/#createifabsent","title":"createIfAbsent","text":"<p>\u25b8 createIfAbsent(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p> <p>Creates a resource at this URI if the resource doesn't already exist</p>"},{"location":"api/solid/classes/Resource/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p> <p>CreateIfAbsentResult</p> <p><code>Example</code></p> <pre><code>const result = await leaf.createIfAbsent();\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_12","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:480</p>"},{"location":"api/solid/classes/Resource/#emit","title":"emit","text":"<p>\u25b8 emit\\&lt;<code>E</code>&gt;(<code>event</code>, <code>...args</code>): <code>boolean</code></p>"},{"location":"api/solid/classes/Resource/#type-parameters_1","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_2","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>...args</code> <code>Parameters</code>\\&lt;{ <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]&gt;"},{"location":"api/solid/classes/Resource/#returns_4","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_1","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).emit</p>"},{"location":"api/solid/classes/Resource/#defined-in_13","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:32</p>"},{"location":"api/solid/classes/Resource/#emitthisandparent","title":"emitThisAndParent","text":"<p>\u25b8 emitThisAndParent(): <code>void</code></p> <p>Emits an update event for both this resource and the parent</p>"},{"location":"api/solid/classes/Resource/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Resource/#defined-in_14","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:313</p>"},{"location":"api/solid/classes/Resource/#eventnames","title":"eventNames","text":"<p>\u25b8 eventNames(): (<code>string</code> | <code>symbol</code>)[]</p>"},{"location":"api/solid/classes/Resource/#returns_6","title":"Returns","text":"<p>(<code>string</code> | <code>symbol</code>)[]</p>"},{"location":"api/solid/classes/Resource/#inherited-from_2","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).eventNames</p>"},{"location":"api/solid/classes/Resource/#defined-in_15","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:34</p>"},{"location":"api/solid/classes/Resource/#getmaxlisteners","title":"getMaxListeners","text":"<p>\u25b8 getMaxListeners(): <code>number</code></p>"},{"location":"api/solid/classes/Resource/#returns_7","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_3","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).getMaxListeners</p>"},{"location":"api/solid/classes/Resource/#defined-in_16","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:39</p>"},{"location":"api/solid/classes/Resource/#getparentcontainer","title":"getParentContainer","text":"<p>\u25b8 getParentContainer(): <code>Promise</code>\\&lt;<code>undefined</code> | <code>CheckRootResultError</code> | <code>Container</code>&gt;</p>"},{"location":"api/solid/classes/Resource/#returns_8","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>undefined</code> | <code>CheckRootResultError</code> | <code>Container</code>&gt;</p>"},{"location":"api/solid/classes/Resource/#defined-in_17","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:529</p>"},{"location":"api/solid/classes/Resource/#getrootcontainer","title":"getRootContainer","text":"<p>\u25b8 getRootContainer(): <code>Promise</code>\\&lt;<code>CheckRootResultError</code> | <code>Container</code>&gt;</p> <p>Gets the root container for this resource.</p>"},{"location":"api/solid/classes/Resource/#returns_9","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>CheckRootResultError</code> | <code>Container</code>&gt;</p> <p>The root container for this resource</p> <p><code>Example</code></p> <p>Suppose the root container is at <code>https://example.com/</code></p> <pre><code>const resource = ldoSolidDataset\n  .getResource(\"https://example.com/container/resource.ttl\");\nconst rootContainer = await resource.getRootContainer();\nif (!rootContainer.isError) {\n  // logs \"https://example.com/\"\n  console.log(rootContainer.uri);\n}\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_18","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:527</p>"},{"location":"api/solid/classes/Resource/#getwac","title":"getWac","text":"<p>\u25b8 getWac(<code>options?</code>): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>GetWacRuleSuccess</code> | <code>WacRuleAbsent</code>&gt;</p> <p>Retrieves web access control (WAC) rules for this resource</p>"},{"location":"api/solid/classes/Resource/#parameters_3","title":"Parameters","text":"Name Type Description <code>options?</code> <code>Object</code> set the \"ignoreCache\" field to true to ignore any cached information on WAC rules. <code>options.ignoreCache</code> <code>boolean</code> -"},{"location":"api/solid/classes/Resource/#returns_10","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>GetWacRuleSuccess</code> | <code>WacRuleAbsent</code>&gt;</p> <p>WAC Rules results</p> <p><code>Example</code></p> <pre><code>const resource = ldoSolidDataset\n  .getResource(\"https://example.com/container/resource.ttl\");\nconst wacRulesResult = await resource.getWac();\nif (!wacRulesResult.isError) {\n  const wacRules = wacRulesResult.wacRule;\n  // True if the resource is publicly readable\n  console.log(wacRules.public.read);\n  // True if authenticated agents can write to the resource\n  console.log(wacRules.authenticated.write);\n  // True if the given WebId has append access\n  console.log(\n    wacRules.agent[https://example.com/person1/profile/card#me].append\n  );\n  // True if the given WebId has control access\n  console.log(\n    wacRules.agent[https://example.com/person1/profile/card#me].control\n  );\n}\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_19","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:596</p>"},{"location":"api/solid/classes/Resource/#getwacuri","title":"getWacUri","text":"<p>\u25b8 getWacUri(<code>options?</code>): <code>Promise</code>\\&lt;<code>GetWacUriResult</code>&gt;</p> <p>Retrieves the URI for the web access control (WAC) rules for this resource</p>"},{"location":"api/solid/classes/Resource/#parameters_4","title":"Parameters","text":"Name Type Description <code>options?</code> <code>Object</code> set the \"ignoreCache\" field to true to ignore any cached information on WAC rules. <code>options.ignoreCache</code> <code>boolean</code> -"},{"location":"api/solid/classes/Resource/#returns_11","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>GetWacUriResult</code>&gt;</p> <p>WAC Rules results</p>"},{"location":"api/solid/classes/Resource/#defined-in_20","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:545</p>"},{"location":"api/solid/classes/Resource/#handlecreateandoverwrite","title":"handleCreateAndOverwrite","text":"<p>\u25b8 handleCreateAndOverwrite(): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code>&gt;</p> <p>Helper method that handles the core functions for creating and overwriting a resource</p>"},{"location":"api/solid/classes/Resource/#returns_12","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code>&gt;</p> <p>DeleteResult</p>"},{"location":"api/solid/classes/Resource/#defined-in_21","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:457</p>"},{"location":"api/solid/classes/Resource/#handlecreateifabsent","title":"handleCreateIfAbsent","text":"<p>\u25b8 handleCreateIfAbsent(): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code>&gt;</p> <p>Helper method that handles the core functions for creating a resource if  absent</p>"},{"location":"api/solid/classes/Resource/#returns_13","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>CreateSuccess</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code>&gt;</p> <p>DeleteResult</p>"},{"location":"api/solid/classes/Resource/#defined-in_22","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:493</p>"},{"location":"api/solid/classes/Resource/#handledelete","title":"handleDelete","text":"<p>\u25b8 handleDelete(): <code>Promise</code>\\&lt;<code>DeleteResult</code>&gt;</p> <p>Helper method that handles the core functions for deleting a resource</p>"},{"location":"api/solid/classes/Resource/#returns_14","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>DeleteResult</code>&gt;</p> <p>DeleteResult</p>"},{"location":"api/solid/classes/Resource/#defined-in_23","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:405</p>"},{"location":"api/solid/classes/Resource/#handleread","title":"handleRead","text":"<p>\u25b8 handleRead(): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>&gt;</p> <p>A helper method that handles the core functions for reading</p>"},{"location":"api/solid/classes/Resource/#returns_15","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>&gt;</p> <p>ReadResult</p>"},{"location":"api/solid/classes/Resource/#defined-in_24","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:343</p>"},{"location":"api/solid/classes/Resource/#isabsent","title":"isAbsent","text":"<p>\u25b8 isAbsent(): <code>undefined</code> | <code>boolean</code></p> <p>Is this resource currently absent (it does not exist)</p>"},{"location":"api/solid/classes/Resource/#returns_16","title":"Returns","text":"<p><code>undefined</code> | <code>boolean</code></p> <p>true if the resource is absent, false if not, undefined if unknown</p> <p><code>Example</code></p> <pre><code>// Logs \"undefined\"\nconsole.log(resource.isAbsent());\nconst result = resource.read();\nif (!result.isError) {\n  // False if the resource exists, true if it does not\n  console.log(resource.isAbsent());\n}\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_25","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:280</p>"},{"location":"api/solid/classes/Resource/#iscreating","title":"isCreating","text":"<p>\u25b8 isCreating(): <code>boolean</code></p> <p>Checks to see if this resource is being created</p>"},{"location":"api/solid/classes/Resource/#returns_17","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being created</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isCreating())\n});\n// Logs \"true\"\nconsole.log(resource.isCreating());\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_26","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:144</p>"},{"location":"api/solid/classes/Resource/#isdeleting","title":"isDeleting","text":"<p>\u25b8 isDeleting(): <code>boolean</code></p> <p>Checks to see if this resource is being deleted</p>"},{"location":"api/solid/classes/Resource/#returns_18","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being deleted</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isDeleting())\n});\n// Logs \"true\"\nconsole.log(resource.isDeleting());\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_27","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:180</p>"},{"location":"api/solid/classes/Resource/#isdoinginitialfetch","title":"isDoingInitialFetch","text":"<p>\u25b8 isDoingInitialFetch(): <code>boolean</code></p> <p>Checks to see if this resource is being read for the first time</p>"},{"location":"api/solid/classes/Resource/#returns_19","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being read for the first time</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isDoingInitialFetch())\n});\n// Logs \"true\"\nconsole.log(resource.isDoingInitialFetch());\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_28","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:198</p>"},{"location":"api/solid/classes/Resource/#isfetched","title":"isFetched","text":"<p>\u25b8 isFetched(): <code>boolean</code></p> <p>Check to see if this resource has been fetched</p>"},{"location":"api/solid/classes/Resource/#returns_20","title":"Returns","text":"<p><code>boolean</code></p> <p>true if this resource has been fetched before</p> <p><code>Example</code></p> <pre><code>// Logs \"false\"\nconsole.log(resource.isFetched());\nconst result = await resource.read();\nif (!result.isError) {\n  // Logs \"true\"\n  console.log(resource.isFetched());\n}\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_29","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:242</p>"},{"location":"api/solid/classes/Resource/#isloading","title":"isLoading","text":"<p>\u25b8 isLoading(): <code>boolean</code></p> <p>Checks to see if this resource is loading in any way</p>"},{"location":"api/solid/classes/Resource/#returns_21","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently loading</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isLoading())\n});\n// Logs \"true\"\nconsole.log(resource.isLoading());\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_30","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:126</p>"},{"location":"api/solid/classes/Resource/#ispresent","title":"isPresent","text":"<p>\u25b8 isPresent(): <code>undefined</code> | <code>boolean</code></p> <p>Is this resource currently present on the Pod</p>"},{"location":"api/solid/classes/Resource/#returns_22","title":"Returns","text":"<p><code>undefined</code> | <code>boolean</code></p> <p>false if the resource is absent, true if not, undefined if unknown</p> <p><code>Example</code></p> <pre><code>// Logs \"undefined\"\nconsole.log(resource.isPresent());\nconst result = resource.read();\nif (!result.isError) {\n  // True if the resource exists, false if it does not\n  console.log(resource.isPresent());\n}\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_31","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:299</p>"},{"location":"api/solid/classes/Resource/#isreading","title":"isReading","text":"<p>\u25b8 isReading(): <code>boolean</code></p> <p>Checks to see if this resource is being read</p>"},{"location":"api/solid/classes/Resource/#returns_23","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being read</p> <p><code>Example</code></p> <pre><code>resource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isReading())\n});\n// Logs \"true\"\nconsole.log(resource.isReading());\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_32","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:162</p>"},{"location":"api/solid/classes/Resource/#isreloading","title":"isReloading","text":"<p>\u25b8 isReloading(): <code>boolean</code></p> <p>Checks to see if this resource is being read for a subsequent time</p>"},{"location":"api/solid/classes/Resource/#returns_24","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently being read for a subsequent time</p> <p><code>Example</code></p> <pre><code>await resource.read();\nresource.read().then(() =&gt; {\n  // Logs \"false\"\n  console.log(resource.isCreating())\n});\n// Logs \"true\"\nconsole.log(resource.isCreating());\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_33","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:217</p>"},{"location":"api/solid/classes/Resource/#isunfetched","title":"isUnfetched","text":"<p>\u25b8 isUnfetched(): <code>boolean</code></p> <p>Check to see if this resource is currently unfetched</p>"},{"location":"api/solid/classes/Resource/#returns_25","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the resource is currently unfetched</p> <p><code>Example</code></p> <pre><code>// Logs \"true\"\nconsole.log(resource.isUnetched());\nconst result = await resource.read();\nif (!result.isError) {\n  // Logs \"false\"\n  console.log(resource.isUnfetched());\n}\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_34","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:261</p>"},{"location":"api/solid/classes/Resource/#listenercount","title":"listenerCount","text":"<p>\u25b8 listenerCount\\&lt;<code>E</code>&gt;(<code>event</code>): <code>number</code></p>"},{"location":"api/solid/classes/Resource/#type-parameters_2","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_5","title":"Parameters","text":"Name Type <code>event</code> <code>E</code>"},{"location":"api/solid/classes/Resource/#returns_26","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_4","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).listenerCount</p>"},{"location":"api/solid/classes/Resource/#defined-in_35","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:37</p>"},{"location":"api/solid/classes/Resource/#listeners","title":"listeners","text":"<p>\u25b8 listeners\\&lt;<code>E</code>&gt;(<code>event</code>): { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Resource/#type-parameters_3","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_6","title":"Parameters","text":"Name Type <code>event</code> <code>E</code>"},{"location":"api/solid/classes/Resource/#returns_27","title":"Returns","text":"<p>{ <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Resource/#inherited-from_5","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).listeners</p>"},{"location":"api/solid/classes/Resource/#defined-in_36","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:36</p>"},{"location":"api/solid/classes/Resource/#off","title":"off","text":"<p>\u25b8 off\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Resource/#type-parameters_4","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_7","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Resource/#returns_28","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_6","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).off</p>"},{"location":"api/solid/classes/Resource/#defined-in_37","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:28</p>"},{"location":"api/solid/classes/Resource/#on","title":"on","text":"<p>\u25b8 on\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Resource/#type-parameters_5","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_8","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Resource/#returns_29","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_7","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).on</p>"},{"location":"api/solid/classes/Resource/#defined-in_38","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:23</p>"},{"location":"api/solid/classes/Resource/#once","title":"once","text":"<p>\u25b8 once\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Resource/#type-parameters_6","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_9","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Resource/#returns_30","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_8","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).once</p>"},{"location":"api/solid/classes/Resource/#defined-in_39","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:24</p>"},{"location":"api/solid/classes/Resource/#prependlistener","title":"prependListener","text":"<p>\u25b8 prependListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Resource/#type-parameters_7","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_10","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Resource/#returns_31","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_9","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).prependListener</p>"},{"location":"api/solid/classes/Resource/#defined-in_40","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:25</p>"},{"location":"api/solid/classes/Resource/#prependoncelistener","title":"prependOnceListener","text":"<p>\u25b8 prependOnceListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Resource/#type-parameters_8","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_11","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Resource/#returns_32","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_10","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).prependOnceListener</p>"},{"location":"api/solid/classes/Resource/#defined-in_41","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:26</p>"},{"location":"api/solid/classes/Resource/#rawlisteners","title":"rawListeners","text":"<p>\u25b8 rawListeners\\&lt;<code>E</code>&gt;(<code>event</code>): { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Resource/#type-parameters_9","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_12","title":"Parameters","text":"Name Type <code>event</code> <code>E</code>"},{"location":"api/solid/classes/Resource/#returns_33","title":"Returns","text":"<p>{ <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>][]</p>"},{"location":"api/solid/classes/Resource/#inherited-from_11","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).rawListeners</p>"},{"location":"api/solid/classes/Resource/#defined-in_42","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:35</p>"},{"location":"api/solid/classes/Resource/#read","title":"read","text":"<p>\u25b8 read(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p> <p>Reads the resource</p>"},{"location":"api/solid/classes/Resource/#returns_34","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p>"},{"location":"api/solid/classes/Resource/#defined-in_43","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:365</p>"},{"location":"api/solid/classes/Resource/#readifunfetched","title":"readIfUnfetched","text":"<p>\u25b8 readIfUnfetched(): <code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p> <p>Reads the resource if it isn't fetched yet</p>"},{"location":"api/solid/classes/Resource/#returns_35","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;&gt;</p> <p>a ReadResult</p>"},{"location":"api/solid/classes/Resource/#defined-in_44","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:373</p>"},{"location":"api/solid/classes/Resource/#removealllisteners","title":"removeAllListeners","text":"<p>\u25b8 removeAllListeners\\&lt;<code>E</code>&gt;(<code>event?</code>): <code>this</code></p>"},{"location":"api/solid/classes/Resource/#type-parameters_10","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_13","title":"Parameters","text":"Name Type <code>event?</code> <code>E</code>"},{"location":"api/solid/classes/Resource/#returns_36","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_12","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).removeAllListeners</p>"},{"location":"api/solid/classes/Resource/#defined-in_45","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:29</p>"},{"location":"api/solid/classes/Resource/#removelistener","title":"removeListener","text":"<p>\u25b8 removeListener\\&lt;<code>E</code>&gt;(<code>event</code>, <code>listener</code>): <code>this</code></p>"},{"location":"api/solid/classes/Resource/#type-parameters_11","title":"Type parameters","text":"Name Type <code>E</code> extends <code>\"update\"</code>"},{"location":"api/solid/classes/Resource/#parameters_14","title":"Parameters","text":"Name Type <code>event</code> <code>E</code> <code>listener</code> { <code>update</code>: () =&gt; <code>void</code>  }[<code>E</code>]"},{"location":"api/solid/classes/Resource/#returns_37","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_13","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).removeListener</p>"},{"location":"api/solid/classes/Resource/#defined-in_46","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:30</p>"},{"location":"api/solid/classes/Resource/#setmaxlisteners","title":"setMaxListeners","text":"<p>\u25b8 setMaxListeners(<code>maxListeners</code>): <code>this</code></p>"},{"location":"api/solid/classes/Resource/#parameters_15","title":"Parameters","text":"Name Type <code>maxListeners</code> <code>number</code>"},{"location":"api/solid/classes/Resource/#returns_38","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/Resource/#inherited-from_14","title":"Inherited from","text":"<p>(EventEmitter as new () =&gt; TypedEmitter\\&lt;{   update: () =&gt; void; }&gt;).setMaxListeners</p>"},{"location":"api/solid/classes/Resource/#defined-in_47","title":"Defined in","text":"<p>node_modules/typed-emitter/index.d.ts:40</p>"},{"location":"api/solid/classes/Resource/#setwac","title":"setWac","text":"<p>\u25b8 setWac(<code>wacRule</code>): <code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>SetWacRuleSuccess</code>&gt;</p> <p>Sets access rules for a specific resource</p>"},{"location":"api/solid/classes/Resource/#parameters_16","title":"Parameters","text":"Name Type Description <code>wacRule</code> <code>WacRule</code> the access rules to set"},{"location":"api/solid/classes/Resource/#returns_39","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>NotFoundHttpError</code> | <code>SetWacRuleSuccess</code>&gt;</p> <p>SetWacRuleResult</p> <p><code>Example</code></p> <pre><code>const resource = ldoSolidDataset\n  .getResource(\"https://example.com/container/resource.ttl\");\nconst wacRulesResult = await resource.setWac({\n  public: {\n    read: true,\n    write: false,\n    append: false,\n    control: false\n  },\n  authenticated: {\n    read: true,\n    write: false,\n    append: true,\n    control: false\n  },\n  agent: {\n    \"https://example.com/person1/profile/card#me\": {\n      read: true,\n      write: true,\n      append: true,\n      control: true\n    }\n  }\n});\n</code></pre>"},{"location":"api/solid/classes/Resource/#defined-in_48","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:669</p>"},{"location":"api/solid/classes/Resource/#toreadresult","title":"toReadResult","text":"<p>\u25b8 toReadResult(): <code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;</p> <p>Converts the current state of this resource to a readResult</p>"},{"location":"api/solid/classes/Resource/#returns_40","title":"Returns","text":"<p><code>ResourceResult</code>\\&lt;<code>UnexpectedResourceError</code> | <code>NoncompliantPodError</code> | <code>ServerHttpError</code> | <code>UnexpectedHttpError</code> | <code>UnauthenticatedHttpError</code> | <code>UnauthorizedHttpError</code> | <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code>, <code>Leaf</code> | <code>Container</code>&gt;</p> <p>a ReadResult</p>"},{"location":"api/solid/classes/Resource/#defined-in_49","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:357</p>"},{"location":"api/solid/classes/Resource/#updatewithcreatesuccess","title":"updateWithCreateSuccess","text":"<p>\u25b8 updateWithCreateSuccess(<code>result</code>): <code>void</code></p> <p>A helper method updates this resource's internal state upon create success</p>"},{"location":"api/solid/classes/Resource/#parameters_17","title":"Parameters","text":"Name Type <code>result</code> <code>ResourceSuccess</code>"},{"location":"api/solid/classes/Resource/#returns_41","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Resource/#defined-in_50","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:424</p>"},{"location":"api/solid/classes/Resource/#updatewithdeletesuccess","title":"updateWithDeleteSuccess","text":"<p>\u25b8 updateWithDeleteSuccess(<code>_result</code>): <code>void</code></p> <p>A helper method updates this resource's internal state upon delete success</p>"},{"location":"api/solid/classes/Resource/#parameters_18","title":"Parameters","text":"Name Type <code>_result</code> <code>DeleteSuccess</code>"},{"location":"api/solid/classes/Resource/#returns_42","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Resource/#defined-in_51","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:395</p>"},{"location":"api/solid/classes/Resource/#updatewithreadsuccess","title":"updateWithReadSuccess","text":"<p>\u25b8 updateWithReadSuccess(<code>result</code>): <code>void</code></p> <p>A helper method updates this resource's internal state upon read success</p>"},{"location":"api/solid/classes/Resource/#parameters_19","title":"Parameters","text":"Name Type Description <code>result</code> <code>ReadSuccess</code> the result of the read success"},{"location":"api/solid/classes/Resource/#returns_43","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/Resource/#defined-in_52","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:333</p>"},{"location":"api/solid/classes/SolidLdoDataset/","title":"Class: SolidLdoDataset","text":"<p>A SolidLdoDataset has all the functionality of an LdoDataset with the added functionality of keeping track of fetched Solid Resources.</p> <p>It is recommended to use the createSolidLdoDataset to initialize this class</p> <p><code>Example</code></p> <pre><code>import { createSolidLdoDataset } from \"@ldo/solid\";\nimport { ProfileShapeType } from \"./.ldo/profile.shapeTypes.ts\"\n\n// ...\n\nconst solidLdoDataset = createSolidLdoDataset();\n\nconst profileDocument = solidLdoDataset\n  .getResource(\"https://example.com/profile\");\nawait profileDocument.read();\n\nconst profile = solidLdoDataset\n  .using(ProfileShapeType)\n  .fromSubject(\"https://example.com/profile#me\");\n</code></pre>"},{"location":"api/solid/classes/SolidLdoDataset/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>LdoDataset</code></li> </ul> <p>\u21b3 <code>SolidLdoDataset</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#constructors","title":"Constructors","text":""},{"location":"api/solid/classes/SolidLdoDataset/#constructor","title":"constructor","text":"<p>\u2022 new SolidLdoDataset(<code>context</code>, <code>datasetFactory</code>, <code>transactionDatasetFactory</code>, <code>initialDataset?</code>): <code>SolidLdoDataset</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters","title":"Parameters","text":"Name Type Description <code>context</code> <code>SolidLdoDatasetContext</code> SolidLdoDatasetContext <code>datasetFactory</code> <code>DatasetFactory</code>\\&lt;<code>Quad</code>, <code>Quad</code>, <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;&gt; An optional dataset factory <code>transactionDatasetFactory</code> <code>ITransactionDatasetFactory</code>\\&lt;<code>Quad</code>&gt; A factory for creating transaction datasets <code>initialDataset?</code> <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt; A set of triples to initialize this dataset"},{"location":"api/solid/classes/SolidLdoDataset/#returns","title":"Returns","text":"<p><code>SolidLdoDataset</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#overrides","title":"Overrides","text":"<p>LdoDataset.constructor</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in","title":"Defined in","text":"<p>packages/solid/src/SolidLdoDataset.ts:51</p>"},{"location":"api/solid/classes/SolidLdoDataset/#properties","title":"Properties","text":""},{"location":"api/solid/classes/SolidLdoDataset/#context","title":"context","text":"<p>\u2022 context: <code>SolidLdoDatasetContext</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/SolidLdoDataset.ts:43</p>"},{"location":"api/solid/classes/SolidLdoDataset/#dataset","title":"dataset","text":"<p>\u2022 <code>Protected</code> dataset: <code>DatasetCore</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>The main backing dataset</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from","title":"Inherited from","text":"<p>LdoDataset.dataset</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_2","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:22</p>"},{"location":"api/solid/classes/SolidLdoDataset/#datasetcorefactory","title":"datasetCoreFactory","text":"<p>\u2022 <code>Protected</code> datasetCoreFactory: <code>DatasetCoreFactory</code>\\&lt;<code>Quad</code>, <code>Quad</code>, <code>DatasetCore</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;&gt;</p> <p>A factory that generates datasets for the methods</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_1","title":"Inherited from","text":"<p>LdoDataset.datasetCoreFactory</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_3","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:27</p>"},{"location":"api/solid/classes/SolidLdoDataset/#datasetfactory","title":"datasetFactory","text":"<p>\u2022 <code>Protected</code> datasetFactory: <code>DatasetFactory</code>\\&lt;<code>Quad</code>, <code>Quad</code>, <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;&gt;</p> <p>DatasetFactory for creating new datasets</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_2","title":"Inherited from","text":"<p>LdoDataset.datasetFactory</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_4","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:31</p>"},{"location":"api/solid/classes/SolidLdoDataset/#eventemitter","title":"eventEmitter","text":"<p>\u2022 <code>Protected</code> eventEmitter: <code>EventEmitter</code></p> <p>The underlying event emitter</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_3","title":"Inherited from","text":"<p>LdoDataset.eventEmitter</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_5","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:36</p>"},{"location":"api/solid/classes/SolidLdoDataset/#transactiondatasetfactory","title":"transactionDatasetFactory","text":"<p>\u2022 <code>Protected</code> transactionDatasetFactory: <code>ITransactionDatasetFactory</code>\\&lt;<code>Quad</code>&gt;</p> <p>The underlying dataset factory for creating transaction datasets</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_4","title":"Inherited from","text":"<p>LdoDataset.transactionDatasetFactory</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_6","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:40</p>"},{"location":"api/solid/classes/SolidLdoDataset/#accessors","title":"Accessors","text":""},{"location":"api/solid/classes/SolidLdoDataset/#size","title":"size","text":"<p>\u2022 <code>get</code> size(): <code>number</code></p> <p>A non-negative integer that specifies the number of quads in the set.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_1","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_5","title":"Inherited from","text":"<p>LdoDataset.size</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_7","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:355</p>"},{"location":"api/solid/classes/SolidLdoDataset/#methods","title":"Methods","text":""},{"location":"api/solid/classes/SolidLdoDataset/#iterator","title":"[iterator]","text":"<p>\u25b8 [iterator](): <code>Iterator</code>\\&lt;<code>Quad</code>, <code>Quad</code>, <code>undefined</code>&gt;</p> <p>Returns an iterator</p>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_2","title":"Returns","text":"<p><code>Iterator</code>\\&lt;<code>Quad</code>, <code>Quad</code>, <code>undefined</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_6","title":"Inherited from","text":"<p>LdoDataset.[iterator]</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_8","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:391</p>"},{"location":"api/solid/classes/SolidLdoDataset/#add","title":"add","text":"<p>\u25b8 add(<code>quad</code>): <code>this</code></p> <p>Adds the specified quad to the dataset. Existing quads, as defined in Quad.equals, will be ignored.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_1","title":"Parameters","text":"Name Type <code>quad</code> <code>Quad</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_3","title":"Returns","text":"<p><code>this</code></p> <p>the dataset instance it was called on.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_7","title":"Inherited from","text":"<p>LdoDataset.add</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_9","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:141</p>"},{"location":"api/solid/classes/SolidLdoDataset/#addall","title":"addAll","text":"<p>\u25b8 addAll(<code>quads</code>): <code>this</code></p> <p>Imports the quads into this dataset. This method differs from Dataset.union in that it adds all quads to the current instance, rather than combining quads and the current instance to create a new instance.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_2","title":"Parameters","text":"Name Type <code>quads</code> <code>Quad</code>[] | <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_4","title":"Returns","text":"<p><code>this</code></p> <p>the dataset instance it was called on.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_8","title":"Inherited from","text":"<p>LdoDataset.addAll</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_10","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:86</p>"},{"location":"api/solid/classes/SolidLdoDataset/#addlistener","title":"addListener","text":"<p>\u25b8 addListener(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Alias for emitter.on(eventName, listener).</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_3","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_5","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_9","title":"Inherited from","text":"<p>LdoDataset.addListener</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_11","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:248</p>"},{"location":"api/solid/classes/SolidLdoDataset/#bulk","title":"bulk","text":"<p>\u25b8 bulk(<code>changed</code>): <code>this</code></p> <p>Bulk add and remove triples</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_4","title":"Parameters","text":"Name Type <code>changed</code> <code>DatasetChanges</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_6","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_10","title":"Inherited from","text":"<p>LdoDataset.bulk</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_12","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:100</p>"},{"location":"api/solid/classes/SolidLdoDataset/#contains","title":"contains","text":"<p>\u25b8 contains(<code>other</code>): <code>boolean</code></p> <p>Returns true if the current instance is a superset of the given dataset; differently put: if the given dataset is a subset of, is contained in the current dataset. Blank Nodes will be normalized.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_5","title":"Parameters","text":"Name Type <code>other</code> <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_7","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_11","title":"Inherited from","text":"<p>LdoDataset.contains</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_13","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:68</p>"},{"location":"api/solid/classes/SolidLdoDataset/#createdata","title":"createData","text":"<p>\u25b8 createData\\&lt;<code>Type</code>&gt;(<code>shapeType</code>, <code>subject</code>, <code>resource</code>, <code>...additionalResources</code>): <code>Type</code></p> <p>Shorthand for solidLdoDataset   .usingType(shapeType)   .write(...resources.map((r) =&gt; r.uri))   .fromSubject(subject);</p>"},{"location":"api/solid/classes/SolidLdoDataset/#type-parameters","title":"Type parameters","text":"Name Type <code>Type</code> extends <code>LdoBase</code>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_6","title":"Parameters","text":"Name Type Description <code>shapeType</code> <code>ShapeType</code>\\&lt;<code>Type</code>&gt; The shapetype to represent the data <code>subject</code> <code>string</code> | <code>SubjectNode</code> A subject URI <code>resource</code> <code>Resource</code> - <code>...additionalResources</code> <code>Resource</code>[] -"},{"location":"api/solid/classes/SolidLdoDataset/#returns_8","title":"Returns","text":"<p><code>Type</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_14","title":"Defined in","text":"<p>packages/solid/src/SolidLdoDataset.ts:103</p>"},{"location":"api/solid/classes/SolidLdoDataset/#delete","title":"delete","text":"<p>\u25b8 delete(<code>quad</code>): <code>this</code></p> <p>Removes the specified quad from the dataset. This method returns the dataset instance it was called on.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_7","title":"Parameters","text":"Name Type <code>quad</code> <code>Quad</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_9","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_12","title":"Inherited from","text":"<p>LdoDataset.delete</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_15","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:154</p>"},{"location":"api/solid/classes/SolidLdoDataset/#deletematches","title":"deleteMatches","text":"<p>\u25b8 deleteMatches(<code>subject?</code>, <code>predicate?</code>, <code>object?</code>, <code>graph?</code>): <code>this</code></p> <p>This method removes the quads in the current instance that match the given arguments. The logic described in Quad Matching is applied for each quad in this dataset to select the quads which will be deleted.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_8","title":"Parameters","text":"Name Type <code>subject?</code> <code>Term</code> <code>predicate?</code> <code>Term</code> <code>object?</code> <code>Term</code> <code>graph?</code> <code>Term</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_10","title":"Returns","text":"<p><code>this</code></p> <p>the dataset instance it was called on.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_13","title":"Inherited from","text":"<p>LdoDataset.deleteMatches</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_16","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:121</p>"},{"location":"api/solid/classes/SolidLdoDataset/#difference","title":"difference","text":"<p>\u25b8 difference(<code>other</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>Returns a new dataset that contains alls quads from the current dataset, not included in the given dataset.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_9","title":"Parameters","text":"Name Type <code>other</code> <code>DatasetCore</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_11","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_14","title":"Inherited from","text":"<p>LdoDataset.difference</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_17","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:105</p>"},{"location":"api/solid/classes/SolidLdoDataset/#emit","title":"emit","text":"<p>\u25b8 emit(<code>eventName</code>, <code>changes</code>): <code>boolean</code></p> <p>Synchronously calls each of the listeners registered for the event named eventName, in the order they were registered, passing the supplied arguments to each.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_10","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>changes</code> <code>DatasetChanges</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_12","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the event had listeners, false otherwise.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_15","title":"Inherited from","text":"<p>LdoDataset.emit</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_18","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:262</p>"},{"location":"api/solid/classes/SolidLdoDataset/#equals","title":"equals","text":"<p>\u25b8 equals(<code>other</code>): <code>boolean</code></p> <p>Returns true if the current instance contains the same graph structure as the given dataset.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_11","title":"Parameters","text":"Name Type <code>other</code> <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_13","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_16","title":"Inherited from","text":"<p>LdoDataset.equals</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_19","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:121</p>"},{"location":"api/solid/classes/SolidLdoDataset/#eventnames","title":"eventNames","text":"<p>\u25b8 eventNames(): <code>QuadMatch</code>[]</p> <p>Returns an array listing the events for which the emitter has registered listeners. The values in the array are strings or Symbols.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_14","title":"Returns","text":"<p><code>QuadMatch</code>[]</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_17","title":"Inherited from","text":"<p>LdoDataset.eventNames</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_20","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:272</p>"},{"location":"api/solid/classes/SolidLdoDataset/#every","title":"every","text":"<p>\u25b8 every(<code>iteratee</code>): <code>boolean</code></p> <p>Universal quantification method, tests whether every quad in the dataset passes the test implemented by the provided iteratee. This method immediately returns boolean false once a quad that does not pass the test is found. This method always returns boolean true on an empty dataset. Note: This method is aligned with Array.prototype.every() in ECMAScript-262.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_12","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>boolean</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_15","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_18","title":"Inherited from","text":"<p>LdoDataset.every</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_21","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:140</p>"},{"location":"api/solid/classes/SolidLdoDataset/#filter","title":"filter","text":"<p>\u25b8 filter(<code>iteratee</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>Creates a new dataset with all the quads that pass the test implemented by the provided iteratee. Note: This method is aligned with Array.prototype.filter() in ECMAScript-262.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_13","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>boolean</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_16","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_19","title":"Inherited from","text":"<p>LdoDataset.filter</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_22","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:154</p>"},{"location":"api/solid/classes/SolidLdoDataset/#foreach","title":"forEach","text":"<p>\u25b8 forEach(<code>iteratee</code>): <code>void</code></p> <p>Executes the provided iteratee once on each quad in the dataset. Note: This method is aligned with Array.prototype.forEach() in ECMAScript-262.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_14","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>void</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_17","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_20","title":"Inherited from","text":"<p>LdoDataset.forEach</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_23","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:171</p>"},{"location":"api/solid/classes/SolidLdoDataset/#getmaxlisteners","title":"getMaxListeners","text":"<p>\u25b8 getMaxListeners(): <code>number</code></p> <p>Returns the current max listener value for the EventEmitter which is either set by emitter.setMaxListeners(n) or defaults to events.defaultMaxListeners.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_18","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_21","title":"Inherited from","text":"<p>LdoDataset.getMaxListeners</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_24","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:281</p>"},{"location":"api/solid/classes/SolidLdoDataset/#getresource","title":"getResource","text":"<p>\u25b8 getResource(<code>uri</code>, <code>options?</code>): <code>Container</code></p> <p>Retireves a representation (either a LeafResource or a ContainerResource) of a Solid Resource at the given URI. This resource represents the current state of the resource: whether it is currently fetched or in the process of fetching as well as some information about it.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_15","title":"Parameters","text":"Name Type Description <code>uri</code> <code>ContainerUri</code> the URI of the resource <code>options?</code> <code>ResourceGetterOptions</code> Special options for getting the resource"},{"location":"api/solid/classes/SolidLdoDataset/#returns_19","title":"Returns","text":"<p><code>Container</code></p> <p>a Leaf or Container Resource</p> <p><code>Example</code></p> <pre><code>const profileDocument = solidLdoDataset\n  .getResource(\"https://example.com/profile\");\n</code></pre>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_25","title":"Defined in","text":"<p>packages/solid/src/SolidLdoDataset.ts:78</p> <p>\u25b8 getResource(<code>uri</code>, <code>options?</code>): <code>Leaf</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_16","title":"Parameters","text":"Name Type <code>uri</code> <code>LeafUri</code> <code>options?</code> <code>ResourceGetterOptions</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_20","title":"Returns","text":"<p><code>Leaf</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_26","title":"Defined in","text":"<p>packages/solid/src/SolidLdoDataset.ts:79</p> <p>\u25b8 getResource(<code>uri</code>, <code>options?</code>): <code>Leaf</code> | <code>Container</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_17","title":"Parameters","text":"Name Type <code>uri</code> <code>string</code> <code>options?</code> <code>ResourceGetterOptions</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_21","title":"Returns","text":"<p><code>Leaf</code> | <code>Container</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_27","title":"Defined in","text":"<p>packages/solid/src/SolidLdoDataset.ts:80</p>"},{"location":"api/solid/classes/SolidLdoDataset/#has","title":"has","text":"<p>\u25b8 has(<code>quad</code>): <code>boolean</code></p> <p>Determines whether a dataset includes a certain quad, returning true or false as appropriate.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_18","title":"Parameters","text":"Name Type <code>quad</code> <code>Quad</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_22","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_22","title":"Inherited from","text":"<p>LdoDataset.has</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_28","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:384</p>"},{"location":"api/solid/classes/SolidLdoDataset/#import","title":"import","text":"<p>\u25b8 import(<code>stream</code>): <code>Promise</code>\\&lt;<code>SolidLdoDataset</code>&gt;</p> <p>Imports all quads from the given stream into the dataset. The stream events end and error are wrapped in a Promise.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_19","title":"Parameters","text":"Name Type <code>stream</code> <code>Stream</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_23","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>SolidLdoDataset</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_23","title":"Inherited from","text":"<p>LdoDataset.import</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_29","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:182</p>"},{"location":"api/solid/classes/SolidLdoDataset/#intersection","title":"intersection","text":"<p>\u25b8 intersection(<code>other</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>Returns a new dataset containing alls quads from the current dataset that are also included in the given dataset.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_20","title":"Parameters","text":"Name Type <code>other</code> <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_24","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_24","title":"Inherited from","text":"<p>LdoDataset.intersection</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_30","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:199</p>"},{"location":"api/solid/classes/SolidLdoDataset/#listenercount","title":"listenerCount","text":"<p>\u25b8 listenerCount(<code>eventName</code>): <code>number</code></p> <p>Returns the number of listeners listening to the event named eventName.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_21","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_25","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_25","title":"Inherited from","text":"<p>LdoDataset.listenerCount</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_31","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:288</p>"},{"location":"api/solid/classes/SolidLdoDataset/#listeners","title":"listeners","text":"<p>\u25b8 listeners(<code>eventName</code>): <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;[]</p> <p>Returns a copy of the array of listeners for the event named eventName.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_22","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_26","title":"Returns","text":"<p><code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;[]</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_26","title":"Inherited from","text":"<p>LdoDataset.listeners</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_32","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:295</p>"},{"location":"api/solid/classes/SolidLdoDataset/#map","title":"map","text":"<p>\u25b8 map(<code>iteratee</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>Returns a new dataset containing all quads returned by applying iteratee to each quad in the current dataset.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_23","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>Quad</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_27","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_27","title":"Inherited from","text":"<p>LdoDataset.map</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_33","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:217</p>"},{"location":"api/solid/classes/SolidLdoDataset/#match","title":"match","text":"<p>\u25b8 match(<code>subject?</code>, <code>predicate?</code>, <code>object?</code>, <code>graph?</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>This method returns a new dataset that is comprised of all quads in the current instance matching the given arguments. The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_24","title":"Parameters","text":"Name Type <code>subject?</code> <code>null</code> | <code>Term</code> <code>predicate?</code> <code>null</code> | <code>Term</code> <code>object?</code> <code>null</code> | <code>Term</code> <code>graph?</code> <code>null</code> | <code>Term</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_28","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>a Dataset with matching triples</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_28","title":"Inherited from","text":"<p>LdoDataset.match</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_34","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:340</p>"},{"location":"api/solid/classes/SolidLdoDataset/#off","title":"off","text":"<p>\u25b8 off(<code>eventName</code>, <code>listener</code>): <code>void</code></p> <p>Alias for emitter.removeListener()</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_25","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_29","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_29","title":"Inherited from","text":"<p>LdoDataset.off</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_35","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:304</p>"},{"location":"api/solid/classes/SolidLdoDataset/#on","title":"on","text":"<p>\u25b8 on(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Adds the listener function to the end of the listeners array for the event named eventName. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of eventName and listener will result in the listener being added, and called, multiple times.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_26","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_30","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_30","title":"Inherited from","text":"<p>LdoDataset.on</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_36","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:314</p>"},{"location":"api/solid/classes/SolidLdoDataset/#once","title":"once","text":"<p>\u25b8 once(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Adds a one-time listener function for the event named eventName. The next time eventName is triggered, this listener is removed and then invoked.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_27","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_31","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_31","title":"Inherited from","text":"<p>LdoDataset.once</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_37","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:330</p>"},{"location":"api/solid/classes/SolidLdoDataset/#prependlistener","title":"prependListener","text":"<p>\u25b8 prependListener(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Adds the listener function to the beginning of the listeners array for the event named eventName. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of eventName and listener will result in the listener being added, and called, multiple times.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_28","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_32","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_32","title":"Inherited from","text":"<p>LdoDataset.prependListener</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_38","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:341</p>"},{"location":"api/solid/classes/SolidLdoDataset/#prependoncelistener","title":"prependOnceListener","text":"<p>\u25b8 prependOnceListener(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Adds a one-time listener function for the event named eventName to the beginning of the listeners array. The next time eventName is triggered, this listener is removed, and then invoked.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_29","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_33","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_33","title":"Inherited from","text":"<p>LdoDataset.prependOnceListener</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_39","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:352</p>"},{"location":"api/solid/classes/SolidLdoDataset/#rawlisteners","title":"rawListeners","text":"<p>\u25b8 rawListeners(<code>eventName</code>): <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;[]</p> <p>Returns a copy of the array of listeners for the event named eventName, including any wrappers (such as those created by .once()).</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_30","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_34","title":"Returns","text":"<p><code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;[]</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_34","title":"Inherited from","text":"<p>LdoDataset.rawListeners</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_40","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:406</p>"},{"location":"api/solid/classes/SolidLdoDataset/#reduce","title":"reduce","text":"<p>\u25b8 reduce\\&lt;<code>A</code>&gt;(<code>iteratee</code>, <code>initialValue?</code>): <code>A</code></p> <p>This method calls the iteratee on each quad of the DatasetCore. The first time the iteratee is called, the accumulator value is the initialValue or, if not given, equals to the first quad of the Dataset. The return value of the iteratee is used as accumulator value for the next calls. This method returns the return value of the last iteratee call. Note: This method is aligned with Array.prototype.reduce() in ECMAScript-262.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#type-parameters_1","title":"Type parameters","text":"Name Type <code>A</code> <code>unknown</code>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_31","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>accumulator</code>: <code>A</code>, <code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>A</code> <code>initialValue?</code> <code>A</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_35","title":"Returns","text":"<p><code>A</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_35","title":"Inherited from","text":"<p>LdoDataset.reduce</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_41","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:234</p>"},{"location":"api/solid/classes/SolidLdoDataset/#removealllisteners","title":"removeAllListeners","text":"<p>\u25b8 removeAllListeners(<code>eventName</code>): <code>this</code></p> <p>Removes all listeners, or those of the specified eventName.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_32","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_36","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_36","title":"Inherited from","text":"<p>LdoDataset.removeAllListeners</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_42","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:366</p>"},{"location":"api/solid/classes/SolidLdoDataset/#removelistener","title":"removeListener","text":"<p>\u25b8 removeListener(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Removes the specified listener from the listener array for the event named eventName.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_33","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_37","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_37","title":"Inherited from","text":"<p>LdoDataset.removeListener</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_43","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:374</p>"},{"location":"api/solid/classes/SolidLdoDataset/#removelistenerfromallevents","title":"removeListenerFromAllEvents","text":"<p>\u25b8 removeListenerFromAllEvents(<code>listener</code>): <code>this</code></p> <p>Removes the specified listener from the listener array for the event named eventName.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_34","title":"Parameters","text":"Name Type <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_38","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_38","title":"Inherited from","text":"<p>LdoDataset.removeListenerFromAllEvents</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_44","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:385</p>"},{"location":"api/solid/classes/SolidLdoDataset/#setmaxlisteners","title":"setMaxListeners","text":"<p>\u25b8 setMaxListeners(<code>n</code>): <code>this</code></p> <p>By default EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default that helps finding memory leaks. The emitter.setMaxListeners() method allows the limit to be modified for this specific EventEmitter instance. The value can be set to Infinity (or 0) to indicate an unlimited number of listeners.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_35","title":"Parameters","text":"Name Type <code>n</code> <code>number</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_39","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_39","title":"Inherited from","text":"<p>LdoDataset.setMaxListeners</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_45","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:398</p>"},{"location":"api/solid/classes/SolidLdoDataset/#some","title":"some","text":"<p>\u25b8 some(<code>iteratee</code>): <code>boolean</code></p> <p>Existential quantification method, tests whether some quads in the dataset pass the test implemented by the provided iteratee. Note: This method is aligned with Array.prototype.some() in ECMAScript-262.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_36","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>boolean</code>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_40","title":"Returns","text":"<p><code>boolean</code></p> <p>boolean true once a quad that passes the test is found.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_40","title":"Inherited from","text":"<p>LdoDataset.some</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_46","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:259</p>"},{"location":"api/solid/classes/SolidLdoDataset/#starttransaction","title":"startTransaction","text":"<p>\u25b8 startTransaction(): <code>SolidLdoTransactionDataset</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_41","title":"Returns","text":"<p><code>SolidLdoTransactionDataset</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#overrides_1","title":"Overrides","text":"<p>LdoDataset.startTransaction</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_47","title":"Defined in","text":"<p>packages/solid/src/SolidLdoDataset.ts:85</p>"},{"location":"api/solid/classes/SolidLdoDataset/#toarray","title":"toArray","text":"<p>\u25b8 toArray(): <code>Quad</code>[]</p> <p>Returns the set of quads within the dataset as a host language native sequence, for example an Array in ECMAScript-262. Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_42","title":"Returns","text":"<p><code>Quad</code>[]</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_41","title":"Inherited from","text":"<p>LdoDataset.toArray</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_48","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:272</p>"},{"location":"api/solid/classes/SolidLdoDataset/#tocanonical","title":"toCanonical","text":"<p>\u25b8 toCanonical(): <code>string</code></p> <p>Returns an N-Quads string representation of the dataset, preprocessed with RDF Dataset Normalization algorithm.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_43","title":"Returns","text":"<p><code>string</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_42","title":"Inherited from","text":"<p>LdoDataset.toCanonical</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_49","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:283</p>"},{"location":"api/solid/classes/SolidLdoDataset/#tostream","title":"toStream","text":"<p>\u25b8 toStream(): <code>Stream</code>\\&lt;<code>Quad</code>&gt;</p> <p>Returns a stream that contains all quads of the dataset.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_44","title":"Returns","text":"<p><code>Stream</code>\\&lt;<code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_43","title":"Inherited from","text":"<p>LdoDataset.toStream</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_50","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:290</p>"},{"location":"api/solid/classes/SolidLdoDataset/#tostring","title":"toString","text":"<p>\u25b8 toString(): <code>string</code></p> <p>Returns an N-Quads string representation of the dataset. No prior normalization is required, therefore the results for the same quads may vary depending on the Dataset implementation.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#returns_45","title":"Returns","text":"<p><code>string</code></p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_44","title":"Inherited from","text":"<p>LdoDataset.toString</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_51","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:311</p>"},{"location":"api/solid/classes/SolidLdoDataset/#union","title":"union","text":"<p>\u25b8 union(<code>other</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>Returns a new Dataset that is a concatenation of this dataset and the quads given as an argument.</p>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_37","title":"Parameters","text":"Name Type <code>other</code> <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoDataset/#returns_46","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_45","title":"Inherited from","text":"<p>LdoDataset.union</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_52","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:319</p>"},{"location":"api/solid/classes/SolidLdoDataset/#usingtype","title":"usingType","text":"<p>\u25b8 usingType\\&lt;<code>Type</code>&gt;(<code>shapeType</code>): <code>LdoBuilder</code>\\&lt;<code>Type</code>&gt;</p> <p>Creates an LdoBuilder for a given shapeType</p>"},{"location":"api/solid/classes/SolidLdoDataset/#type-parameters_2","title":"Type parameters","text":"Name Type <code>Type</code> extends <code>LdoBase</code>"},{"location":"api/solid/classes/SolidLdoDataset/#parameters_38","title":"Parameters","text":"Name Type Description <code>shapeType</code> <code>ShapeType</code>\\&lt;<code>Type</code>&gt; A ShapeType"},{"location":"api/solid/classes/SolidLdoDataset/#returns_47","title":"Returns","text":"<p><code>LdoBuilder</code>\\&lt;<code>Type</code>&gt;</p> <p>A builder for the given type</p>"},{"location":"api/solid/classes/SolidLdoDataset/#inherited-from_46","title":"Inherited from","text":"<p>LdoDataset.usingType</p>"},{"location":"api/solid/classes/SolidLdoDataset/#defined-in_53","title":"Defined in","text":"<p>packages/ldo/src/LdoDataset.ts:37</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/","title":"Class: SolidLdoTransactionDataset","text":"<p>A SolidLdoTransactionDataset has all the functionality of a SolidLdoDataset and represents a transaction to the parent SolidLdoDataset.</p> <p>It is recommended to use the <code>startTransaction</code> method on a SolidLdoDataset to initialize this class</p> <p><code>Example</code></p> <pre><code>import { createSolidLdoDataset } from \"@ldo/solid\";\nimport { ProfileShapeType } from \"./.ldo/profile.shapeTypes.ts\"\n\n// ...\n\nconst solidLdoDataset = createSolidLdoDataset();\n\nconst profileDocument = solidLdoDataset\n  .getResource(\"https://example.com/profile\");\nawait profileDocument.read();\n\nconst transaction = solidLdoDataset.startTransaction();\n\nconst profile = transaction\n  .using(ProfileShapeType)\n  .fromSubject(\"https://example.com/profile#me\");\nprofile.name = \"Some Name\";\nawait transaction.commitToPod();\n</code></pre>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>LdoTransactionDataset</code></li> </ul> <p>\u21b3 <code>SolidLdoTransactionDataset</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#implements","title":"Implements","text":"<ul> <li><code>ISolidLdoDataset</code></li> </ul>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#constructors","title":"Constructors","text":""},{"location":"api/solid/classes/SolidLdoTransactionDataset/#constructor","title":"constructor","text":"<p>\u2022 new SolidLdoTransactionDataset(<code>parentDataset</code>, <code>context</code>, <code>datasetFactory</code>, <code>transactionDatasetFactory</code>): <code>SolidLdoTransactionDataset</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters","title":"Parameters","text":"Name Type Description <code>parentDataset</code> <code>SolidLdoDataset</code> - <code>context</code> <code>SolidLdoDatasetContext</code> SolidLdoDatasetContext <code>datasetFactory</code> <code>DatasetFactory</code>\\&lt;<code>Quad</code>, <code>Quad</code>, <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;&gt; An optional dataset factory <code>transactionDatasetFactory</code> <code>ITransactionDatasetFactory</code>\\&lt;<code>Quad</code>&gt; A factory for creating transaction datasets"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns","title":"Returns","text":"<p><code>SolidLdoTransactionDataset</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#overrides","title":"Overrides","text":"<p>LdoTransactionDataset.constructor</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in","title":"Defined in","text":"<p>packages/solid/src/SolidLdoTransactionDataset.ts:77</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#properties","title":"Properties","text":""},{"location":"api/solid/classes/SolidLdoTransactionDataset/#context","title":"context","text":"<p>\u2022 context: <code>SolidLdoDatasetContext</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/SolidLdoTransactionDataset.ts:69</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#dataset","title":"dataset","text":"<p>\u2022 <code>Protected</code> dataset: <code>DatasetCore</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>The main backing dataset</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from","title":"Inherited from","text":"<p>LdoTransactionDataset.dataset</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_2","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:22</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#datasetcorefactory","title":"datasetCoreFactory","text":"<p>\u2022 <code>Protected</code> datasetCoreFactory: <code>DatasetCoreFactory</code>\\&lt;<code>Quad</code>, <code>Quad</code>, <code>DatasetCore</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;&gt;</p> <p>A factory that generates datasets for the methods</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_1","title":"Inherited from","text":"<p>LdoTransactionDataset.datasetCoreFactory</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_3","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:27</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#datasetfactory","title":"datasetFactory","text":"<p>\u2022 <code>Protected</code> datasetFactory: <code>DatasetFactory</code>\\&lt;<code>Quad</code>, <code>Quad</code>, <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;&gt;</p> <p>DatasetFactory for creating new datasets</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_2","title":"Inherited from","text":"<p>LdoTransactionDataset.datasetFactory</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_4","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:31</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#eventemitter","title":"eventEmitter","text":"<p>\u2022 <code>Protected</code> eventEmitter: <code>EventEmitter</code></p> <p>The underlying event emitter</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_3","title":"Inherited from","text":"<p>LdoTransactionDataset.eventEmitter</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_5","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:36</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parentdataset","title":"parentDataset","text":"<p>\u2022 <code>Readonly</code> parentDataset: <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>The parent dataset that will be updated upon commit</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_4","title":"Inherited from","text":"<p>LdoTransactionDataset.parentDataset</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_6","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:20</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#transactiondatasetfactory","title":"transactionDatasetFactory","text":"<p>\u2022 <code>Protected</code> transactionDatasetFactory: <code>ITransactionDatasetFactory</code>\\&lt;<code>Quad</code>&gt;</p> <p>The underlying dataset factory for creating transaction datasets</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_5","title":"Inherited from","text":"<p>LdoTransactionDataset.transactionDatasetFactory</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_7","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:40</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#accessors","title":"Accessors","text":""},{"location":"api/solid/classes/SolidLdoTransactionDataset/#size","title":"size","text":"<p>\u2022 <code>get</code> size(): <code>number</code></p> <p>A non-negative integer that specifies the number of quads in the set.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_1","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_6","title":"Inherited from","text":"<p>LdoTransactionDataset.size</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_8","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:134</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#methods","title":"Methods","text":""},{"location":"api/solid/classes/SolidLdoTransactionDataset/#iterator","title":"[iterator]","text":"<p>\u25b8 [iterator](): <code>Iterator</code>\\&lt;<code>Quad</code>, <code>any</code>, <code>undefined</code>&gt;</p> <p>Returns an iterator</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_2","title":"Returns","text":"<p><code>Iterator</code>\\&lt;<code>Quad</code>, <code>any</code>, <code>undefined</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_7","title":"Inherited from","text":"<p>LdoTransactionDataset.[iterator]</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_9","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:177</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#add","title":"add","text":"<p>\u25b8 add(<code>quad</code>): <code>this</code></p> <p>Adds the specified quad to the dataset. Existing quads, as defined in Quad.equals, will be ignored.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_1","title":"Parameters","text":"Name Type <code>quad</code> <code>Quad</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_3","title":"Returns","text":"<p><code>this</code></p> <p>the dataset instance it was called on.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_8","title":"Inherited from","text":"<p>LdoTransactionDataset.add</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_10","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:148</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#addall","title":"addAll","text":"<p>\u25b8 addAll(<code>quads</code>): <code>this</code></p> <p>Imports the quads into this dataset. This method differs from Dataset.union in that it adds all quads to the current instance, rather than combining quads and the current instance to create a new instance.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_2","title":"Parameters","text":"Name Type <code>quads</code> <code>Quad</code>[] | <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_4","title":"Returns","text":"<p><code>this</code></p> <p>the dataset instance it was called on.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_9","title":"Inherited from","text":"<p>LdoTransactionDataset.addAll</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_11","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:62</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#addlistener","title":"addListener","text":"<p>\u25b8 addListener(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Alias for emitter.on(eventName, listener).</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_3","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_5","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_10","title":"Inherited from","text":"<p>LdoTransactionDataset.addListener</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_12","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:248</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#bulk","title":"bulk","text":"<p>\u25b8 bulk(<code>changes</code>): <code>this</code></p> <p>Bulk add and remove triples</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_4","title":"Parameters","text":"Name Type <code>changes</code> <code>DatasetChanges</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_6","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_11","title":"Inherited from","text":"<p>LdoTransactionDataset.bulk</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_13","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:73</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#commit","title":"commit","text":"<p>\u25b8 commit(): <code>void</code></p> <p>Commits changes made to the parent dataset</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_12","title":"Inherited from","text":"<p>LdoTransactionDataset.commit</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_14","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:256</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#committopod","title":"commitToPod","text":"<p>\u25b8 commitToPod(): <code>Promise</code>\\&lt;<code>AggregateSuccess</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UpdateSuccess</code> | <code>UpdateDefaultGraphSuccess</code>, <code>Leaf</code>&gt;&gt; | <code>AggregateError</code>\\&lt;<code>UpdateResultError</code> | <code>InvalidUriError</code>&gt;&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_8","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>AggregateSuccess</code>\\&lt;<code>ResourceResult</code>\\&lt;<code>UpdateSuccess</code> | <code>UpdateDefaultGraphSuccess</code>, <code>Leaf</code>&gt;&gt; | <code>AggregateError</code>\\&lt;<code>UpdateResultError</code> | <code>InvalidUriError</code>&gt;&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_15","title":"Defined in","text":"<p>packages/solid/src/SolidLdoTransactionDataset.ts:111</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#contains","title":"contains","text":"<p>\u25b8 contains(<code>other</code>): <code>boolean</code></p> <p>Returns true if the current instance is a superset of the given dataset; differently put: if the given dataset is a subset of, is contained in the current dataset. Blank Nodes will be normalized.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_5","title":"Parameters","text":"Name Type <code>other</code> <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_9","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_13","title":"Inherited from","text":"<p>LdoTransactionDataset.contains</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_16","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:68</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#delete","title":"delete","text":"<p>\u25b8 delete(<code>quad</code>): <code>this</code></p> <p>Removes the specified quad from the dataset. This method returns the dataset instance it was called on.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_6","title":"Parameters","text":"Name Type <code>quad</code> <code>Quad</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_10","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_14","title":"Inherited from","text":"<p>LdoTransactionDataset.delete</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_17","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:158</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#deletematches","title":"deleteMatches","text":"<p>\u25b8 deleteMatches(<code>subject?</code>, <code>predicate?</code>, <code>object?</code>, <code>graph?</code>): <code>this</code></p> <p>This method removes the quads in the current instance that match the given arguments. The logic described in Quad Matching is applied for each quad in this dataset to select the quads which will be deleted.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_7","title":"Parameters","text":"Name Type <code>subject?</code> <code>Term</code> <code>predicate?</code> <code>Term</code> <code>object?</code> <code>Term</code> <code>graph?</code> <code>Term</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_11","title":"Returns","text":"<p><code>this</code></p> <p>the dataset instance it was called on.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_15","title":"Inherited from","text":"<p>LdoTransactionDataset.deleteMatches</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_18","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:86</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#difference","title":"difference","text":"<p>\u25b8 difference(<code>other</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>Returns a new dataset that contains alls quads from the current dataset, not included in the given dataset.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_8","title":"Parameters","text":"Name Type <code>other</code> <code>DatasetCore</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_12","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_16","title":"Inherited from","text":"<p>LdoTransactionDataset.difference</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_19","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:105</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#emit","title":"emit","text":"<p>\u25b8 emit(<code>eventName</code>, <code>changes</code>): <code>boolean</code></p> <p>Synchronously calls each of the listeners registered for the event named eventName, in the order they were registered, passing the supplied arguments to each.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_9","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>changes</code> <code>DatasetChanges</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_13","title":"Returns","text":"<p><code>boolean</code></p> <p>true if the event had listeners, false otherwise.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_17","title":"Inherited from","text":"<p>LdoTransactionDataset.emit</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_20","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:262</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#equals","title":"equals","text":"<p>\u25b8 equals(<code>other</code>): <code>boolean</code></p> <p>Returns true if the current instance contains the same graph structure as the given dataset.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_10","title":"Parameters","text":"Name Type <code>other</code> <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_14","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_18","title":"Inherited from","text":"<p>LdoTransactionDataset.equals</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_21","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:121</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#eventnames","title":"eventNames","text":"<p>\u25b8 eventNames(): <code>QuadMatch</code>[]</p> <p>Returns an array listing the events for which the emitter has registered listeners. The values in the array are strings or Symbols.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_15","title":"Returns","text":"<p><code>QuadMatch</code>[]</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_19","title":"Inherited from","text":"<p>LdoTransactionDataset.eventNames</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_22","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:272</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#every","title":"every","text":"<p>\u25b8 every(<code>iteratee</code>): <code>boolean</code></p> <p>Universal quantification method, tests whether every quad in the dataset passes the test implemented by the provided iteratee. This method immediately returns boolean false once a quad that does not pass the test is found. This method always returns boolean true on an empty dataset. Note: This method is aligned with Array.prototype.every() in ECMAScript-262.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_11","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>boolean</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_16","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_20","title":"Inherited from","text":"<p>LdoTransactionDataset.every</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_23","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:140</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#filter","title":"filter","text":"<p>\u25b8 filter(<code>iteratee</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>Creates a new dataset with all the quads that pass the test implemented by the provided iteratee. Note: This method is aligned with Array.prototype.filter() in ECMAScript-262.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_12","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>boolean</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_17","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_21","title":"Inherited from","text":"<p>LdoTransactionDataset.filter</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_24","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:154</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#foreach","title":"forEach","text":"<p>\u25b8 forEach(<code>iteratee</code>): <code>void</code></p> <p>Executes the provided iteratee once on each quad in the dataset. Note: This method is aligned with Array.prototype.forEach() in ECMAScript-262.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_13","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>void</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_18","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_22","title":"Inherited from","text":"<p>LdoTransactionDataset.forEach</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_25","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:171</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#getchanges","title":"getChanges","text":"<p>\u25b8 getChanges(): <code>DatasetChanges</code>\\&lt;<code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_19","title":"Returns","text":"<p><code>DatasetChanges</code>\\&lt;<code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_23","title":"Inherited from","text":"<p>LdoTransactionDataset.getChanges</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_26","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:281</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#getmaxlisteners","title":"getMaxListeners","text":"<p>\u25b8 getMaxListeners(): <code>number</code></p> <p>Returns the current max listener value for the EventEmitter which is either set by emitter.setMaxListeners(n) or defaults to events.defaultMaxListeners.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_20","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_24","title":"Inherited from","text":"<p>LdoTransactionDataset.getMaxListeners</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_27","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:281</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#getresource","title":"getResource","text":"<p>\u25b8 getResource(<code>uri</code>, <code>options?</code>): <code>Container</code></p> <p>Retireves a representation (either a LeafResource or a ContainerResource) of a Solid Resource at the given URI. This resource represents the current state of the resource: whether it is currently fetched or in the process of fetching as well as some information about it.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_14","title":"Parameters","text":"Name Type Description <code>uri</code> <code>ContainerUri</code> the URI of the resource <code>options?</code> <code>ResourceGetterOptions</code> Special options for getting the resource"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_21","title":"Returns","text":"<p><code>Container</code></p> <p>a Leaf or Container Resource</p> <p><code>Example</code></p> <pre><code>const profileDocument = solidLdoDataset\n  .getResource(\"https://example.com/profile\");\n</code></pre>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#implementation-of","title":"Implementation of","text":"<p>ISolidLdoDataset.getResource</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_28","title":"Defined in","text":"<p>packages/solid/src/SolidLdoTransactionDataset.ts:104</p> <p>\u25b8 getResource(<code>uri</code>, <code>options?</code>): <code>Leaf</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_15","title":"Parameters","text":"Name Type <code>uri</code> <code>LeafUri</code> <code>options?</code> <code>ResourceGetterOptions</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_22","title":"Returns","text":"<p><code>Leaf</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#implementation-of_1","title":"Implementation of","text":"<p>ISolidLdoDataset.getResource</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_29","title":"Defined in","text":"<p>packages/solid/src/SolidLdoTransactionDataset.ts:105</p> <p>\u25b8 getResource(<code>uri</code>, <code>options?</code>): <code>Leaf</code> | <code>Container</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_16","title":"Parameters","text":"Name Type <code>uri</code> <code>string</code> <code>options?</code> <code>ResourceGetterOptions</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_23","title":"Returns","text":"<p><code>Leaf</code> | <code>Container</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#implementation-of_2","title":"Implementation of","text":"<p>ISolidLdoDataset.getResource</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_30","title":"Defined in","text":"<p>packages/solid/src/SolidLdoTransactionDataset.ts:106</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#has","title":"has","text":"<p>\u25b8 has(<code>quad</code>): <code>boolean</code></p> <p>Determines whether a dataset includes a certain quad, returning true or false as appropriate.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_17","title":"Parameters","text":"Name Type <code>quad</code> <code>Quad</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_24","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_25","title":"Inherited from","text":"<p>LdoTransactionDataset.has</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_31","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:167</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#import","title":"import","text":"<p>\u25b8 import(<code>stream</code>): <code>Promise</code>\\&lt;<code>SolidLdoTransactionDataset</code>&gt;</p> <p>Imports all quads from the given stream into the dataset. The stream events end and error are wrapped in a Promise.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_18","title":"Parameters","text":"Name Type <code>stream</code> <code>Stream</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_25","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>SolidLdoTransactionDataset</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_26","title":"Inherited from","text":"<p>LdoTransactionDataset.import</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_32","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:182</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#intersection","title":"intersection","text":"<p>\u25b8 intersection(<code>other</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>Returns a new dataset containing alls quads from the current dataset that are also included in the given dataset.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_19","title":"Parameters","text":"Name Type <code>other</code> <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_26","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_27","title":"Inherited from","text":"<p>LdoTransactionDataset.intersection</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_33","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:199</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#listenercount","title":"listenerCount","text":"<p>\u25b8 listenerCount(<code>eventName</code>): <code>number</code></p> <p>Returns the number of listeners listening to the event named eventName.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_20","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_27","title":"Returns","text":"<p><code>number</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_28","title":"Inherited from","text":"<p>LdoTransactionDataset.listenerCount</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_34","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:288</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#listeners","title":"listeners","text":"<p>\u25b8 listeners(<code>eventName</code>): <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;[]</p> <p>Returns a copy of the array of listeners for the event named eventName.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_21","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_28","title":"Returns","text":"<p><code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;[]</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_29","title":"Inherited from","text":"<p>LdoTransactionDataset.listeners</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_35","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:295</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#map","title":"map","text":"<p>\u25b8 map(<code>iteratee</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>Returns a new dataset containing all quads returned by applying iteratee to each quad in the current dataset.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_22","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>Quad</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_29","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_30","title":"Inherited from","text":"<p>LdoTransactionDataset.map</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_36","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:217</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#match","title":"match","text":"<p>\u25b8 match(<code>subject?</code>, <code>predicate?</code>, <code>object?</code>, <code>graph?</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>This method returns a new dataset that is comprised of all quads in the current instance matching the given arguments. The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_23","title":"Parameters","text":"Name Type <code>subject?</code> <code>null</code> | <code>Term</code> <code>predicate?</code> <code>null</code> | <code>Term</code> <code>object?</code> <code>null</code> | <code>Term</code> <code>graph?</code> <code>null</code> | <code>Term</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_30","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>a Dataset with matching triples</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_31","title":"Inherited from","text":"<p>LdoTransactionDataset.match</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_37","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:108</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#off","title":"off","text":"<p>\u25b8 off(<code>eventName</code>, <code>listener</code>): <code>void</code></p> <p>Alias for emitter.removeListener()</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_24","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_31","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_32","title":"Inherited from","text":"<p>LdoTransactionDataset.off</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_38","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:304</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#on","title":"on","text":"<p>\u25b8 on(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Adds the listener function to the end of the listeners array for the event named eventName. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of eventName and listener will result in the listener being added, and called, multiple times.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_25","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_32","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_33","title":"Inherited from","text":"<p>LdoTransactionDataset.on</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_39","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:314</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#once","title":"once","text":"<p>\u25b8 once(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Adds a one-time listener function for the event named eventName. The next time eventName is triggered, this listener is removed and then invoked.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_26","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_33","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_34","title":"Inherited from","text":"<p>LdoTransactionDataset.once</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_40","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:330</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#prependlistener","title":"prependListener","text":"<p>\u25b8 prependListener(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Adds the listener function to the beginning of the listeners array for the event named eventName. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of eventName and listener will result in the listener being added, and called, multiple times.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_27","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_34","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_35","title":"Inherited from","text":"<p>LdoTransactionDataset.prependListener</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_41","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:341</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#prependoncelistener","title":"prependOnceListener","text":"<p>\u25b8 prependOnceListener(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Adds a one-time listener function for the event named eventName to the beginning of the listeners array. The next time eventName is triggered, this listener is removed, and then invoked.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_28","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_35","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_36","title":"Inherited from","text":"<p>LdoTransactionDataset.prependOnceListener</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_42","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:352</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#rawlisteners","title":"rawListeners","text":"<p>\u25b8 rawListeners(<code>eventName</code>): <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;[]</p> <p>Returns a copy of the array of listeners for the event named eventName, including any wrappers (such as those created by .once()).</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_29","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_36","title":"Returns","text":"<p><code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;[]</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_37","title":"Inherited from","text":"<p>LdoTransactionDataset.rawListeners</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_43","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:406</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#reduce","title":"reduce","text":"<p>\u25b8 reduce\\&lt;<code>A</code>&gt;(<code>iteratee</code>, <code>initialValue?</code>): <code>A</code></p> <p>This method calls the iteratee on each quad of the DatasetCore. The first time the iteratee is called, the accumulator value is the initialValue or, if not given, equals to the first quad of the Dataset. The return value of the iteratee is used as accumulator value for the next calls. This method returns the return value of the last iteratee call. Note: This method is aligned with Array.prototype.reduce() in ECMAScript-262.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#type-parameters","title":"Type parameters","text":"Name Type <code>A</code> <code>unknown</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_30","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>accumulator</code>: <code>A</code>, <code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>A</code> <code>initialValue?</code> <code>A</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_37","title":"Returns","text":"<p><code>A</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_38","title":"Inherited from","text":"<p>LdoTransactionDataset.reduce</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_44","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:234</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#removealllisteners","title":"removeAllListeners","text":"<p>\u25b8 removeAllListeners(<code>eventName</code>): <code>this</code></p> <p>Removes all listeners, or those of the specified eventName.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_31","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_38","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_39","title":"Inherited from","text":"<p>LdoTransactionDataset.removeAllListeners</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_45","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:366</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#removelistener","title":"removeListener","text":"<p>\u25b8 removeListener(<code>eventName</code>, <code>listener</code>): <code>this</code></p> <p>Removes the specified listener from the listener array for the event named eventName.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_32","title":"Parameters","text":"Name Type <code>eventName</code> <code>QuadMatch</code> <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_39","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_40","title":"Inherited from","text":"<p>LdoTransactionDataset.removeListener</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_46","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:374</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#removelistenerfromallevents","title":"removeListenerFromAllEvents","text":"<p>\u25b8 removeListenerFromAllEvents(<code>listener</code>): <code>this</code></p> <p>Removes the specified listener from the listener array for the event named eventName.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_33","title":"Parameters","text":"Name Type <code>listener</code> <code>nodeEventListener</code>\\&lt;<code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_40","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_41","title":"Inherited from","text":"<p>LdoTransactionDataset.removeListenerFromAllEvents</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_47","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:385</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#rollback","title":"rollback","text":"<p>\u25b8 rollback(): <code>void</code></p> <p>Rolls back changes made to the parent dataset</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_41","title":"Returns","text":"<p><code>void</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_42","title":"Inherited from","text":"<p>LdoTransactionDataset.rollback</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_48","title":"Defined in","text":"<p>packages/subscribable-dataset/src/TransactionDataset.ts:268</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#setmaxlisteners","title":"setMaxListeners","text":"<p>\u25b8 setMaxListeners(<code>n</code>): <code>this</code></p> <p>By default EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default that helps finding memory leaks. The emitter.setMaxListeners() method allows the limit to be modified for this specific EventEmitter instance. The value can be set to Infinity (or 0) to indicate an unlimited number of listeners.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_34","title":"Parameters","text":"Name Type <code>n</code> <code>number</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_42","title":"Returns","text":"<p><code>this</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_43","title":"Inherited from","text":"<p>LdoTransactionDataset.setMaxListeners</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_49","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:398</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#some","title":"some","text":"<p>\u25b8 some(<code>iteratee</code>): <code>boolean</code></p> <p>Existential quantification method, tests whether some quads in the dataset pass the test implemented by the provided iteratee. Note: This method is aligned with Array.prototype.some() in ECMAScript-262.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_35","title":"Parameters","text":"Name Type <code>iteratee</code> (<code>quad</code>: <code>Quad</code>, <code>dataset</code>: <code>this</code>) =&gt; <code>boolean</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_43","title":"Returns","text":"<p><code>boolean</code></p> <p>boolean true once a quad that passes the test is found.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_44","title":"Inherited from","text":"<p>LdoTransactionDataset.some</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_50","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:259</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#starttransaction","title":"startTransaction","text":"<p>\u25b8 startTransaction(): <code>ITransactionDataset</code>\\&lt;<code>Quad</code>&gt;</p> <p>Returns a transactional dataset that will update this dataset when its transaction is committed.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_44","title":"Returns","text":"<p><code>ITransactionDataset</code>\\&lt;<code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_45","title":"Inherited from","text":"<p>LdoTransactionDataset.startTransaction</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_51","title":"Defined in","text":"<p>packages/subscribable-dataset/src/SubscribableDataset.ts:421</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#toarray","title":"toArray","text":"<p>\u25b8 toArray(): <code>Quad</code>[]</p> <p>Returns the set of quads within the dataset as a host language native sequence, for example an Array in ECMAScript-262. Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_45","title":"Returns","text":"<p><code>Quad</code>[]</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_46","title":"Inherited from","text":"<p>LdoTransactionDataset.toArray</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_52","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:272</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#tocanonical","title":"toCanonical","text":"<p>\u25b8 toCanonical(): <code>string</code></p> <p>Returns an N-Quads string representation of the dataset, preprocessed with RDF Dataset Normalization algorithm.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_46","title":"Returns","text":"<p><code>string</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_47","title":"Inherited from","text":"<p>LdoTransactionDataset.toCanonical</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_53","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:283</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#tostream","title":"toStream","text":"<p>\u25b8 toStream(): <code>Stream</code>\\&lt;<code>Quad</code>&gt;</p> <p>Returns a stream that contains all quads of the dataset.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_47","title":"Returns","text":"<p><code>Stream</code>\\&lt;<code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_48","title":"Inherited from","text":"<p>LdoTransactionDataset.toStream</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_54","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:290</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#tostring","title":"toString","text":"<p>\u25b8 toString(): <code>string</code></p> <p>Returns an N-Quads string representation of the dataset. No prior normalization is required, therefore the results for the same quads may vary depending on the Dataset implementation.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_48","title":"Returns","text":"<p><code>string</code></p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_49","title":"Inherited from","text":"<p>LdoTransactionDataset.toString</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_55","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:311</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#union","title":"union","text":"<p>\u25b8 union(<code>other</code>): <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>Returns a new Dataset that is a concatenation of this dataset and the quads given as an argument.</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_36","title":"Parameters","text":"Name Type <code>other</code> <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_49","title":"Returns","text":"<p><code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_50","title":"Inherited from","text":"<p>LdoTransactionDataset.union</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_56","title":"Defined in","text":"<p>packages/dataset/src/ExtendedDataset.ts:319</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#usingtype","title":"usingType","text":"<p>\u25b8 usingType\\&lt;<code>Type</code>&gt;(<code>shapeType</code>): <code>LdoBuilder</code>\\&lt;<code>Type</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#type-parameters_1","title":"Type parameters","text":"Name Type <code>Type</code> extends <code>LdoBase</code>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#parameters_37","title":"Parameters","text":"Name Type <code>shapeType</code> <code>ShapeType</code>\\&lt;<code>Type</code>&gt;"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#returns_50","title":"Returns","text":"<p><code>LdoBuilder</code>\\&lt;<code>Type</code>&gt;</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#inherited-from_51","title":"Inherited from","text":"<p>LdoTransactionDataset.usingType</p>"},{"location":"api/solid/classes/SolidLdoTransactionDataset/#defined-in_57","title":"Defined in","text":"<p>packages/ldo/src/LdoTransactionDataset.ts:13</p>"},{"location":"api/solid/functions/changeData/","title":"Function: changeData","text":"<p>\u25b8 changeData\\&lt;<code>Type</code>&gt;(<code>input</code>, <code>resource</code>, <code>...additionalResources</code>): <code>Type</code></p> <p>Begins tracking changes to eventually commit.</p>"},{"location":"api/solid/functions/changeData/#type-parameters","title":"Type parameters","text":"Name Type <code>Type</code> extends <code>LdoBase</code>"},{"location":"api/solid/functions/changeData/#parameters","title":"Parameters","text":"Name Type Description <code>input</code> <code>Type</code> A linked data object to track changes on <code>resource</code> <code>Resource</code> A resource that all additions will eventually be committed to <code>...additionalResources</code> <code>Resource</code>[] Any additional resources that changes will eventually be committed to"},{"location":"api/solid/functions/changeData/#returns","title":"Returns","text":"<p><code>Type</code></p> <p>A transactable Linked Data Object</p> <p><code>Example</code></p> <pre><code>import { changeData } from \"@ldo/solid\";\n\n// ...\n\nconst profile = solidLdoDataset\n  .using(ProfileShapeType)\n  .fromSubject(\"https://example.com/proifle#me\");\nconst resource = solidLdoDataset.getResource(\"https://example.com/profile\");\n\nconst cProfile = changeData(profile, resource);\ncProfile.name = \"My New Name\";\nconst result = await commitData(cProfile);\n</code></pre>"},{"location":"api/solid/functions/changeData/#defined-in","title":"Defined in","text":"<p>packages/solid/src/methods.ts:33</p>"},{"location":"api/solid/functions/checkHeadersForRootContainer/","title":"Function: checkHeadersForRootContainer","text":"<p>\u25b8 checkHeadersForRootContainer(<code>uri</code>, <code>headers</code>): <code>CheckRootContainerSuccess</code> | <code>NoncompliantPodError</code></p> <p>Checks provided headers to see if a given URI is a root container as defined in the solid specification section 4.1</p>"},{"location":"api/solid/functions/checkHeadersForRootContainer/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>ContainerUri</code> the URI of the container resource <code>headers</code> <code>Headers</code> headers returned when making a GET request to the resource"},{"location":"api/solid/functions/checkHeadersForRootContainer/#returns","title":"Returns","text":"<p><code>CheckRootContainerSuccess</code> | <code>NoncompliantPodError</code></p> <p>CheckRootContainerSuccess if there is not error</p>"},{"location":"api/solid/functions/checkHeadersForRootContainer/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/checkRootContainer.ts:37</p>"},{"location":"api/solid/functions/checkRootContainer/","title":"Function: checkRootContainer","text":"<p>\u25b8 checkRootContainer(<code>uri</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>CheckRootResult</code>&gt;</p> <p>Performs a request to the Pod to check if the given URI is a root container as defined in the solid specification section 4.1</p>"},{"location":"api/solid/functions/checkRootContainer/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>ContainerUri</code> the URI of the container resource <code>options?</code> <code>BasicRequestOptions</code> options variable to pass a fetch function"},{"location":"api/solid/functions/checkRootContainer/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>CheckRootResult</code>&gt;</p> <p>CheckResourceSuccess if there is no error</p> <p><code>Example</code></p> <pre><code>import { checkRootContainer } from \"@ldo/solid\";\nimport { fetch } from \"@inrupt/solid-client-authn-browser\";\n\nconst result = await checkRootContainer(\"https://example.com/\", { fetch });\nif (!result.isError) {\n  // true if the container is a root container\n  console.log(result.isRootContainer);\n}\n</code></pre>"},{"location":"api/solid/functions/checkRootContainer/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/checkRootContainer.ts:78</p>"},{"location":"api/solid/functions/commitData/","title":"Function: commitData","text":"<p>\u25b8 commitData(<code>input</code>): <code>ReturnType</code>\\&lt;<code>SolidLdoTransactionDataset</code>[<code>\"commitToPod\"</code>]&gt;</p> <p>Commits the transaction to the global dataset, syncing all subscribing components and Solid Pods</p>"},{"location":"api/solid/functions/commitData/#parameters","title":"Parameters","text":"Name Type Description <code>input</code> <code>LdoBase</code> A transactable linked data object"},{"location":"api/solid/functions/commitData/#returns","title":"Returns","text":"<p><code>ReturnType</code>\\&lt;<code>SolidLdoTransactionDataset</code>[<code>\"commitToPod\"</code>]&gt;</p> <p><code>Example</code></p> <pre><code>import { changeData } from \"@ldo/solid\";\n\n// ...\n\nconst profile = solidLdoDataset\n  .using(ProfileShapeType)\n  .fromSubject(\"https://example.com/proifle#me\");\nconst resource = solidLdoDataset.getResource(\"https://example.com/profile\");\n\nconst cProfile = changeData(profile, resource);\ncProfile.name = \"My New Name\";\nconst result = await commitData(cProfile);\n</code></pre>"},{"location":"api/solid/functions/commitData/#defined-in","title":"Defined in","text":"<p>packages/solid/src/methods.ts:71</p>"},{"location":"api/solid/functions/createDataResource/","title":"Function: createDataResource","text":"<p>\u25b8 createDataResource(<code>uri</code>, <code>overwrite</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ContainerCreateAndOverwriteResult</code>&gt;</p> <p>Creates a data resource (RDF resource) at the provided URI. This resource could also be a container.</p>"},{"location":"api/solid/functions/createDataResource/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>ContainerUri</code> The URI of the resource <code>overwrite</code> <code>true</code> If true, the request will overwrite any previous resource at this URI. <code>options?</code> <code>DatasetRequestOptions</code> Options to provide a fetch function and a local dataset to update."},{"location":"api/solid/functions/createDataResource/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ContainerCreateAndOverwriteResult</code>&gt;</p> <p>One of many create results depending on the input</p> <p><code>Example</code></p> <p><code>createDataResource</code> can be used to create containers.</p> <pre><code>import { createDataResource } from \"@ldo/solid\";\nimport { fetch } from \"@inrupt/solid-client-autn-js\";\n\nconst result = await createDataResource(\n  \"https://example.com/container/\",\n  true,\n  { fetch },\n);\nif (!result.isError) {\n  // Do something\n}\n</code></pre> <p><code>Example</code></p> <p><code>createDataResource</code> can also create a blank data resource at the provided URI.</p> <pre><code>import { createDataResource } from \"@ldo/solid\";\nimport { fetch } from \"@inrupt/solid-client-autn-js\";\n\nconst result = await createDataResource(\n  \"https://example.com/container/someResource.ttl\",\n  true,\n  { fetch },\n);\nif (!result.isError) {\n  // Do something\n}\n</code></pre> <p><code>Example</code></p> <p>Any local RDFJS dataset passed to the <code>options</code> field will be updated with any new RDF data from the create process.</p> <pre><code>import { createDataResource } from \"@ldo/solid\";\nimport { createDataset } from \"@ldo/dataset\"\nimport { fetch } from \"@inrupt/solid-client-autn-js\";\n\nconst localDataset = createDataset();\nconst result = await createDataResource(\n  \"https://example.com/container/someResource.ttl\",\n  true,\n  { fetch, dataset: localDataset },\n);\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/functions/createDataResource/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:135</p> <p>\u25b8 createDataResource(<code>uri</code>, <code>overwrite</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#parameters_1","title":"Parameters","text":"Name Type <code>uri</code> <code>LeafUri</code> <code>overwrite</code> <code>true</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/createDataResource/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:140</p> <p>\u25b8 createDataResource(<code>uri</code>, <code>overwrite?</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ContainerCreateIfAbsentResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#parameters_2","title":"Parameters","text":"Name Type <code>uri</code> <code>ContainerUri</code> <code>overwrite?</code> <code>false</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/createDataResource/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ContainerCreateIfAbsentResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:145</p> <p>\u25b8 createDataResource(<code>uri</code>, <code>overwrite?</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>LeafCreateIfAbsentResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#parameters_3","title":"Parameters","text":"Name Type <code>uri</code> <code>LeafUri</code> <code>overwrite?</code> <code>false</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/createDataResource/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>LeafCreateIfAbsentResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#defined-in_3","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:150</p> <p>\u25b8 createDataResource(<code>uri</code>, <code>overwrite?</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ContainerCreateIfAbsentResult</code> | <code>ContainerCreateAndOverwriteResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#parameters_4","title":"Parameters","text":"Name Type <code>uri</code> <code>ContainerUri</code> <code>overwrite?</code> <code>boolean</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/createDataResource/#returns_4","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ContainerCreateIfAbsentResult</code> | <code>ContainerCreateAndOverwriteResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#defined-in_4","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:155</p> <p>\u25b8 createDataResource(<code>uri</code>, <code>overwrite?</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>LeafCreateIfAbsentResult</code> | <code>LeafCreateAndOverwriteResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#parameters_5","title":"Parameters","text":"Name Type <code>uri</code> <code>LeafUri</code> <code>overwrite?</code> <code>boolean</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/createDataResource/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>LeafCreateIfAbsentResult</code> | <code>LeafCreateAndOverwriteResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#defined-in_5","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:160</p> <p>\u25b8 createDataResource(<code>uri</code>, <code>overwrite</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ContainerCreateAndOverwriteResult</code> | <code>LeafCreateAndOverwriteResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#parameters_6","title":"Parameters","text":"Name Type <code>uri</code> <code>string</code> <code>overwrite</code> <code>true</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/createDataResource/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ContainerCreateAndOverwriteResult</code> | <code>LeafCreateAndOverwriteResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#defined-in_6","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:165</p> <p>\u25b8 createDataResource(<code>uri</code>, <code>overwrite?</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>LeafCreateIfAbsentResult</code> | <code>LeafCreateIfAbsentResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#parameters_7","title":"Parameters","text":"Name Type <code>uri</code> <code>string</code> <code>overwrite?</code> <code>false</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/createDataResource/#returns_7","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>LeafCreateIfAbsentResult</code> | <code>LeafCreateIfAbsentResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#defined-in_7","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:170</p> <p>\u25b8 createDataResource(<code>uri</code>, <code>overwrite?</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ContainerCreateAndOverwriteResult</code> | <code>LeafCreateAndOverwriteResult</code> | <code>ContainerCreateIfAbsentResult</code> | <code>LeafCreateIfAbsentResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#parameters_8","title":"Parameters","text":"Name Type <code>uri</code> <code>string</code> <code>overwrite?</code> <code>boolean</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/createDataResource/#returns_8","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ContainerCreateAndOverwriteResult</code> | <code>LeafCreateAndOverwriteResult</code> | <code>ContainerCreateIfAbsentResult</code> | <code>LeafCreateIfAbsentResult</code>&gt;</p>"},{"location":"api/solid/functions/createDataResource/#defined-in_8","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:175</p>"},{"location":"api/solid/functions/createSolidLdoDataset/","title":"Function: createSolidLdoDataset","text":"<p>\u25b8 createSolidLdoDataset(<code>options?</code>): <code>SolidLdoDataset</code></p> <p>Creates a SolidLdoDataset</p>"},{"location":"api/solid/functions/createSolidLdoDataset/#parameters","title":"Parameters","text":"Name Type Description <code>options?</code> <code>CreateSolidLdoDatasetOptions</code> CreateSolidLdoDatasetOptions"},{"location":"api/solid/functions/createSolidLdoDataset/#returns","title":"Returns","text":"<p><code>SolidLdoDataset</code></p> <p>A SolidLdoDataset</p> <p><code>Example</code></p> <pre><code>import { createSolidLdoDataset } from \"@ldo/solid\";\nimport { fetch } from \"@inrupt/solid-client-authn-browswer\";\n\nconst solidLdoDataset = createSolidLdoDataset({ fetch });\n</code></pre>"},{"location":"api/solid/functions/createSolidLdoDataset/#defined-in","title":"Defined in","text":"<p>packages/solid/src/createSolidLdoDataset.ts:44</p>"},{"location":"api/solid/functions/deleteResource/","title":"Function: deleteResource","text":"<p>\u25b8 deleteResource(<code>uri</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>DeleteResult</code>&gt;</p> <p>Deletes a resource on a Pod at a given URL.</p>"},{"location":"api/solid/functions/deleteResource/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>string</code> The URI for the resource that should be deleted <code>options?</code> <code>DatasetRequestOptions</code> Options to provide a fetch function and a local dataset to update."},{"location":"api/solid/functions/deleteResource/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>DeleteResult</code>&gt;</p> <p>a DeleteResult</p> <p><code>Example</code></p> <p><code>deleteResource</code> will send a request to a Solid Pod using the provided fetch function. A local dataset can also be provided. It will be updated with any new information from the delete.</p> <pre><code>import { deleteResource } from \"@ldo/solid\";\nimport { createDataset } from \"@ldo/dataset\"\nimport { fetch } from \"@inrupt/solid-client-autn-js\";\n\nconst localDataset = createDataset();\nconst result = await deleteResource(\n  \"https://example.com/container/someResource.ttl\",\n  { fetch, dataset: localDataset },\n);\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/functions/deleteResource/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/deleteResource.ts:49</p>"},{"location":"api/solid/functions/getWacRuleWithAclUri/","title":"Function: getWacRuleWithAclUri","text":"<p>\u25b8 getWacRuleWithAclUri(<code>aclUri</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>GetWacRuleResult</code>&gt;</p> <p>Given the URI of an ACL document, return the Web Access Control (WAC) rules</p>"},{"location":"api/solid/functions/getWacRuleWithAclUri/#parameters","title":"Parameters","text":"Name Type <code>aclUri</code> <code>string</code> <code>options?</code> <code>BasicRequestOptions</code>"},{"location":"api/solid/functions/getWacRuleWithAclUri/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>GetWacRuleResult</code>&gt;</p> <p>GetWacRuleResult</p>"},{"location":"api/solid/functions/getWacRuleWithAclUri/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/getWacRule.ts:29</p>"},{"location":"api/solid/functions/getWacUri/","title":"Function: getWacUri","text":"<p>\u25b8 getWacUri(<code>resourceUri</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>GetWacUriResult</code>&gt;</p> <p>Get the URI for the WAC rules of a specific resource</p>"},{"location":"api/solid/functions/getWacUri/#parameters","title":"Parameters","text":"Name Type <code>resourceUri</code> <code>string</code> <code>options?</code> <code>BasicRequestOptions</code>"},{"location":"api/solid/functions/getWacUri/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>GetWacUriResult</code>&gt;</p> <p>GetWacUriResult</p>"},{"location":"api/solid/functions/getWacUri/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/getWacUri.ts:27</p>"},{"location":"api/solid/functions/isContainerUri/","title":"Function: isContainerUri","text":"<p>\u25b8 isContainerUri(<code>uri</code>): uri is ContainerUri</p> <p>Checks if a provided string is a Container URI</p>"},{"location":"api/solid/functions/isContainerUri/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>string</code> the string to check"},{"location":"api/solid/functions/isContainerUri/#returns","title":"Returns","text":"<p>uri is ContainerUri</p> <p>true if the string is a container URI</p>"},{"location":"api/solid/functions/isContainerUri/#defined-in","title":"Defined in","text":"<p>packages/solid/src/util/uriTypes.ts:23</p>"},{"location":"api/solid/functions/isLeafUri/","title":"Function: isLeafUri","text":"<p>\u25b8 isLeafUri(<code>uri</code>): uri is LeafUri</p> <p>Checks if a provided string is a leaf URI</p>"},{"location":"api/solid/functions/isLeafUri/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>string</code> the string to check"},{"location":"api/solid/functions/isLeafUri/#returns","title":"Returns","text":"<p>uri is LeafUri</p> <p>true if the string is a leaf URI</p>"},{"location":"api/solid/functions/isLeafUri/#defined-in","title":"Defined in","text":"<p>packages/solid/src/util/uriTypes.ts:33</p>"},{"location":"api/solid/functions/readResource/","title":"Function: readResource","text":"<p>\u25b8 readResource(<code>uri</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReadLeafResult</code>&gt;</p> <p>Reads resource at a provided URI and returns the result</p>"},{"location":"api/solid/functions/readResource/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>LeafUri</code> The URI of the resource <code>options?</code> <code>DatasetRequestOptions</code> Options to provide a fetch function and a local dataset to update."},{"location":"api/solid/functions/readResource/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReadLeafResult</code>&gt;</p> <p>ReadResult</p> <p><code>Example</code></p> <pre><code>import { deleteResource } from \"@ldo/solid\";\nimport { createDataset } from \"@ldo/dataset\"\nimport { fetch } from \"@inrupt/solid-client-autn-js\";\n\nconst dataset = createDataset();\nconst result = await readResource(\n  \"https://example.com/container/someResource.ttl\",\n  { fetch, dataset },\n);\nif (!result.isError) {\n  if (result.type === \"absentReadSuccess\") {\n    // There was no problem reading the resource, but it doesn't exist\n  } else if (result.type === \"dataReadSuccess\") {\n    // The resource was read and it is an RDF resource. The dataset provided\n    // dataset will also be loaded with the data from the resource\n  } else if (result.type === \"binaryReadSuccess\") {\n    // The resource is a binary\n    console.log(result.blob);\n    console.log(result.mimeType);\n  }\n}\n</code></pre>"},{"location":"api/solid/functions/readResource/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/readResource.ts:83</p> <p>\u25b8 readResource(<code>uri</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReadContainerResult</code>&gt;</p>"},{"location":"api/solid/functions/readResource/#parameters_1","title":"Parameters","text":"Name Type <code>uri</code> <code>ContainerUri</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/readResource/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReadContainerResult</code>&gt;</p>"},{"location":"api/solid/functions/readResource/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/requester/requests/readResource.ts:87</p> <p>\u25b8 readResource(<code>uri</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>ReadLeafResult</code> | <code>ReadContainerResult</code>&gt;</p>"},{"location":"api/solid/functions/readResource/#parameters_2","title":"Parameters","text":"Name Type <code>uri</code> <code>string</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/readResource/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>ReadLeafResult</code> | <code>ReadContainerResult</code>&gt;</p>"},{"location":"api/solid/functions/readResource/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/requester/requests/readResource.ts:91</p>"},{"location":"api/solid/functions/setWacRuleForAclUri/","title":"Function: setWacRuleForAclUri","text":"<p>\u25b8 setWacRuleForAclUri(<code>aclUri</code>, <code>newRule</code>, <code>accessTo</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>SetWacRuleResult</code>&gt;</p> <p>Given the URI of an ACL document and some WAC rules, set the WAC rules of that document</p>"},{"location":"api/solid/functions/setWacRuleForAclUri/#parameters","title":"Parameters","text":"Name Type <code>aclUri</code> <code>LeafUri</code> <code>newRule</code> <code>WacRule</code> <code>accessTo</code> <code>string</code> <code>options?</code> <code>BasicRequestOptions</code>"},{"location":"api/solid/functions/setWacRuleForAclUri/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>SetWacRuleResult</code>&gt;</p> <p>SetWacRuleResult</p>"},{"location":"api/solid/functions/setWacRuleForAclUri/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/setWacRule.ts:28</p>"},{"location":"api/solid/functions/updateDataResource/","title":"Function: updateDataResource","text":"<p>\u25b8 updateDataResource(<code>uri</code>, <code>datasetChanges</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>UpdateResult</code>&gt;</p> <p>Updates a specific data resource with the provided dataset changes</p>"},{"location":"api/solid/functions/updateDataResource/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>LeafUri</code> the URI of the data resource <code>datasetChanges</code> <code>DatasetChanges</code>\\&lt;<code>Quad</code>&gt; A set of triples added and removed from this dataset <code>options?</code> <code>DatasetRequestOptions</code> Options to provide a fetch function and a local dataset to update."},{"location":"api/solid/functions/updateDataResource/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>UpdateResult</code>&gt;</p> <p>An UpdateResult</p> <p><code>Example</code></p> <pre><code>import {\n  updateDataResource,\n  transactionChanges,\n  changeData,\n  createSolidLdoDataset,\n} from \"@ldo/solid\";\nimport { fetch } from \"@inrupt/solid-client-authn-browser\";\n\n// Initialize an LDO dataset\nconst solidLdoDataset = createSolidLdoDataset();\n// Get a Linked Data Object\nconst profile = solidLdoDataset\n  .usingType(ProfileShapeType)\n  .fromSubject(\"https://example.com/profile#me\");\n// Create a transaction to change data\nconst cProfile = changeData(\n  profile,\n  solidLdoDataset.getResource(\"https://example.com/profile\"),\n);\ncProfile.name = \"John Doe\";\n// Get data in \"DatasetChanges\" form\nconst datasetChanges = transactionChanges(someLinkedDataObject);\n// Use \"updateDataResource\" to apply the changes\nconst result = await updateDataResource(\n  \"https://example.com/profile\",\n  datasetChanges,\n  { fetch, dataset: solidLdoDataset },\n);\n</code></pre>"},{"location":"api/solid/functions/updateDataResource/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/updateDataResource.ts:63</p>"},{"location":"api/solid/functions/uploadResource/","title":"Function: uploadResource","text":"<p>\u25b8 uploadResource(<code>uri</code>, <code>blob</code>, <code>mimeType</code>, <code>overwrite</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>&gt;</p> <p>Uploads a binary resource at the provided URI</p>"},{"location":"api/solid/functions/uploadResource/#parameters","title":"Parameters","text":"Name Type Description <code>uri</code> <code>LeafUri</code> The URI of the resource <code>blob</code> <code>Blob</code> - <code>mimeType</code> <code>string</code> - <code>overwrite</code> <code>true</code> If true, the request will overwrite any previous resource at this URI. <code>options?</code> <code>DatasetRequestOptions</code> Options to provide a fetch function and a local dataset to update."},{"location":"api/solid/functions/uploadResource/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>LeafCreateAndOverwriteResult</code>&gt;</p> <p>One of many create results depending on the input</p> <p><code>Example</code></p> <p>Any local RDFJS dataset passed to the <code>options</code> field will be updated with any new RDF data from the create process.</p> <pre><code>import { createDataResource } from \"@ldo/solid\";\nimport { createDataset } from \"@ldo/dataset\"\nimport { fetch } from \"@inrupt/solid-client-autn-js\";\n\nconst localDataset = createDataset();\nconst result = await uploadResource(\n  \"https://example.com/container/someResource.txt\",\n  new Blob(\"some text.\"),\n  \"text/txt\",\n  true,\n  { fetch, dataset: localDataset },\n);\nif (!result.isError) {\n  // Do something\n}\n</code></pre>"},{"location":"api/solid/functions/uploadResource/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/uploadResource.ts:50</p> <p>\u25b8 uploadResource(<code>uri</code>, <code>blob</code>, <code>mimeType</code>, <code>overwrite?</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>LeafCreateIfAbsentResult</code>&gt;</p>"},{"location":"api/solid/functions/uploadResource/#parameters_1","title":"Parameters","text":"Name Type <code>uri</code> <code>LeafUri</code> <code>blob</code> <code>Blob</code> <code>mimeType</code> <code>string</code> <code>overwrite?</code> <code>false</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/uploadResource/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>LeafCreateIfAbsentResult</code>&gt;</p>"},{"location":"api/solid/functions/uploadResource/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/requester/requests/uploadResource.ts:57</p> <p>\u25b8 uploadResource(<code>uri</code>, <code>blob</code>, <code>mimeType</code>, <code>overwrite?</code>, <code>options?</code>): <code>Promise</code>\\&lt;<code>LeafCreateIfAbsentResult</code> | <code>LeafCreateAndOverwriteResult</code>&gt;</p>"},{"location":"api/solid/functions/uploadResource/#parameters_2","title":"Parameters","text":"Name Type <code>uri</code> <code>LeafUri</code> <code>blob</code> <code>Blob</code> <code>mimeType</code> <code>string</code> <code>overwrite?</code> <code>boolean</code> <code>options?</code> <code>DatasetRequestOptions</code>"},{"location":"api/solid/functions/uploadResource/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>LeafCreateIfAbsentResult</code> | <code>LeafCreateAndOverwriteResult</code>&gt;</p>"},{"location":"api/solid/functions/uploadResource/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/requester/requests/uploadResource.ts:64</p>"},{"location":"api/solid/interfaces/AccessModeList/","title":"Interface: AccessModeList","text":"<p>A list of modes that a certain agent has access to</p>"},{"location":"api/solid/interfaces/AccessModeList/#properties","title":"Properties","text":""},{"location":"api/solid/interfaces/AccessModeList/#append","title":"append","text":"<p>\u2022 append: <code>boolean</code></p>"},{"location":"api/solid/interfaces/AccessModeList/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/WacRule.ts:6</p>"},{"location":"api/solid/interfaces/AccessModeList/#control","title":"control","text":"<p>\u2022 control: <code>boolean</code></p>"},{"location":"api/solid/interfaces/AccessModeList/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/resource/wac/WacRule.ts:8</p>"},{"location":"api/solid/interfaces/AccessModeList/#read","title":"read","text":"<p>\u2022 read: <code>boolean</code></p>"},{"location":"api/solid/interfaces/AccessModeList/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/resource/wac/WacRule.ts:5</p>"},{"location":"api/solid/interfaces/AccessModeList/#write","title":"write","text":"<p>\u2022 write: <code>boolean</code></p>"},{"location":"api/solid/interfaces/AccessModeList/#defined-in_3","title":"Defined in","text":"<p>packages/solid/src/resource/wac/WacRule.ts:7</p>"},{"location":"api/solid/interfaces/BasicRequestOptions/","title":"Interface: BasicRequestOptions","text":"<p>Request Options to be passed to request functions</p>"},{"location":"api/solid/interfaces/BasicRequestOptions/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>BasicRequestOptions</code></li> </ul> <p>\u21b3 <code>DatasetRequestOptions</code></p>"},{"location":"api/solid/interfaces/BasicRequestOptions/#properties","title":"Properties","text":""},{"location":"api/solid/interfaces/BasicRequestOptions/#fetch","title":"fetch","text":"<p>\u2022 <code>Optional</code> fetch: (<code>input</code>: <code>RequestInfo</code> | <code>URL</code>, <code>init?</code>: <code>RequestInit</code>) =&gt; <code>Promise</code>\\&lt;<code>Response</code>&gt;(<code>input</code>: <code>string</code> | <code>Request</code> | <code>URL</code>, <code>init?</code>: <code>RequestInit</code>) =&gt; <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>A fetch function usually imported from @inrupt/solid-client-authn-js</p>"},{"location":"api/solid/interfaces/BasicRequestOptions/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>input</code>, <code>init?</code>): <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>A fetch function usually imported from @inrupt/solid-client-authn-js</p>"},{"location":"api/solid/interfaces/BasicRequestOptions/#parameters","title":"Parameters","text":"Name Type <code>input</code> <code>RequestInfo</code> | <code>URL</code> <code>init?</code> <code>RequestInit</code>"},{"location":"api/solid/interfaces/BasicRequestOptions/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>\u25b8 (<code>input</code>, <code>init?</code>): <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>A fetch function usually imported from @inrupt/solid-client-authn-js</p>"},{"location":"api/solid/interfaces/BasicRequestOptions/#parameters_1","title":"Parameters","text":"Name Type <code>input</code> <code>string</code> | <code>Request</code> | <code>URL</code> <code>init?</code> <code>RequestInit</code>"},{"location":"api/solid/interfaces/BasicRequestOptions/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Response</code>&gt;</p>"},{"location":"api/solid/interfaces/BasicRequestOptions/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/requestOptions.ts:11</p>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/","title":"Interface: CreateSolidLdoDatasetOptions","text":"<p>Options for createSolidDataset</p>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#properties","title":"Properties","text":""},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#dataset","title":"dataset","text":"<p>\u2022 <code>Optional</code> dataset: <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;</p> <p>An initial dataset</p> <p><code>Default</code></p> <pre><code>A blank dataset\n</code></pre>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#defined-in","title":"Defined in","text":"<p>packages/solid/src/createSolidLdoDataset.ts:22</p>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#datasetfactory","title":"datasetFactory","text":"<p>\u2022 <code>Optional</code> datasetFactory: <code>DatasetFactory</code>\\&lt;<code>Quad</code>, <code>Quad</code>, <code>Dataset</code>\\&lt;<code>Quad</code>, <code>Quad</code>&gt;&gt;</p> <p>An RDFJS DatasetFactory</p> <p><code>Default</code></p> <pre><code>An extended RDFJS DatasetFactory\n</code></pre>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/createSolidLdoDataset.ts:27</p>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#fetch","title":"fetch","text":"<p>\u2022 <code>Optional</code> fetch: (<code>input</code>: <code>RequestInfo</code> | <code>URL</code>, <code>init?</code>: <code>RequestInit</code>) =&gt; <code>Promise</code>\\&lt;<code>Response</code>&gt;(<code>input</code>: <code>string</code> | <code>Request</code> | <code>URL</code>, <code>init?</code>: <code>RequestInit</code>) =&gt; <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>A fetch function. Most often, this is the fetch function from @inrupt/solid-clieht-authn-js</p>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>input</code>, <code>init?</code>): <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>A fetch function. Most often, this is the fetch function from @inrupt/solid-clieht-authn-js</p>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#parameters","title":"Parameters","text":"Name Type <code>input</code> <code>RequestInfo</code> | <code>URL</code> <code>init?</code> <code>RequestInit</code>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>\u25b8 (<code>input</code>, <code>init?</code>): <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>A fetch function. Most often, this is the fetch function from @inrupt/solid-clieht-authn-js</p>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#parameters_1","title":"Parameters","text":"Name Type <code>input</code> <code>string</code> | <code>Request</code> | <code>URL</code> <code>init?</code> <code>RequestInit</code>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Response</code>&gt;</p>"},{"location":"api/solid/interfaces/CreateSolidLdoDatasetOptions/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/createSolidLdoDataset.ts:17</p>"},{"location":"api/solid/interfaces/DatasetRequestOptions/","title":"Interface: DatasetRequestOptions","text":"<p>Request options with a dataset component</p>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>BasicRequestOptions</code></li> </ul> <p>\u21b3 <code>DatasetRequestOptions</code></p>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#properties","title":"Properties","text":""},{"location":"api/solid/interfaces/DatasetRequestOptions/#dataset","title":"dataset","text":"<p>\u2022 <code>Optional</code> dataset: <code>IBulkEditableDataset</code>\\&lt;<code>Quad</code>&gt;</p> <p>A dataset to be modified with any new information obtained from a request</p>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/requestOptions.ts:21</p>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#fetch","title":"fetch","text":"<p>\u2022 <code>Optional</code> fetch: (<code>input</code>: <code>RequestInfo</code> | <code>URL</code>, <code>init?</code>: <code>RequestInit</code>) =&gt; <code>Promise</code>\\&lt;<code>Response</code>&gt;(<code>input</code>: <code>string</code> | <code>Request</code> | <code>URL</code>, <code>init?</code>: <code>RequestInit</code>) =&gt; <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>A fetch function usually imported from @inrupt/solid-client-authn-js</p>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>input</code>, <code>init?</code>): <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>A fetch function usually imported from @inrupt/solid-client-authn-js</p>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#parameters","title":"Parameters","text":"Name Type <code>input</code> <code>RequestInfo</code> | <code>URL</code> <code>init?</code> <code>RequestInit</code>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>\u25b8 (<code>input</code>, <code>init?</code>): <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>A fetch function usually imported from @inrupt/solid-client-authn-js</p>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#parameters_1","title":"Parameters","text":"Name Type <code>input</code> <code>string</code> | <code>Request</code> | <code>URL</code> <code>init?</code> <code>RequestInit</code>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Response</code>&gt;</p>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#inherited-from","title":"Inherited from","text":"<p>BasicRequestOptions.fetch</p>"},{"location":"api/solid/interfaces/DatasetRequestOptions/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/requester/requests/requestOptions.ts:11</p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/","title":"Interface: GetWacRuleSuccess","text":"<p>Returned when a WAC rule is successfully retrieved</p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ResourceSuccess</code></li> </ul> <p>\u21b3 <code>GetWacRuleSuccess</code></p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#properties","title":"Properties","text":""},{"location":"api/solid/interfaces/GetWacRuleSuccess/#iserror","title":"isError","text":"<p>\u2022 isError: <code>false</code></p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#inherited-from","title":"Inherited from","text":"<p>ResourceSuccess.isError</p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/results/success/SuccessResult.ts:7</p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#type","title":"type","text":"<p>\u2022 type: <code>\"getWacRuleSuccess\"</code></p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#overrides","title":"Overrides","text":"<p>ResourceSuccess.type</p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/resource/wac/results/GetWacRuleSuccess.ts:8</p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#uri","title":"uri","text":"<p>\u2022 uri: <code>string</code></p> <p>The URI of the resource</p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#inherited-from_1","title":"Inherited from","text":"<p>ResourceSuccess.uri</p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/requester/results/success/SuccessResult.ts:17</p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#wacrule","title":"wacRule","text":"<p>\u2022 wacRule: <code>WacRule</code></p> <p>The rule that was retrieved</p>"},{"location":"api/solid/interfaces/GetWacRuleSuccess/#defined-in_3","title":"Defined in","text":"<p>packages/solid/src/resource/wac/results/GetWacRuleSuccess.ts:12</p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/","title":"Interface: GetWacUriSuccess","text":"<p>Returned when the URI for a resources ACL document was successfully retried</p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ResourceSuccess</code></li> </ul> <p>\u21b3 <code>GetWacUriSuccess</code></p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#properties","title":"Properties","text":""},{"location":"api/solid/interfaces/GetWacUriSuccess/#iserror","title":"isError","text":"<p>\u2022 isError: <code>false</code></p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#inherited-from","title":"Inherited from","text":"<p>ResourceSuccess.isError</p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/results/success/SuccessResult.ts:7</p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#type","title":"type","text":"<p>\u2022 type: <code>\"getWacUriSuccess\"</code></p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#overrides","title":"Overrides","text":"<p>ResourceSuccess.type</p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/resource/wac/results/GetWacUriSuccess.ts:8</p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#uri","title":"uri","text":"<p>\u2022 uri: <code>string</code></p> <p>The URI of the resource</p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#inherited-from_1","title":"Inherited from","text":"<p>ResourceSuccess.uri</p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/requester/results/success/SuccessResult.ts:17</p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#wacuri","title":"wacUri","text":"<p>\u2022 wacUri: <code>LeafUri</code></p> <p>The URI of the ACL document</p>"},{"location":"api/solid/interfaces/GetWacUriSuccess/#defined-in_3","title":"Defined in","text":"<p>packages/solid/src/resource/wac/results/GetWacUriSuccess.ts:12</p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/","title":"Interface: SetWacRuleSuccess","text":"<p>Returned when rules were successfully written</p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ResourceSuccess</code></li> </ul> <p>\u21b3 <code>SetWacRuleSuccess</code></p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#properties","title":"Properties","text":""},{"location":"api/solid/interfaces/SetWacRuleSuccess/#iserror","title":"isError","text":"<p>\u2022 isError: <code>false</code></p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#inherited-from","title":"Inherited from","text":"<p>ResourceSuccess.isError</p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/results/success/SuccessResult.ts:7</p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#type","title":"type","text":"<p>\u2022 type: <code>\"setWacRuleSuccess\"</code></p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#overrides","title":"Overrides","text":"<p>ResourceSuccess.type</p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/resource/wac/results/SetWacRuleSuccess.ts:8</p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#uri","title":"uri","text":"<p>\u2022 uri: <code>string</code></p> <p>The URI of the resource</p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#inherited-from_1","title":"Inherited from","text":"<p>ResourceSuccess.uri</p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/requester/results/success/SuccessResult.ts:17</p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#wacrule","title":"wacRule","text":"<p>\u2022 wacRule: <code>WacRule</code></p> <p>The written rule</p>"},{"location":"api/solid/interfaces/SetWacRuleSuccess/#defined-in_3","title":"Defined in","text":"<p>packages/solid/src/resource/wac/results/SetWacRuleSuccess.ts:12</p>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/","title":"Interface: SolidLdoDatasetContext","text":"<p>Context to be shared between aspects of a SolidLdoDataset</p>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#properties","title":"Properties","text":""},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#fetch","title":"fetch","text":"<p>\u2022 fetch: (<code>input</code>: <code>RequestInfo</code> | <code>URL</code>, <code>init?</code>: <code>RequestInit</code>) =&gt; <code>Promise</code>\\&lt;<code>Response</code>&gt;(<code>input</code>: <code>string</code> | <code>Request</code> | <code>URL</code>, <code>init?</code>: <code>RequestInit</code>) =&gt; <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>Http fetch function</p>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>input</code>, <code>init?</code>): <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>Http fetch function</p>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#parameters","title":"Parameters","text":"Name Type <code>input</code> <code>RequestInfo</code> | <code>URL</code> <code>init?</code> <code>RequestInit</code>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>\u25b8 (<code>input</code>, <code>init?</code>): <code>Promise</code>\\&lt;<code>Response</code>&gt;</p> <p>Http fetch function</p>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#parameters_1","title":"Parameters","text":"Name Type <code>input</code> <code>string</code> | <code>Request</code> | <code>URL</code> <code>init?</code> <code>RequestInit</code>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>Response</code>&gt;</p>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#defined-in","title":"Defined in","text":"<p>packages/solid/src/SolidLdoDatasetContext.ts:19</p>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#resourcestore","title":"resourceStore","text":"<p>\u2022 resourceStore: <code>ResourceStore</code></p> <p>The resource store of the SolidLdoDataset</p>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/SolidLdoDatasetContext.ts:15</p>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#solidldodataset","title":"solidLdoDataset","text":"<p>\u2022 solidLdoDataset: <code>SolidLdoDataset</code></p> <p>A pointer to the parent SolidLdoDataset</p>"},{"location":"api/solid/interfaces/SolidLdoDatasetContext/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/SolidLdoDatasetContext.ts:11</p>"},{"location":"api/solid/interfaces/WacRule/","title":"Interface: WacRule","text":"<p>A list of modes for each kind of agent</p>"},{"location":"api/solid/interfaces/WacRule/#properties","title":"Properties","text":""},{"location":"api/solid/interfaces/WacRule/#agent","title":"agent","text":"<p>\u2022 agent: <code>Record</code>\\&lt;<code>string</code>, <code>AccessModeList</code>&gt;</p>"},{"location":"api/solid/interfaces/WacRule/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/WacRule.ts:17</p>"},{"location":"api/solid/interfaces/WacRule/#authenticated","title":"authenticated","text":"<p>\u2022 authenticated: <code>AccessModeList</code></p>"},{"location":"api/solid/interfaces/WacRule/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/resource/wac/WacRule.ts:16</p>"},{"location":"api/solid/interfaces/WacRule/#public","title":"public","text":"<p>\u2022 public: <code>AccessModeList</code></p>"},{"location":"api/solid/interfaces/WacRule/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/resource/wac/WacRule.ts:15</p>"},{"location":"api/solid/interfaces/WacRuleAbsent/","title":"Interface: WacRuleAbsent","text":"<p>Returned if no WAC rule was returned from the server</p>"},{"location":"api/solid/interfaces/WacRuleAbsent/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ResourceSuccess</code></li> </ul> <p>\u21b3 <code>WacRuleAbsent</code></p>"},{"location":"api/solid/interfaces/WacRuleAbsent/#properties","title":"Properties","text":""},{"location":"api/solid/interfaces/WacRuleAbsent/#iserror","title":"isError","text":"<p>\u2022 isError: <code>false</code></p>"},{"location":"api/solid/interfaces/WacRuleAbsent/#inherited-from","title":"Inherited from","text":"<p>ResourceSuccess.isError</p>"},{"location":"api/solid/interfaces/WacRuleAbsent/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/results/success/SuccessResult.ts:7</p>"},{"location":"api/solid/interfaces/WacRuleAbsent/#type","title":"type","text":"<p>\u2022 type: <code>\"wacRuleAbsent\"</code></p>"},{"location":"api/solid/interfaces/WacRuleAbsent/#overrides","title":"Overrides","text":"<p>ResourceSuccess.type</p>"},{"location":"api/solid/interfaces/WacRuleAbsent/#defined-in_1","title":"Defined in","text":"<p>packages/solid/src/resource/wac/results/WacRuleAbsent.ts:7</p>"},{"location":"api/solid/interfaces/WacRuleAbsent/#uri","title":"uri","text":"<p>\u2022 uri: <code>string</code></p> <p>The URI of the resource</p>"},{"location":"api/solid/interfaces/WacRuleAbsent/#inherited-from_1","title":"Inherited from","text":"<p>ResourceSuccess.uri</p>"},{"location":"api/solid/interfaces/WacRuleAbsent/#defined-in_2","title":"Defined in","text":"<p>packages/solid/src/requester/results/success/SuccessResult.ts:17</p>"},{"location":"api/solid/types/CheckRootResult/","title":"Type alias: CheckRootResult","text":"<p>\u01ac CheckRootResult: <code>CheckRootContainerSuccess</code> | <code>CheckRootResultError</code></p> <p>checkRootContainer result</p>"},{"location":"api/solid/types/CheckRootResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/checkRootContainer.ts:17</p>"},{"location":"api/solid/types/CheckRootResultError/","title":"Type alias: CheckRootResultError","text":"<p>\u01ac CheckRootResultError: <code>HttpErrorResultType</code> | <code>NoncompliantPodError</code> | <code>UnexpectedHttpError</code> | <code>UnexpectedResourceError</code></p> <p>All possible errors checkRootResult can return</p>"},{"location":"api/solid/types/CheckRootResultError/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/checkRootContainer.ts:22</p>"},{"location":"api/solid/types/ContainerCreateAndOverwriteResult/","title":"Type alias: ContainerCreateAndOverwriteResult","text":"<p>\u01ac ContainerCreateAndOverwriteResult: <code>CreateSuccess</code> | <code>CreateAndOverwriteResultErrors</code></p> <p>All possible return values when creating and overwriting a container</p>"},{"location":"api/solid/types/ContainerCreateAndOverwriteResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:27</p>"},{"location":"api/solid/types/ContainerCreateIfAbsentResult/","title":"Type alias: ContainerCreateIfAbsentResult","text":"<p>\u01ac ContainerCreateIfAbsentResult: <code>CreateSuccess</code> | <code>Exclude</code>\\&lt;<code>ReadContainerResult</code>, <code>AbsentReadSuccess</code>&gt; | <code>CreateIfAbsentResultErrors</code></p> <p>All possible return values when creating a container if absent</p>"},{"location":"api/solid/types/ContainerCreateIfAbsentResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:41</p>"},{"location":"api/solid/types/ContainerUri/","title":"Type alias: ContainerUri","text":"<p>\u01ac ContainerUri: `${string}/${NonPathnameEnding}` &amp; {}</p> <p>A LeafUri is any URI that has a pahtname that ends in a \"/\". It represents a container.</p>"},{"location":"api/solid/types/ContainerUri/#defined-in","title":"Defined in","text":"<p>packages/solid/src/util/uriTypes.ts:7</p>"},{"location":"api/solid/types/CreateAndOverwriteResultErrors/","title":"Type alias: CreateAndOverwriteResultErrors","text":"<p>\u01ac CreateAndOverwriteResultErrors: <code>DeleteResultError</code> | <code>CreateErrors</code></p> <p>All possible errors returned by creating and overwriting a resource</p>"},{"location":"api/solid/types/CreateAndOverwriteResultErrors/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:57</p>"},{"location":"api/solid/types/CreateErrors/","title":"Type alias: CreateErrors","text":"<p>\u01ac CreateErrors: <code>HttpErrorResultType</code> | <code>UnexpectedResourceError</code></p> <p>All possible errors returned by creating a resource</p>"},{"location":"api/solid/types/CreateErrors/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:67</p>"},{"location":"api/solid/types/CreateIfAbsentResultErrors/","title":"Type alias: CreateIfAbsentResultErrors","text":"<p>\u01ac CreateIfAbsentResultErrors: <code>ReadResultError</code> | <code>CreateErrors</code></p> <p>All possible errors returned by creating a resource if absent</p>"},{"location":"api/solid/types/CreateIfAbsentResultErrors/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:62</p>"},{"location":"api/solid/types/DeleteResult/","title":"Type alias: DeleteResult","text":"<p>\u01ac DeleteResult: <code>DeleteSuccess</code> | <code>DeleteResultError</code></p> <p>All possible return values for deleteResource</p>"},{"location":"api/solid/types/DeleteResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/deleteResource.ts:14</p>"},{"location":"api/solid/types/DeleteResultError/","title":"Type alias: DeleteResultError","text":"<p>\u01ac DeleteResultError: <code>HttpErrorResultType</code> | <code>UnexpectedResourceError</code></p> <p>All possible errors that can be returned by deleteResource</p>"},{"location":"api/solid/types/DeleteResultError/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/deleteResource.ts:19</p>"},{"location":"api/solid/types/GetWacRuleError/","title":"Type alias: GetWacRuleError","text":"<p>\u01ac GetWacRuleError: <code>HttpErrorResultType</code> | <code>NoncompliantPodError</code> | <code>UnexpectedResourceError</code></p>"},{"location":"api/solid/types/GetWacRuleError/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/getWacRule.ts:14</p>"},{"location":"api/solid/types/GetWacRuleResult/","title":"Type alias: GetWacRuleResult","text":"<p>\u01ac GetWacRuleResult: <code>GetWacRuleSuccess</code> | <code>GetWacRuleError</code> | <code>WacRuleAbsent</code></p>"},{"location":"api/solid/types/GetWacRuleResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/getWacRule.ts:18</p>"},{"location":"api/solid/types/GetWacUriError/","title":"Type alias: GetWacUriError","text":"<p>\u01ac GetWacUriError: <code>HttpErrorResultType</code> | <code>NotFoundHttpError</code> | <code>NoncompliantPodError</code> | <code>UnexpectedResourceError</code></p>"},{"location":"api/solid/types/GetWacUriError/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/getWacUri.ts:14</p>"},{"location":"api/solid/types/GetWacUriResult/","title":"Type alias: GetWacUriResult","text":"<p>\u01ac GetWacUriResult: <code>GetWacUriSuccess</code> | <code>GetWacUriError</code></p>"},{"location":"api/solid/types/GetWacUriResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/getWacUri.ts:19</p>"},{"location":"api/solid/types/LeafCreateAndOverwriteResult/","title":"Type alias: LeafCreateAndOverwriteResult","text":"<p>\u01ac LeafCreateAndOverwriteResult: <code>CreateSuccess</code> | <code>CreateAndOverwriteResultErrors</code></p> <p>All possible return values when creating and overwriting a leaf</p>"},{"location":"api/solid/types/LeafCreateAndOverwriteResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:34</p>"},{"location":"api/solid/types/LeafCreateIfAbsentResult/","title":"Type alias: LeafCreateIfAbsentResult","text":"<p>\u01ac LeafCreateIfAbsentResult: <code>CreateSuccess</code> | <code>Exclude</code>\\&lt;<code>ReadLeafResult</code>, <code>AbsentReadSuccess</code>&gt; | <code>CreateIfAbsentResultErrors</code></p> <p>All possible return values when creating a leaf if absent</p>"},{"location":"api/solid/types/LeafCreateIfAbsentResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/createDataResource.ts:49</p>"},{"location":"api/solid/types/LeafUri/","title":"Type alias: LeafUri","text":"<p>\u01ac LeafUri: `${string}${EveryLegalPathnameCharacterOtherThanSlash}${NonPathnameEnding}` &amp; {}</p> <p>A LeafUri is any URI that does not have a pahtname that ends in a \"/\". It represents a data resource or a binary resource. Not a container.</p>"},{"location":"api/solid/types/LeafUri/#defined-in","title":"Defined in","text":"<p>packages/solid/src/util/uriTypes.ts:13</p>"},{"location":"api/solid/types/ReadContainerResult/","title":"Type alias: ReadContainerResult","text":"<p>\u01ac ReadContainerResult: <code>ContainerReadSuccess</code> | <code>AbsentReadSuccess</code> | <code>ReadResultError</code></p> <p>All possible return values for reading a container</p>"},{"location":"api/solid/types/ReadContainerResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/readResource.ts:36</p>"},{"location":"api/solid/types/ReadLeafResult/","title":"Type alias: ReadLeafResult","text":"<p>\u01ac ReadLeafResult: <code>BinaryReadSuccess</code> | <code>DataReadSuccess</code> | <code>AbsentReadSuccess</code> | <code>ReadResultError</code></p> <p>All possible return values for reading a leaf</p>"},{"location":"api/solid/types/ReadLeafResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/readResource.ts:27</p>"},{"location":"api/solid/types/ReadResultError/","title":"Type alias: ReadResultError","text":"<p>\u01ac ReadResultError: <code>HttpErrorResultType</code> | <code>NoncompliantPodError</code> | <code>UnexpectedHttpError</code> | <code>UnexpectedResourceError</code></p> <p>All possible errors the readResource function can return</p>"},{"location":"api/solid/types/ReadResultError/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/readResource.ts:44</p>"},{"location":"api/solid/types/SetWacRuleError/","title":"Type alias: SetWacRuleError","text":"<p>\u01ac SetWacRuleError: <code>HttpErrorResultType</code> | <code>UnexpectedResourceError</code></p>"},{"location":"api/solid/types/SetWacRuleError/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/setWacRule.ts:16</p>"},{"location":"api/solid/types/SetWacRuleResult/","title":"Type alias: SetWacRuleResult","text":"<p>\u01ac SetWacRuleResult: <code>SetWacRuleSuccess</code> | <code>SetWacRuleError</code></p>"},{"location":"api/solid/types/SetWacRuleResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/wac/setWacRule.ts:17</p>"},{"location":"api/solid/types/SharedStatuses/","title":"Type alias: SharedStatuses","text":"<p>\u01ac SharedStatuses: <code>Unfetched</code> | <code>DeleteResult</code> | <code>CreateSuccess</code></p> <p>Statuses shared between both Leaf and Container</p>"},{"location":"api/solid/types/SharedStatuses/#defined-in","title":"Defined in","text":"<p>packages/solid/src/resource/Resource.ts:39</p>"},{"location":"api/solid/types/UpdateResult/","title":"Type alias: UpdateResult","text":"<p>\u01ac UpdateResult: <code>UpdateSuccess</code> | <code>UpdateResultError</code></p> <p>All return values for updateDataResource</p>"},{"location":"api/solid/types/UpdateResult/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/updateDataResource.ts:15</p>"},{"location":"api/solid/types/UpdateResultError/","title":"Type alias: UpdateResultError","text":"<p>\u01ac UpdateResultError: <code>HttpErrorResultType</code> | <code>UnexpectedResourceError</code></p> <p>All errors updateDataResource can return</p>"},{"location":"api/solid/types/UpdateResultError/#defined-in","title":"Defined in","text":"<p>packages/solid/src/requester/requests/updateDataResource.ts:20</p>"},{"location":"api/solid-react/","title":"@ldo/solid-react","text":"<p><code>@ldo/solid-react</code> provides tool and hooks for easily building Solid applications using react.</p>"},{"location":"api/solid-react/#guide","title":"Guide","text":"<p>A full walkthrough for using the <code>@ldo/solid</code> library can be found in the For Solid + React Guide</p>"},{"location":"api/solid-react/#installation","title":"Installation","text":"<p>Navigate into your project's root folder and run the following command: <pre><code>cd my_project/\nnpx run @ldo/cli init\n</code></pre></p> <p>Now install the @ldo/solid library</p> <pre><code>npm i @ldo/solid @ldo/solid-react\n</code></pre>"},{"location":"api/solid-react/#manual-installation","title":"Manual Installation","text":"<p>If you already have generated ShapeTypes, you may install the <code>@ldo/ldo</code> and <code>@ldo/solid</code> libraries independently.</p> <pre><code>npm i @ldo/ldo @ldo/solid @ldo/solid-react\n</code></pre>"},{"location":"api/solid-react/#simple-example","title":"Simple Example","text":"<p>Below is a simple example of @ldo/solid-react in a real use-case. Assume that a ShapeType was previously generated and placed at <code>./.ldo/solidProfile.shapeTypess</code>.</p> <pre><code>import type { FunctionComponent } from \"react\";\nimport React, { useCallback } from \"react\";\nimport {\n  BrowserSolidLdoProvider,\n  useResource,\n  useSolidAuth,\n  useSubject,\n} from \"@ldo/solid-react\";\nimport { SolidProfileShapeShapeType } from \"./.ldo/solidProfile.shapeTypes\";\nimport { changeData, commitData } from \"@ldo/solid\";\n\n// The base component for the app\nconst App: FunctionComponent = () =&gt; {\n  return (\n    /* The application should be surrounded with the BrowserSolidLdoProvider\n    this will set up all the underlying infrastructure for the application */\n    &lt;BrowserSolidLdoProvider&gt;\n      &lt;Login /&gt;\n    &lt;/BrowserSolidLdoProvider&gt;\n  );\n};\n\n// A component that handles login\nconst Login: FunctionComponent = () =&gt; {\n  // Get login information using the \"useSolidAuth\" hook\n  const { login, logout, session } = useSolidAuth();\n\n  const onLogin = useCallback(() =&gt; {\n    const issuer = prompt(\"What is your Solid IDP?\");\n    // Call the \"login\" function to initiate login\n    if (issuer) login(issuer);\n  }, []);\n\n  // You can use session.isLoggedIn to check if the user is logged in\n  if (session.isLoggedIn) {\n    return (\n      &lt;div&gt;\n        {/* Get the user's webId from session.webId */}\n        &lt;p&gt;Logged in as {session.webId}&lt;/p&gt;\n        {/* Use the logout function to log out */}\n        &lt;button onClick={logout}&gt;Log Out&lt;/button&gt;\n        &lt;Profile /&gt;\n      &lt;/div&gt;\n    );\n  }\n  return &lt;button onClick={onLogin}&gt;Log In&lt;/button&gt;;\n};\n\n// Renders the name on the profile\nconst Profile: FunctionComponent = () =&gt; {\n  const { session } = useSolidAuth();\n  // With useResource, you can automatically fetch a resource\n  const resource = useResource(session.webId);\n  // With useSubject, you can extract data from that resource\n  const profile = useSubject(SolidProfileShapeShapeType, session.webId);\n\n  const onNameChange = useCallback(async (e) =&gt; {\n    // Ensure that the\n    if (!profile || !resource) return;\n    // Change data lets you create a new object to make changes to\n    const cProfile = changeData(profile, resource);\n    // Change the name\n    cProfile.name = e.target.value;\n    // Commit the data back to the Pod\n    await commitData(cProfile);\n  }, []);\n\n  return &lt;input type=\"text\" value={profile?.name} onChange={onNameChange} /&gt;;\n};\n\nexport default App;\n</code></pre>"},{"location":"api/solid-react/#api-details","title":"API Details","text":"<p>Providers</p> <ul> <li>BrowserSolidLdoProvider</li> <li>SolidLdoProvider</li> </ul> <p>Hooks  - useLdo  - useResource  - useRootContainer  - useSolidAuth  - useSubject</p>"},{"location":"api/solid-react/#sponsorship","title":"Sponsorship","text":"<p>This project was made possible by a grant from NGI Zero Entrust via nlnet. Learn more on the NLnet project page.</p> <p> </p>"},{"location":"api/solid-react/#liscense","title":"Liscense","text":"<p>MIT</p>"},{"location":"api/solid-react/BrowserSolidLdoProvider/","title":"<code>BrowserSolidLdoProvider</code>","text":"<p>A BrowserSolidLdoProvider wraps the application and wires up all the base infrastructure to use @ldo/solid-react. Specifically, it works in a web browser environment. This combines SolidLdoProvider with the login functions of @inrupt/solid-client-authn-browser</p>"},{"location":"api/solid-react/BrowserSolidLdoProvider/#usage","title":"Usage","text":"<pre><code>import type { FunctionComponent } from \"react\";\nimport React from \"react\";\nimport {\n  BrowserSolidLdoProvider,\n} from \"@ldo/solid-react\";\n\n// The base component for the app\nconst App: FunctionComponent = () =&gt; {\n  return (\n    /* The application should be surrounded with the BrowserSolidLdoProvider\n    this will set up all the underlying infrastructure for the application */\n    &lt;BrowserSolidLdoProvider&gt;\n      &lt;Login /&gt;\n    &lt;/BrowserSolidLdoProvider&gt;\n  );\n};\n</code></pre>"},{"location":"api/solid-react/BrowserSolidLdoProvider/#props","title":"Props","text":"<ul> <li><code>children</code>: ReactNode - the application that should be wrapped</li> </ul>"},{"location":"api/solid-react/SolidLdoProvider/","title":"<code>SolidLdoProvider</code>","text":"<p>A Provider for the LDO-related party of the library.</p> <p>Note: This does not provide auth functionality. It is suggested that you use the BrowserSolidLdoProvider to initialize the app.</p>"},{"location":"api/solid-react/SolidLdoProvider/#usage","title":"Usage","text":"<pre><code>import type { FunctionComponent } from \"react\";\nimport React from \"react\";\nimport {\n  SolidLdoProvider,\n} from \"@ldo/solid-react\";\n\n// The base component for the app\nconst App: FunctionComponent = () =&gt; {\n  return (\n    &lt;SolidLdoProvider&gt;\n      &lt;ReastOfTheApp /&gt;\n    &lt;/SolidLdoProvider&gt;\n  );\n};\n</code></pre>"},{"location":"api/solid-react/SolidLdoProvider/#props","title":"Props","text":"<ul> <li><code>children</code>: ReactNode - the application that should be wrapped</li> </ul>"},{"location":"api/solid-react/useLdo/","title":"<code>useLdo</code>","text":"<p>A hook that returns the following helpers:</p>"},{"location":"api/solid-react/useLdo/#dataset","title":"<code>dataset</code>","text":"<p>The global dataset for the application. </p> <pre><code>import { useLdo } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { dataset } = useLdo();\n\n  useEffect(() =&gt; {\n    // Logs the global dataset as n-tiples\n    console.log(dataset.toString());\n  }, []);\n}\n</code></pre>"},{"location":"api/solid-react/useLdo/#getresource","title":"<code>getResource</code>","text":"<p>A function that lets you retrieve a resource. This functionally serves the same purpose as <code>useResource</code>, but in a non-hook form.</p> <pre><code>import { useLdo } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { getResource } = useLdo();\n\n  useEffect(() =&gt; {\n    const resource = getResource(\"https://example.com/\");\n  }, []);\n}\n</code></pre>"},{"location":"api/solid-react/useLdo/#parameters","title":"Parameters","text":"<ul> <li><code>uri: string</code>: the URI or the resource</li> <li><code>options</code>: object with the following fields:</li> <li><code>autoLoad: boolean</code> - true if the resource should autoload</li> </ul>"},{"location":"api/solid-react/useLdo/#returns","title":"Returns","text":"<p>A Leaf or Container depending on the URI</p>"},{"location":"api/solid-react/useLdo/#getsubject","title":"<code>getSubject</code>","text":"<p>A function that lets you get a Linked Data Object for a specific subject. This functionally serves the same purpose as <code>useSubject</code>, but in a non-hook form.</p> <pre><code>import { useLdo } from \"@ld/solid-react\";\nimport React, { FunctionComponent } from \"react\";\nimport { ProfileShapeType } from \"./.ldo/Profile.shapeType\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { getSubject } = useLdo();\n\n  useEffect(() =&gt; {\n    const profile = getSubject(\n      ProfileShapeType,\n      \"https://example.com/profile#me\"\n    );\n    console.log(profile?.name);\n  }, []);\n}\n</code></pre>"},{"location":"api/solid-react/useLdo/#parameters_1","title":"Parameters","text":"<ul> <li><code>ShapeType: ShapeType</code> - The ShapeType dictating the shape of the Linked Data Object</li> <li><code>subject: string | SubjectNode</code> - the subject URI</li> </ul>"},{"location":"api/solid-react/useLdo/#returns_1","title":"Returns","text":"<p>A linked data object corresponding to the given subject</p>"},{"location":"api/solid-react/useLdo/#createdata","title":"createData( <p>Creates modifiable data that can be edited and committed.</p> <pre><code>import { useLdo, useResource, commitData } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\nimport { PostShapeType } from \"./.ldo/Post.shapeType\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { createData } = useLdo();\n\n  const resource = useResource(\"https://example.com/post1.ttl\");\n\n  const onCreatePost = useCallback(async () =&gt; {\n    const cPost = createData(\n      PostShapeType,\n      \"https://example.com/post1\",\n      resource\n    );\n    cPost.message = \"This is a post\";\n    await commitData(cPost);\n  }, []);\n\n  return &lt;button onClick={onCreatePost}&gt;Create Post&lt;/button&gt;\n}\n</code></pre>","text":""},{"location":"api/solid-react/useLdo/#parameters_2","title":"Parameters","text":"<ul> <li><code>shapeType: ShapeType&lt;Type&gt;</code> - The ShapeType dictating the shape of the Linked Data Object</li> <li><code>subject: string | SubjectNode</code> - the subject URI</li> <li><code>...resources: Resource[]</code> - Any number of resources that any update should be applied to</li> </ul>"},{"location":"api/solid-react/useLdo/#returns_2","title":"Returns","text":"<p>A Linked Data Object associated with the provided subject</p>"},{"location":"api/solid-react/useLdo/#changedata","title":"<code>changeData</code> <p>Takes a Linked Data Object and turns it into a modifiable Linked Data Object that can be edited and committed.</p> <pre><code>import { useLdo, useResource, useSubject, commitData } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\nimport { ProfileShapeType } from \"./.ldo/Profile.shapeType\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { changeData } = useLdo();\n\n  const resource = useResource(\"https://example.com/profile\");\n  const profile = useSubject(\"https://example.com/subject\")\n\n  const onModifyProfile = useCallback(async () =&gt; {\n    if (!resource || !profile) return;\n    const cProfile = changeData(\n      profile\n      resource\n    );\n    cProfile.name = \"Mr. Cool Dude\";\n    await commitData(cProfile);\n  }, []);\n\n  return &lt;button onClick={onModifyProfile}&gt;Modify Profile&lt;/button&gt;\n}\n</code></pre>","text":""},{"location":"api/solid-react/useLdo/#parameters_3","title":"Parameters","text":"<ul> <li><code>input: Type</code> - The Linked Data Object that should now be modifiable</li> <li><code>...resources: Resource[]</code> - Any resources that all updates should be applied to</li> </ul>"},{"location":"api/solid-react/useLdo/#returns_3","title":"Returns","text":"<p>A Linked Data Object associated with the provided subject</p>"},{"location":"api/solid-react/useLdo/#commitdata","title":"<code>commitData</code> <p>Commits changes made on Linked Data Objects to the Pod.</p> <pre><code>import { useLdo, useResource, commitData } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\nimport { PostShapeType } from \"./.ldo/Post.shapeType\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { createData } = useLdo();\n\n  const resource = useResource(\"https://example.com/post1.ttl\");\n\n  const onCreatePost = useCallback(async () =&gt; {\n    const cPost = createData(\n      PostShapeType,\n      \"https://example.com/post1\",\n      resource\n    );\n    cPost.message = \"This is a post\";\n    const result = await commitData(cPost);\n    if (result.isError) {\n      alert(result.message);\n    }\n  }, []);\n\n  return &lt;button onClick={onCreatePost}&gt;Create Post&lt;/button&gt;\n}\n</code></pre>","text":""},{"location":"api/solid-react/useLdo/#parameters_4","title":"Parameters","text":"<ul> <li><code>input: LdoBase</code> - A changed Linked Data Object</li> </ul>"},{"location":"api/solid-react/useLdo/#returns_4","title":"Returns","text":"<p>An update result</p>"},{"location":"api/solid-react/useResource/","title":"<code>useResource</code>","text":"<p>Fetches a resource and rerenders the component as the state of the resource changes.</p> <pre><code>import { useLdo, useResource, useSubject, commitData } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\nimport { ProfileShapeType } from \"./.ldo/Profile.shapeType\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const resource = useResource(\"https://example.com/profile\");\n\n  if (resource.isLoading()) {\n    return &lt;p&gt;Loading...&lt;/p&gt;\n  }\n  return &lt;p&gt;{resource.uri} loaded&lt;/p&gt;\n}\n</code></pre>"},{"location":"api/solid-react/useResource/#parameters","title":"Parameters","text":"<ul> <li><code>uri: string</code> - the URI of the resource</li> <li><code>options: {}</code> - Options containing the following fields</li> <li><code>suppressInitialRead?: boolean</code> - If true, this hook will not trigger a read event to fetch the document.</li> <li><code>reloadOnMount?: boolean</code> - If true, this hook will trigger a read event whenever this component mounts</li> </ul>"},{"location":"api/solid-react/useResource/#returns","title":"Returns","text":"<p>A resource</p>"},{"location":"api/solid-react/useRootContainer/","title":"<code>useRootContainer</code>","text":"<p>Gets the Root container of the given URI</p> <pre><code>import { useLdo, useResource, useSubject, commitData } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\nimport { ProfileShapeType } from \"./.ldo/Profile.shapeType\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const rootContainer = useRootContainer(\"https://example.com/profile\");\n\n  return &lt;p&gt;RootContainer {rootContainer?.uri}&lt;/p&gt;\n}\n</code></pre>"},{"location":"api/solid-react/useRootContainer/#parameters","title":"Parameters","text":"<ul> <li><code>uri: string</code> - the URI of the resource</li> </ul>"},{"location":"api/solid-react/useRootContainer/#returns","title":"Returns","text":"<p>A root container or undefined if it hasn't been fetched yet</p>"},{"location":"api/solid-react/useSolidAuth/","title":"<code>useSolidAuth</code>","text":"<p>A hook that returns the following helpers for authentication:</p>"},{"location":"api/solid-react/useSolidAuth/#login","title":"<code>login</code>","text":"<p>Logs the user in. Note that this will redirect the window, so any code after this function is called will not be called.</p> <pre><code>import { useSolidAuth } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { login } = useSolidAuth();\n\n  const onLogIn = useCallback(async () =&gt; {\n    const issuer = prompt(\"What is your Solid Identity Provier?\");\n    if (issuer) login(issuer);\n  }, []);\n\n  return &lt;button onClick={onLogIn}&gt;Log In&lt;/button&gt;\n}\n</code></pre>"},{"location":"api/solid-react/useSolidAuth/#parameters","title":"Parameters","text":"<ul> <li><code>issuer: string</code> - The identity provider for the user that is logging in</li> <li><code>loginOptions?: LoginOptions</code> - An object with the following fields</li> <li><code>redirectUrl?: string</code> - A custom redirect url. By default, LDO will redirect to the same page, but you can provide a different page here.</li> <li><code>clientId?: string</code> - A custom clientId. By default, LDO will dynamically register your client</li> <li><code>clientSecret?: string</code> - A custom cleint secret. By default, LDO will dynamically register your client</li> <li><code>clientName?: string</code> - A client name. By default, your client name will be \"Solid Application\"</li> <li><code>tokenType?: \"DPoP\" | \"Bearer\"</code> - Custom token type. By default it's DPoP.</li> <li><code>refreshToken?: string</code> - A refresh token. Providing a refresh token will ensure you don't need to go to a login screen.</li> </ul>"},{"location":"api/solid-react/useSolidAuth/#logout","title":"<code>logout</code>","text":"<p>Logs the current user out of the application.</p> <pre><code>import { useSolidAuth } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { logout } = useSolidAuth();\n\n  return &lt;button onClick={logout}&gt;Log Out&lt;/button&gt;\n}\n</code></pre>"},{"location":"api/solid-react/useSolidAuth/#signup-issuer-string-loginoptions-loginoptions-promise","title":"signUp: (issuer: string, loginOptions?: LoginOptions) =&gt; Promise; <p>WARNING: This function only works on Solid servers that implement the </p> <p>Signup is an experiemental function that will direct users to a Sign-Up flow on a Solid Identity Provider rather than the login flow.</p> <pre><code>import { useSolidAuth } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { signUp } = useSolidAuth();\n\n  const onSignUp = useCallback(async () =&gt; {\n    const issuer = prompt(\"What is your Solid Identity Provier?\");\n    if (issuer) signUp(issuer);\n  }, []);\n\n  return &lt;button onClick={onSignUp}&gt;Sign Up&lt;/button&gt;\n}\n</code></pre>","text":""},{"location":"api/solid-react/useSolidAuth/#parameters_1","title":"Parameters","text":"<ul> <li><code>issuer: string</code> - The identity provider for the user that is logging in</li> <li><code>loginOptions?: LoginOptions</code> - An object with the following fields</li> <li><code>redirectUrl?: string</code> - A custom redirect url. By default, LDO will redirect to the same page, but you can provide a different page here.</li> <li><code>clientId?: string</code> - A custom clientId. By default, LDO will dynamically register your client</li> <li><code>clientSecret?: string</code> - A custom cleint secret. By default, LDO will dynamically register your client</li> <li><code>clientName?: string</code> - A client name. By default, your client name will be \"Solid Application\"</li> <li><code>tokenType?: \"DPoP\" | \"Bearer\"</code> - Custom token type. By default it's DPoP.</li> <li><code>refreshToken?: string</code> - A refresh token. Providing a refresh token will ensure you don't need to go to a login screen.</li> </ul>"},{"location":"api/solid-react/useSolidAuth/#fetch","title":"<code>fetch</code> <p>An authenticated fetch function to make HTTP requests. Most functions on Solid servers can be handled with the LDO API, but if you want to make a raw query to a Solid server, use the <code>fetch</code> function.</p> <pre><code>import { useSolidAuth } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { fetch } = useSolidAuth();\n\n  const onDoFetch = useCallback(async () =&gt; {\n    const response = await fetch(\"https://example.com/\");\n  }, []);\n\n  return &lt;button onClick={onDoFetch}&gt;Do Fetch&lt;/button&gt;\n}\n</code></pre>","text":""},{"location":"api/solid-react/useSolidAuth/#session","title":"<code>session</code> <p>Info on the current session. This object will be updated with recent information on the logged in user.</p> <pre><code>import { useSolidAuth } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { session } = useSolidAuth();\n\n  if (!session.isLoggedIn) {\n    return &lt;p&gt;You are not logged in.&lt;/p&gt;\n  }\n\n  return &lt;p&gt;Logged in as {session.webId}&lt;/p&gt;\n}\n</code></pre>","text":""},{"location":"api/solid-react/useSolidAuth/#fields","title":"Fields","text":"<ul> <li><code>isLoggedIn: boolean</code> - True if the current user is logged in</li> <li><code>webId?: string</code> - The WebId of the current user</li> <li><code>clientAppId?: string</code> - The app id for the client</li> <li><code>sessionId: string</code> - A unique id for this application's setting</li> <li><code>expirationDate?: number</code> - The time the auth token expires</li> </ul>"},{"location":"api/solid-react/useSolidAuth/#raninitialauthcheck","title":"<code>ranInitialAuthCheck</code> <p>A boolean value to check if the auth check at load has been run or not</p> <pre><code>import { useSolidAuth } from \"@ldo/solid-react\";\nimport React, { FunctionComponent } from \"react\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { session, ranInitialAuthCheck } = useSolidAuth();\n\n  if (!ranInitialAuthCheck) {\n    return &lt;p&gt;Loading&lt;/p&gt;\n  }\n\n  if (!session.isLoggedIn) {\n    return &lt;p&gt;You are not logged in.&lt;/p&gt;\n  }\n\n  return &lt;p&gt;Logged in as {session.webId}&lt;/p&gt;\n}\n</code></pre>","text":""},{"location":"api/solid-react/useSubject/","title":"<code>useSubject</code>","text":"<p>A hook that lets you get a Linked Data Object for a specific subject.</p> <pre><code>import { useLdo } from \"@ld/solid-react\";\nimport React, { FunctionComponent } from \"react\";\nimport { ProfileShapeType } from \"./.ldo/Profile.shapeType\";\n\nconst Component: FunctionComponent = () =&gt; {\n  const { getSubject } = useLdo();\n\n  const profile = useSubject(ProfileShapeType, \"https://example.com/profile#me\");\n\n  return &lt;p&gt;Name: {profile?.name}&lt;/p&gt;\n}\n</code></pre>"},{"location":"api/solid-react/useSubject/#parameters","title":"Parameters","text":"<ul> <li><code>ShapeType: ShapeType</code> - The ShapeType dictating the shape of the Linked Data Object</li> <li><code>subject: string | SubjectNode</code> - the subject URI</li> </ul>"},{"location":"api/solid-react/useSubject/#returns","title":"Returns","text":"<p>A linked data object corresponding to the given subject</p>"},{"location":"api/subscribable-dataset/","title":"Index","text":"<p>This page is not yet written.</p>"},{"location":"api/traverser-shexj/","title":"Index","text":"<p>This page is not yet written.</p>"},{"location":"api/type-traverser/","title":"Index","text":"<p>This page is not yet written.</p>"},{"location":"guides/","title":"LDO Guides","text":"<p>The guies on ldo.js.org will help walk you through how to build solutions with LDO for your specific use case.</p>"},{"location":"guides/advanced_data_manipulation/","title":"Advanced Data Manipulation Guide","text":"<p>LDO attempts to make reading and manipulating data as similar to JSON as possible. However, because LDO's job is to translate actions into RDF, there are advanced techniques that can be employed to do actions that can't be done on JSON.</p>"},{"location":"guides/advanced_data_manipulation/#changing-an-objects-id","title":"Changing an Object's Id","text":"<p>You can rename an object by setting its <code>@id</code> field. This will update all triples that reference the id to the new id.</p> <pre><code>const dataset = await serializedToDataset(`\n  @prefix example: &lt;http://example.com/&gt; .\n  @prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .\n  @prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .\n\n  example:Person1\n    foaf:name \"Alice\"^^xsd:string;\n    foaf:bestFriend example:Person2.\n\n  example:Person2\n    foaf:bestFriend example:Person1.\n`);\nconst person = jsonldDatasetProxy(\n  dataset,\n  PersonContext\n).fromSubject&lt;IPerson&gt;(namedNode(\"http://example.com/Person1\"))\nperson[\"@id\"] = \"http://example.com/NewPersonId\";\nconsole.log(dataset.toString());\n// &lt;http://example.com/Person2&gt; &lt;http://xmlns.com/foaf/0.1/bestFriend&gt; &lt;http://example.com/NewPersonId&gt; .\n// &lt;http://example.com/NewPersonId&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Alice\" .\n// &lt;http://example.com/NewPersonId&gt; &lt;http://xmlns.com/foaf/0.1/bestFriend&gt; &lt;http://example.com/Person2&gt; .\n</code></pre>"},{"location":"guides/advanced_data_manipulation/#removing-an-object-connection","title":"Removing an Object Connection","text":"<p>Removing one triple can be done by setting a property to <code>undefined</code>;</p> <pre><code>const dataset = await serializedToDataset(`\n  @prefix example: &lt;http://example.com/&gt; .\n  @prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .\n  @prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .\n\n  example:Person1\n    foaf:name \"Alice\"^^xsd:string;\n    foaf:bestFriend example:Person2.\n\n  example:Person2\n    foaf:name \"Bob\"^^xsd:string;\n    foaf:bestFriend example:Person1.\n`);\nconst person = jsonldDatasetProxy(\n  dataset,\n  PersonContext\n).fromSubject&lt;IPerson&gt;(namedNode(\"http://example.com/Person1\"));\nperson.bestFriend = undefined;\nconsole.log(dataset.toString());\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Alice\" .\n// &lt;http://example.com/Person2&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Bob\" .\n// &lt;http://example.com/Person2&gt; &lt;http://xmlns.com/foaf/0.1/bestFriend&gt; &lt;http://example.com/Person1&gt; .\n</code></pre>"},{"location":"guides/advanced_data_manipulation/#deleting-an-entire-object","title":"Deleting an Entire Object","text":"<p>If you want to delete all triples represented by an object, there are two ways using the <code>delete</code> operator.</p> <p>First, you can call <code>delete</code> on a specific property: <pre><code>const dataset = await serializedToDataset(`\n  @prefix example: &lt;http://example.com/&gt; .\n  @prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .\n  @prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .\n\n  example:Person1\n    foaf:name \"Alice\"^^xsd:string;\n    foaf:bestFriend example:Person2.\n\n  example:Person2\n    foaf:name \"Bob\"^^xsd:string;\n    foaf:bestFriend example:Person1.\n`);\nconst person = jsonldDatasetProxy(\n  dataset,\n  PersonContext\n).fromSubject&lt;IPerson&gt;(namedNode(\"http://example.com/Person1\"));\ndelete person.bestFriend;\nconsole.log(dataset.toString());\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Alice\" .\n</code></pre></p> <p>And secondly, you can call <code>delete</code> on the <code>@id</code> property. <pre><code>const dataset = await serializedToDataset(`\n  @prefix example: &lt;http://example.com/&gt; .\n  @prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .\n  @prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .\n\n  example:Person1\n    foaf:name \"Alice\"^^xsd:string;\n    foaf:bestFriend example:Person2.\n\n  example:Person2\n    foaf:name \"Bob\"^^xsd:string;\n    foaf:bestFriend example:Person1.\n`);\nconst person = jsonldDatasetProxy(\n  dataset,\n  PersonContext\n).fromSubject&lt;IPerson&gt;(namedNode(\"http://example.com/Person1\"));\ndelete person[\"@id\"];\nconsole.log(dataset.toString());\n// &lt;http://example.com/Person2&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Bob\" .\n</code></pre></p>"},{"location":"guides/advanced_data_manipulation/#using-blank-nodes","title":"Using Blank Nodes","text":"<p>If you want to create an object with a blankNode subject, simply omit the <code>@id</code> field when you're making the object. <pre><code>const dataset = await createDataset();\nconst person = jsonldDatasetProxy(\n  dataset,\n  PersonContext\n).fromSubject&lt;IPerson&gt;(namedNode(\"http://example.com/Person1\"));\nperson.bestFriend = {\n  name: [\"Charlie\"],\n};\nconsole.log(dataset.toString());\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/bestFriend&gt; _:b1 .\n// _:b1 &lt;http://xmlns.com/foaf/0.1/name&gt; \"Charlie\" .\n</code></pre></p> <p>If your dataset has blank nodes and you want to assign that blank node as a triple's object, you can retrieve it from the JSONLD Dataset Proxy and assign it. <pre><code>const dataset = await serializedToDataset(`\n  @prefix example: &lt;http://example.com/&gt; .\n  @prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .\n  @prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .\n\n  example:Person1\n    foaf:knows [\n      foaf:name \"Alice\"^^xsd:string;\n    ].\n`);\nconst person = jsonldDatasetProxy(\n  dataset,\n  PersonContext,\n).fromSubject&lt;IPerson&gt;(namedNode(\"http://example.com/Person1\"));\n\nconst alice = person.knows?.[0];\nperson.bestFriend = alice;\nconsole.log(dataset.toString());\n// _:n3-0 &lt;http://xmlns.com/foaf/0.1/name&gt; \"Alice\" .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/knows&gt; _:n3-0 .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/bestFriend&gt; _:n3-0 .\n</code></pre></p>"},{"location":"guides/advanced_data_manipulation/#writing-information-to-a-specific-graph","title":"Writing Information to a Specific Graph","text":"<p>By default, all new quads are added to the default graph, but you can change the graph to which new quads are added in a few different ways:</p> <p>NOTE: These operations only dictate the graph for new triples. Any operations that delete triples will delete triples regardless of their graph.</p>"},{"location":"guides/advanced_data_manipulation/#jsonlddatasetproxywritegraphs","title":"<code>jsonldDatasetProxy(...).write(...graphs)</code>","text":"<p>The write graph can be set upon creating a jsonld dataset proxy by using the <code>write</code> method. This method takes in any number of graphs.</p> <pre><code>const person1 = jsonldDatasetProxy(dataset, PersonContext)\n  .write(namedNode(\"http://example.com/ExampleGraph\"))\n  .fromSubject&lt;IPerson&gt;(namedNode(\"http://example.com/Person1\"));\nperson1.name.push(\"Jack\");\nconsole.log(dataset.toString());\n// Logs:\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jack\" &lt;http://example.com/ExampleGraph&gt; .\n</code></pre>"},{"location":"guides/advanced_data_manipulation/#writegraphsusingjsonlddatasetproxies","title":"<code>write(...graphs).using(...jsonldDatasetProxies)</code>","text":"<p>The <code>write(...).using(...)</code> function lets you define the graphs you wish to write to using specific jsonldDatasetProxies.</p> <pre><code>import jsonldDatasetProxy, { write } from \"jsonld-dataset-proxy\";\n\nconst person1 = jsonldDatasetProxy(\n  dataset,\n  PersonContext\n).fromSubject&lt;IPerson&gt;(namedNode(\"http://example.com/Person1\"));\n// Now all additions with person1 will be on ExampleGraph1\nwrite(namedNode(\"http://example.com/ExampleGraph1\")).using(person1);\nperson1.name.push(\"Jack\");\n// Now all additions with person1 will be on ExampleGraph2\nwrite(namedNode(\"http://example.com/ExampleGraph2\")).using(person1);\nperson1.name.push(\"Spicer\");\n\nconsole.log(dataset.toString());\n// Logs:\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jack\" &lt;http://example.com/ExampleGraph1&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Spicer\" &lt;http://example.com/ExampleGraph2&gt; .\n</code></pre> <p>The function also returns an <code>end</code> function that will reset the graph to what it was before. This is useful for nesting graph modifications.</p> <pre><code>const person1 = jsonldDatasetProxy(\n  dataset,\n  PersonContext\n).fromSubject&lt;IPerson&gt;(namedNode(\"http://example.com/Person1\"));\nperson1.name.push(\"default\");\nconst end1 = write(namedNode(\"http://example.com/Graph1\")).using(person1);\nperson1.name.push(\"1\");\nconst end2 = write(namedNode(\"http://example.com/Graph2\")).using(person1);\nperson1.name.push(\"2\");\nconst end3 = write(namedNode(\"http://example.com/Graph3\")).using(person1);\nperson1.name.push(\"3\");\nend3();\nperson1.name.push(\"2 again\");\nend2();\nperson1.name.push(\"1 again\");\nend1();\nperson1.name.push(\"default again\");\nconsole.log(dataset.toString());\n// Logs:\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"default\" .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"default again\" .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"1\" &lt;http://example.com/Graph1&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"1 again\" &lt;http://example.com/Graph1&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"2\" &lt;http://example.com/Graph2&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"2 again\" &lt;http://example.com/Graph2&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"3\" &lt;http://example.com/Graph3&gt; .\n</code></pre>"},{"location":"guides/advanced_data_manipulation/#writegraphsusingcopyjsonlddatasetproxies","title":"<code>write(...graphs).usingCopy(...jsonldDatasetProxies)</code>","text":"<p>If you would like a new variable to write to without modifying the original Jsonld Dataset Proxy, you can use <code>write(...).usingCopy(...)</code>.</p> <pre><code>const person1 = jsonldDatasetProxy(\n  dataset,\n  PersonContext\n).fromSubject&lt;IPerson&gt;(namedNode(\"http://example.com/Person1\"));\nconst [person1WritingToNewGraph] = write(\n  namedNode(\"http://example.com/NewGraph\")\n).usingCopy(person1);\nperson1WritingToNewGraph.name.push(\"Brandon\");\nperson1.name.push(\"Sanderson\");\nconsole.log(dataset.toString());\n// Logs:\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Brandon\" &lt;http://example.com/NewGraph&gt; .\n// &lt;http://example.com/Person1&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Sanderson\" .\n</code></pre>"},{"location":"guides/advanced_data_manipulation/#detecting-the-graph-of-specific-information","title":"Detecting the graph of specific information","text":"<p>The graph of specific information can be detected using the <code>graphOf(subject, predicate, object)</code> function. The <code>graphOf</code> function takes in two to three arguments.</p> <ul> <li><code>subject</code>: A Jsonld Dataset Proxy that represents the subject of a quad.</li> <li><code>predicate</code>: A string key</li> <li><code>object?</code>: An optional parameter that represents the direct object of a statement. This could be a Jsonld Dataset Proxy or a number to indicate the location in an array. This argument can be left blank if the given field is not an array.</li> </ul> <pre><code>graphOf(person, \"name\", 0); // returns defaultGraph()\ngraphOf(person, \"age\"); // returns defaultGraph()\n</code></pre>"},{"location":"guides/advanced_data_manipulation/#managing-language-tags","title":"Managing Language Tags","text":"<p>RDF includes a special attribute for string literals called a language tag. Language tags let developers provide string representations for many different translations and JSON-LD Dataset Proxy helps you manage them.</p> <p>To use language tags, RDF requires the datatype of a literal to be <code>http://www.w3.org/1999/02/22-rdf-syntax-ns#langString</code>, and LDO's functions will only work on literals of type that type.</p> <p>For the following examples, we'll use this context and dataset, typescript typing and JSON-LD Context. Notice that there is a field called \"label\" with translations for French and Korean and one language string that doesn't have a language tag. There's also a field called \"description\" that holds multiple strings per language.</p> <pre><code>// Define initial data\nconst initialData = `\n  @prefix example: &lt;http://example.com/&gt; .\n  @prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .\n  @prefix ns: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .\n\n  example:Hospital\n    rdfs:label \"Hospital\"^^ns:langString;\n    rdfs:label \"H\u00f4pital\"@fr;\n    rdfs:label \"\ubcd1\uc6d0\"@ko;\n    rdfs:description \"Heals patients\"^^ns:langString;\n    rdfs:description \"Has doctors\"^^ns:langString;\n    rdfs:description \"Gu\u00e9rit les malades\"@fr;\n    rdfs:description \"A des m\u00e9decins\"@fr;\n    rdfs:description \"\ud658\uc790\ub97c \uce58\ub8cc\ud558\ub2e4\"@ko;\n    rdfs:description \"\uc758\uc0ac \uc788\uc74c\"@ko.\n`;\n\n// Typescript Typing\ninterface IThing {\n  label: string;\n  description: string[];\n}\n\n// Define JSON-LD Context\nconst PersonContext: ContextDefinition = {\n  label: {\n    \"@id\": \"http://www.w3.org/2000/01/rdf-schema#label\",\n    \"@type\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\",\n  },\n  description: {\n    \"@id\": \"http://www.w3.org/2000/01/rdf-schema#description\",\n    \"@type\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#langString\",\n    \"@container\": \"@set\",\n  },\n};\n</code></pre>"},{"location":"guides/advanced_data_manipulation/#language-preferences","title":"Language Preferences","text":"<p>A language preference is an ordered list telling the JSON-LD Dataset Proxy the language you prefer as well as callbacks. </p> <p>Valid values for the language preferences includes any IETF Language Tag as well as the special tags <code>@none</code> and <code>@other</code>. <code>@none</code> represents any language literal that doesn't have a language tag. <code>@other</code> represents any language literal that isn't listed among the language preferences.</p> <p>For read operations, the JSON-LD Dataset Proxy will search for values in order of the preference. Write operations will choose the first language in the language preference, unless that language is <code>@other</code>, in which case it will choose the next language.</p> <pre><code>// Read Spansih first, then Korean, then language strings with no language\n// New writes are in Spanish\n[\"es\", \"ko\", \"@none\"]\n\n// Read any language other than french, then french\n// New writes are in French\n[\"@other\", \"fr\"]\n</code></pre> <p>Language preferences can be set when a JSON-LD Dataset Proxy is created using the <code>setLanguagePreferences</code> method.</p> <pre><code>// Create a dataset loaded with initial data\nconst dataset = await serializedToDataset(initialData);\n// Make a JSONLD Dataset Proxy\nconst hospitalInfo = jsonldDatasetProxy(dataset, PersonContext)\n  .setLanguagePreferences(\"es\", \"ko\", \"@none\")\n  .fromSubject&lt;IThing&gt;(namedNode(\"http://example.com/Hospital\"));\n\nconsole.log(hospitalInfo.label); // Logs \"\ubcd1\uc6d0\"\nconsole.log(hospitalInfo.description.length); // Logs \"2\" for the 2 korean entries\nconsole.log(hospitalInfo.description[0]); // Logs \"\ud658\uc790\ub97c \uce58\ub8cc\ud558\ub2e4\"\nconsole.log(hospitalInfo.description[1]); // Logs \"\uc758\uc0ac \uc788\uc74c\"\n\n// Adds a string to the description in spanish, because spanish if the first\n// language in the language preference\nhospitalInfo.description.push(\"Cura a las pacientes\");\n\n// Now that a spanish entry exists, JSON-LD dataset proxy focuses on that\nconsole.log(hospitalInfo.description.length); // Logs \"1\" for the 1 spanish entry\nconsole.log(hospitalInfo.description[0]); // Logs \"Cura a las pacientes\"\n</code></pre>"},{"location":"guides/advanced_data_manipulation/#setlanguagepreferenceslanguagepreferencesusingjsonlddatasetproxies","title":"<code>setLanguagePreferences(...languagePreferences).using(...jsonldDatasetProxies)</code>","text":"<p>The <code>setLanguagePreferences(...).using(...)</code> function sets the language preferences for a set of JSON-LD Dataset Proxies. It follows roughly the same paridigms as the <code>write(...).using(...)</code> function.</p> <pre><code>import { setLanguagePreferences } from \"jsonld-dataset-proxy\";\n\nsetLanguagePreferences(\"fr\", \"ko\").using(hospitalInfo);\nconsole.log(hospitalInfo.label); // Logs \"H\u00f4pital\"\nsetLanguagePreferences(\"@none\").using(hospitalInfo);\nconsole.log(hospitalInfo.label); // Logs \"Hospital\"\n</code></pre>"},{"location":"guides/advanced_data_manipulation/#setlanguagepreferenceslanguagepreferencesusingcopyjsonlddatasetproxies","title":"<code>setLanguagePreferences(...languagePreferences).usingCopy(...jsonldDatasetProxies)</code>","text":"<p>The <code>setLanguagePreferences(...).usingCopy(...)</code> function returns a copy of the provided JSON-LD Dataset Proxies with the given language preferences. It follows roughly the same paridigms as the <code>write(...).usingCopy(...)</code> function.</p> <pre><code>import { setLanguagePreferences } from \"jsonld-dataset-proxy\";\n\n// ...\n\nconst [frenchPreference] = setLanguagePreferences(\"fr\").usingCopy(hospitalInfo);\nconst [koreanPreference] = setLanguagePreferences(\"ko\").usingCopy(hospitalInfo);\nconsole.log(frenchPreference.label); // Logs \"H\u00f4pital\"\nconsole.log(koreanPreference.label); // Logs \"\ubcd1\uc6d0\"\n</code></pre>"},{"location":"guides/advanced_data_manipulation/#languageofjsonlddatasetproxy-key","title":"<code>languageOf(jsonldDatasetProxy, key)</code>","text":"<p>The <code>languageOf</code> function lets you view and modify the languages more directly. <code>languageOf</code> takes two properties:</p> <ul> <li><code>jsonldDatasetProxy</code>: A JSON-LD dataset proxy</li> <li><code>key</code>: A key on the JSON-LD dataset proxy pointing to a language string.</li> </ul> <p>It returns a mapping of languages to strings or sets of strings depending on the cardinality of the JSON-LD context.</p> <pre><code>const labelLanguages = languagesOf(hospitalInfo, \"label\");\n// labelLanguages: { '@none': 'Hospital', fr: 'H\u00f4pital', ko: '\ubcd1\uc6d0' }\nconst descriptionLanguages = languagesOf(hospitalInfo, \"description\");\n// descriptionLanguages:\n// {\n//   '@none': Set(2) { 'Heals patients', 'Has doctors' },\n//   fr: Set(2) { 'Gu\u00e9rit les malades', 'A des m\u00e9decins' },\n//   ko: Set(2) { '\ud658\uc790\ub97c \uce58\ub8cc\ud558\ub2e4', '\uc758\uc0ac \uc788\uc74c' }\n// }\n</code></pre> <p>You can also modify languauages by changing the mappings. Mappings with sets of strings follow the JavaScript <code>Set</code> interface.</p> <pre><code>// Adds a Chinese label\nlabelLanguages.zh = \"\u533b\u9662\";\n// Changes the no-language label from to \"Super Hospital\"\nlabelLanguages[\"@none\"] = \"Super Hospital\";\n// Removes the French label\ndelete labelLanguages.fr;\n// Adds a Hindi description\ndescriptionLanguages.hi?.add(\"\u0930\u094b\u0917\u093f\u092f\u094b\u0902 \u0915\u094b \u0920\u0940\u0915 \u0915\u0930\u0924\u093e \u0939\u0948\");\n// Checks to see if the korean label contains \"\uc758\uc0ac \uc788\uc74c\"\ndescriptionLanguages.ko?.has(\"\uc758\uc0ac \uc788\uc74c\"); // returns true\n// Removes \"Has Doctors\" from the no-language description\ndescriptionLanguages[\"@none\"]?.delete(\"Has Doctors\");\n</code></pre>"},{"location":"guides/raw_rdf/","title":"LDO for Raw RDF Guide","text":"<p>LDO (Linked Data Objects) is a library that lets you easily manipulate RDF as if it were a standard TypeScript object that follows a ShEx shape you define.</p> <p>This tutorial will walk you through using LDO on raw RDF. How that raw RDF is fetched is left up the developer.</p> <p>Completed Code on Github</p>"},{"location":"guides/raw_rdf/#setup","title":"Setup","text":""},{"location":"guides/raw_rdf/#automatic-setup","title":"Automatic Setup","text":"<p>To setup LDO, <code>cd</code> into your typescript project and run <code>npx @ldo/cli init</code>.</p> <pre><code>cd my-typescript-project\nnpx @ldo/cli init\n</code></pre> Manual Setup The following is handled by the automatic setup:  Install the LDO dependencies. <pre><code>npm install @ldo/ldo\nnpm install @ldo/cli --save-dev\n</code></pre>  Create a folder to store your ShEx shapes: <pre><code>mkdir shapes\n</code></pre>  Create a script to build ShEx shapes and convert them into Linked Data Objects. You can put this script in `package.json` <pre><code>{\n  ...\n  scripts: {\n    ...\n    \"build:ldo\": \"ldo build --input ./shapes --output ./.ldo\"\n    ...\n  }\n  ...\n}\n</code></pre>"},{"location":"guides/raw_rdf/#creating-shex-schemas","title":"Creating ShEx Schemas","text":"<p>LDO uses ShEx as a schema for the RDF data in your project. To add a ShEx schema to your project, simply create a file ending in <code>.shex</code> to the <code>shapes</code> folder.</p> <p>For more information on writing ShEx schemas see the ShEx Primer.</p> <p><code>./shapes/foafProfile.shex</code>: <pre><code>PREFIX ex: &lt;http://example.com/&gt;\nPREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;\nPREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;\n\nex:FoafProfile EXTRA a {\n  a [ foaf:Person ]\n    // rdfs:comment  \"Defines the node as a Person (from foaf)\" ;\n  foaf:name xsd:string ?\n    // rdfs:comment  \"Define a person's name.\" ;\n  foaf:img xsd:string ?\n    // rdfs:comment  \"Photo link but in string form\" ;\n  foaf:knows @ex:FoafProfile *\n    // rdfs:comment  \"A list of WebIds for all the people this user knows.\" ;\n}\n</code></pre></p> <p>To build the shape, run: <pre><code>npm run build:ldo\n</code></pre></p> <p>This will generate five files:  - <code>./.ldo/foafProfile.shapeTypes.ts</code> &lt;-- This is the important file  - <code>./.ldo/foafProfile.typings.ts</code>  - <code>./.ldo/foafProfile.schema.ts</code>  - <code>./.ldo/foafProfile.context.ts</code></p>"},{"location":"guides/raw_rdf/#simple-example","title":"Simple Example","text":"<p>Below is a simple example of LDO in a real use-case (changing the name on a Solid Pod)</p> <pre><code>import { parseRdf, startTransaction, toSparqlUpdate, toTurtle } from \"@ldo/ldo\";\nimport { FoafProfileShapeType } from \"./.ldo/foafProfile.shapeTypes\";\n\nasync function run() {\n  const rawTurtle = `\n  &lt;#me&gt; a &lt;http://xmlns.com/foaf/0.1/Person&gt;;\n      &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jane Doe\".\n  `;\n\n  /**\n   * Step 1: Convert Raw RDF into a Linked Data Object\n   */\n  const ldoDataset = await parseRdf(rawTurtle, {\n    baseIRI: \"https://solidweb.me/jane_doe/profile/card\",\n  });\n  // Create a linked data object by telling the dataset the type and subject of\n  // the object\n  const janeProfile = ldoDataset\n    // Tells the LDO dataset that we're looking for a FoafProfile\n    .usingType(FoafProfileShapeType)\n    // Says the subject of the FoafProfile\n    .fromSubject(\"https://solidweb.me/jane_doe/profile/card#me\");\n\n  /**\n   * Step 2: Manipulate the Linked Data Object\n   */\n  // Logs \"Jane Doe\"\n  console.log(janeProfile.name);\n  // Logs \"Person\"\n  console.log(janeProfile.type);\n  // Logs 0\n  console.log(janeProfile.knows?.length);\n\n  // Begins a transaction that tracks your changes\n  startTransaction(janeProfile);\n  janeProfile.name = \"Jane Smith\";\n  janeProfile.knows?.push({\n    \"@id\": \"https://solidweb.me/john_smith/profile/card#me\",\n    type: {\n      \"@id\": \"Person\",\n    },\n    name: \"John Smith\",\n    knows: [janeProfile],\n  });\n\n  // Logs \"Jane Smith\"\n  console.log(janeProfile.name);\n  // Logs \"John Smith\"\n  console.log(janeProfile.knows?.[0].name);\n  // Logs \"Jane Smith\"\n  console.log(janeProfile.knows?.[0].knows?.[0].name);\n\n  /**\n   * Step 3: Convert it back to RDF\n   */\n  // Logs:\n  // &lt;https://solidweb.me/jane_doe/profile/card#me&gt; a &lt;http://xmlns.com/foaf/0.1/Person&gt;;\n  //   &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jane Smith\";\n  //   &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;https://solidweb.me/john_smith/profile/card#me&gt;.\n  // &lt;https://solidweb.me/john_smith/profile/card#me&gt; a &lt;http://xmlns.com/foaf/0.1/Person&gt;;\n  //   &lt;http://xmlns.com/foaf/0.1/name&gt; \"John Smith\";\n  //   &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;https://solidweb.me/jane_doe/profile/card#me&gt;.\n  console.log(await toTurtle(janeProfile));\n  // Logs:\n  // DELETE DATA {\n  //   &lt;https://solidweb.me/jane_doe/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jane Doe\" .\n  // };\n  // INSERT DATA {\n  //   &lt;https://solidweb.me/jane_doe/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Jane Smith\" .\n  //   &lt;https://solidweb.me/jane_doe/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;https://solidweb.me/john_smith/profile/card#me&gt; .\n  //   &lt;https://solidweb.me/john_smith/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"John Smith\" .\n  //   &lt;https://solidweb.me/john_smith/profile/card#me&gt; &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&gt; &lt;http://xmlns.com/foaf/0.1/Person&gt; .\n  //   &lt;https://solidweb.me/john_smith/profile/card#me&gt; &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;https://solidweb.me/jane_doe/profile/card#me&gt; .\n  // }\n  console.log(await toSparqlUpdate(janeProfile));\n}\nrun();\n</code></pre>"},{"location":"guides/raw_rdf/#getting-an-ldo-dataset","title":"Getting an LDO Dataset","text":"<p>An LDO Dataset is a kind of RDF JS Dataset that can create linked data objects.</p> <p>LDO datasets can be created in two ways:</p> <p><code>createLdoDataset(initialDataset?: Dataset&lt;Quad, Quad&gt; | Quad[])</code> <pre><code>import { createLdoDataset } from \"@ldo/ldo\";\n\nconst ldoDataset = createLdoDataset();\n</code></pre></p> <ul> <li><code>initialDataset</code>: An optional dataset or array of quads for the new dataset.</li> </ul> <p><code>parseRdf(data: string, parserOptions?: ParserOptions)</code> <pre><code>import { parseRdf } from \"@ldo/ldo\";\n\nconst rawTurtle = \"...\";\nconst ldoDataset =  await parseRdf(rawTurtle, { baseIRI: \"http://example.com/\" });\n</code></pre></p> <ul> <li><code>data</code>: The raw data to parse as a <code>string</code>.</li> <li><code>options</code> (optional): Parse options containing the following keys:<ul> <li><code>format</code> (optional): The format the data is in. The following are acceptable formats: <code>Turtle</code>, <code>TriG</code>, <code>N-Triples</code>, <code>N-Quads</code>, <code>N3</code>, <code>Notation3</code>.</li> <li><code>baseIRI</code> (optional): If this data is hosted at a specific location, you can provide the baseIRI of that location.</li> <li><code>blankNodePrefix</code> (optional): If blank nodes should have a prefix, that should be provided here.</li> <li><code>factory</code> (optional): a RDF Data Factory from  <code>@rdfjs/data-model</code>. </li> </ul> </li> </ul>"},{"location":"guides/raw_rdf/#getting-a-linked-data-object","title":"Getting a Linked Data Object","text":"<p>Once you have an LdoDataset we can get a Linked Data Object. A linked data object feels just like a JavaScript object literal, but when you make modifications to it, it will affect the underlying LdoDataset.</p> <p>Thie first step is defining which Shape Type you want to retrieve from the dataset. We can use the generated shape types and the <code>usingType()</code> method for this.</p> <pre><code>import { FoafProfileShapeType } from \"./.ldo/foafProfile.shapeTypes.ts\";\n\n// ... Get the LdoDataset\n\nldoDataset.usingType(FoafProfileShapeType);\n</code></pre> <p>Next, we want to identify exactly what part of the dataset we want to extract. We can do this in a few ways:</p>"},{"location":"guides/raw_rdf/#fromsubjectentrynode","title":"<code>.fromSubject(entryNode)</code>","text":"<p><code>fromSubject</code> lets you define a an <code>entryNode</code>, the place of entry for the graph. The object returned by <code>jsonldDatasetProxy</code> will represent the given node. This parameter accepts both <code>namedNode</code>s and <code>blankNode</code>s. <code>fromSubject</code> takes a generic type representing the typescript type of the given subject.</p> <pre><code>const profile = ldoDataset\n  .usingType(FoafProfileShapeType)\n  .fromSubject(\"http://example.com/Person1\");\n</code></pre>"},{"location":"guides/raw_rdf/#matchsubjectpredicate-object-graph","title":"<code>.matchSubject(predicate?, object?, graph?)</code>","text":"<p><code>matchSubject</code> returns a Jsonld Dataset Proxy representing all subjects in the dataset matching the given predicate, object, and graph.</p> <pre><code>const profiles = ldoDataset\n  .usingType(FoafProfileShapeType)\n  .matchSubject(\n    namedNode(\"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\"),\n    namedNode(\"http://xmlns.com/foaf/0.1/Person\")\n  );\nprofiles.forEach((person) =&gt; {\n  console.log(person.fn);\n});\n</code></pre>"},{"location":"guides/raw_rdf/#matchobjectsubject-predicate-object","title":"<code>.matchObject(subject?, predicate?, object?)</code>","text":"<p><code>matchObject</code> returns a Jsonld Dataset Proxy representing all objects in the dataset matching the given subject, predicate, and graph.</p> <pre><code>const friendsOfPerson1 = ldoDataset\n  .usingType(FoafProfileShapeType)\n  .matchSubject(\n    namedNode(\"http://example.com/Person1\"),\n    namedNode(\"http://xmlns.com/foaf/0.1/knows\")\n  );\nfriendsOfPerson1.forEach((person) =&gt; {\n  console.log(person.fn);\n});\n</code></pre>"},{"location":"guides/raw_rdf/#fromjsoninputdata","title":"<code>.fromJson(inputData)</code>","text":"<p><code>fromJson</code> will take any regular Json, add the information to the dataset, and return a Jsonld Dataset Proxy representing the given data.</p> <pre><code>const person2 = ldoDataset\n  .usingType(FoafProfileShapeType)\n  .fromJson({\n    \"@id\": \"http://example.com/Person2\",\n    fn: [\"Jane Doe\"],\n  });\n</code></pre>"},{"location":"guides/raw_rdf/#getting-and-setting-data-on-a-linked-data-object","title":"Getting and Setting Data on a Linked Data Object","text":"<p>Once you've created a Linked Data Object, you can get and set data as if it were a normal TypeScript Object. For specific details, see the documentation at JSONLD Dataset Proxy.</p> <pre><code>import { LinkedDataObject } from \"@ldo/ldo\";\nimport { FoafProfileFactory } from \"./.ldo/foafProfile.ldoFactory.ts\";\nimport { FoafProfile } from \"./.ldo/foafProfile.typings\";\n\naysnc function start() {\n  const profile: FoafProfile = // Create LDO\n  // Logs \"Aang\"\n  console.log(profile.name);\n  // Logs \"Person\"\n  console.log(profile.type[\"@id\"]);\n  // Logs 1\n  console.log(profile.knows?.length);\n  // Logs \"Katara\"\n  console.log(profile.knows?.[0].name);\n  profile.name = \"Bonzu Pippinpaddleopsicopolis III\"\n  // Logs \"Bonzu Pippinpaddleopsicopolis III\"\n  console.log(profile.name);\n  profile.knows?.push({\n    type: { \"@id\": \"Person\" },\n    name: \"Sokka\"\n  });\n  // Logs 2\n  console.log(profile.knows?.length);\n  // Logs \"Katara\" and \"Sokka\"\n  profile.knows?.forEach((person) =&gt; console.log(person.name));\n}\n</code></pre>"},{"location":"guides/raw_rdf/#converting-a-linked-data-object-back-to-rdf","title":"Converting a Linked Data Object back to RDF","text":"<p>A linked data object can be converted into RDF in multiple ways:</p>"},{"location":"guides/raw_rdf/#toturtlelinkeddataobject","title":"<code>toTurtle(linkedDataObject)</code>","text":"<pre><code>import { toTurtle } from \"@ldo/ldo\"\n// ...\nconst rawTurtle: string = await toTurtle(profile);\n</code></pre>"},{"location":"guides/raw_rdf/#tontipleslinkeddataobject","title":"<code>toNTiples(linkedDataObject)</code>","text":"<pre><code>import { toNTriples } from \"@ldo/ldo\"\n// ...\nconst rawNTriples: string = await toNTriples(profile);\n</code></pre>"},{"location":"guides/raw_rdf/#serializelinkeddataobject-options","title":"<code>serialize(linkedDataObject, options)</code>","text":"<p><pre><code>import { serialize } from \"@ldo/ldo\";\n\nconst rawTurtle: string = await serialize({\n  format: \"Turtle\",\n  prefixes: {\n    ex: \"http://example.com/\",\n    foaf: \"http://xmlns.com/foaf/0.1/\",\n  }\n});\n</code></pre> <code>serialize(linkedDataObject, options)</code> provides general serialization based on provided options:  - <code>foramt</code> (optional): The format to serialize to. The following are acceptable formats: <code>Turtle</code>, <code>TriG</code>, <code>N-Triples</code>, <code>N-Quads</code>, <code>N3</code>, <code>Notation3</code>.  - <code>prefixes</code>: The prefixes for those serializations that use prefixes.</p>"},{"location":"guides/raw_rdf/#transactions","title":"Transactions","text":"<p>Sometimes, you want to keep track of changes you make for the object. This is where transactions come in handy.</p> <p>To start a transaction, use the <code>startTransaction(linkedDataObject)</code> function. From then on, all transactions will be tracked, but not added to the original ldoDataset. You can view the changes using the <code>transactionChanges(linkedDataObject)</code> or <code>toSparqlUpdate(linkedDataObject)</code> methods. When you're done with the transaction, you can run the <code>commitTransaction(linkedDataObject)</code> method to add the changes to the original ldoDataset.</p> <pre><code>import {\n  startTransaction,\n  transactionChanges,\n  toSparqlUpdate,\n  commitTransaction,\n} from \"@ldo/ldo\"; \n\n// ... Get the profile linked data object\n\nstartTransaction(profile);\nprofile.name = \"Kuzon\"\nconst changes = transactionChanges(profile);\n// Logs: &lt;http://example.com/aang&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Kuzon\"\nconsole.log(changes.added?.toString())\n// Logs: &lt;http://example.com/aang&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; \"Aang\"\nconsole.log(changes.removed?.toString())\nconsole.log(await toSparqlUpdate(profile));\ncommitTransaction(profile);\n</code></pre>"},{"location":"guides/raw_rdf/#other-ldo-helper-functions","title":"Other LDO Helper Functions","text":""},{"location":"guides/raw_rdf/#getdatasetlinkeddataobject","title":"<code>getDataset(linkedDataObject)</code>","text":"<p>Returns the Linked Data Object's underlying RDFJS dataset. Modifying this dataset will change the Linked Data Object as well. <pre><code>import { getDataset } from \"@ldo/ldo\"\nconst dataset = getDataset(profile);\n</code></pre></p>"},{"location":"guides/solid/","title":"LDO for Solid Guide","text":"<p>This guide is not completed. It will be completed once funding comes for a use case that would just use the raw Solid library.</p>"},{"location":"guides/solid_react/","title":"LDO for Solid + React Guide","text":"<p>Solid separates the application from the storage, allowing users to put their data wherever they choose. Core to achieving this is application interoparability, the ability to use multiple apps on the same dataset. In order to make applications interoperable, Solid is standardized around RDF (Resource Description Framework), a standard for representing data. While RDF is extremely flexible, it is sometimes cumbersome to work with, that's where LDO (Linked Data Objects) comes in.</p> <p>In this tutorial, we'll build a web application for Solid using React and LDO. LDO's react library, \"@ldo/solid-react\" is designed to make it easy to manipulate data on a Solid Pod.</p> <p>We'll be making a simple micro-blogging website that allows you to write notes and upload photos.</p> <p>This tutorial assumes that you are already familiar with React and the overall concepts associated with Solid.</p> <p>Completed Code on Github</p>"},{"location":"guides/solid_react/#1-getting-started","title":"1. Getting Started","text":"<p>First, we'll initialize the project. LDO is designed to work with TypeScript, so we want to initialize a typescript react project.</p> <pre><code>npx create-react-app my-solid-app --template typescript\ncd my-solid-app\n</code></pre>"},{"location":"guides/solid_react/#2-setting-up-a-basic-app-infrastructure","title":"2. Setting up a basic app infrastructure","text":"<p>Before we can use LDO and connect to a Solid Pod, let's get the boilerplace React infrastructure out of the way. We'll set up a single page that renders your blog timeline and lets you make new posts, and we'll do this with 5 components:</p> <p>App.tsx: Base of the application. <pre><code>import React, { FunctionComponent } from 'react';\nimport { Header } from './Header';\nimport { Blog } from './Blog';\n\nconst App: FunctionComponent = () =&gt; {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;Header /&gt;\n      &lt;Blog /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre></p> <p>Header.tsx: A header component that will help the user log in. <pre><code>import { FunctionComponent } from \"react\";\n\nexport const Header: FunctionComponent = () =&gt; {\n  return (\n    &lt;header&gt;\n      &lt;p&gt;Header&lt;/p&gt;\n      &lt;hr /&gt;\n    &lt;/header&gt;\n  );\n};\n</code></pre></p> <p>Blog.tsx: The main place for the blog timeline. We'll use this component to list all posts you've made. <pre><code>import { FunctionComponent } from \"react\";\nimport { MakePost } from \"./MakePost\";\nimport { Post } from \"./Post\";\n\nexport const Blog: FunctionComponent = () =&gt; {\n  return (\n    &lt;main&gt;\n      &lt;MakePost /&gt;\n      &lt;hr /&gt;\n      &lt;Post /&gt;\n    &lt;/main&gt;\n  );\n};\n</code></pre></p> <p>MakePost.tsx: A form to submit new posts. We've already wired it up with form elements to create a text body and upload an image for the post. We just need to fill out the <code>onSubmit</code> function. <pre><code>import { FormEvent, FunctionComponent, useCallback, useState } from \"react\";\n\nexport const MakePost: FunctionComponent = () =&gt; {\n  const [message, setMessage] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState&lt;File | undefined&gt;();\n\n  const onSubmit = useCallback(\n    async (e: FormEvent&lt;HTMLFormElement&gt;) =&gt; {\n      e.preventDefault();\n\n      // TODO upload functionality\n    },\n    [message, selectedFile]\n  );\n\n  return (\n    &lt;form onSubmit={onSubmit}&gt;\n      &lt;input\n        type=\"text\"\n        placeholder=\"Make a Post\"\n        value={message}\n        onChange={(e) =&gt; setMessage(e.target.value)}\n      /&gt;\n      &lt;input\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={(e) =&gt; setSelectedFile(e.target.files?.[0])}\n      /&gt;\n      &lt;input type=\"submit\" value=\"Post\" /&gt;\n    &lt;/form&gt;\n  );\n};\n</code></pre></p> <p>Post.tsx: A component to render a single post. <pre><code>import { FunctionComponent } from \"react\";\n\nexport const Post: FunctionComponent = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Post&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre></p> <p>When everything's done, run <code>npm run start</code> and your application should look like this:</p> <p></p>"},{"location":"guides/solid_react/#step-3-installing-ldo-for-solid-and-react","title":"Step 3: Installing LDO for Solid and React","text":"<p>With the main infrastructure set up, let's install LDO's Solid/React library.</p> <pre><code>npm install @ldo/solid-react\n</code></pre> <p>This library will give us many useful hooks and components for building a Solid application, but it can't be used unless we wrap the application in a provider. Because we're building a React application in the web browser, we'll wrap the application using the <code>BrowserSolidLdoProvider</code>.</p> <p>App.tsx <pre><code>import React, { FunctionComponent } from 'react';\nimport { Header } from './Header';\nimport { Blog } from './Blog';\nimport { BrowserSolidLdoProvider } from '@ldo/solid-react';\n\nconst App: FunctionComponent = () =&gt; {\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;BrowserSolidLdoProvider&gt;\n        &lt;Header /&gt;\n        &lt;Blog /&gt;\n      &lt;/BrowserSolidLdoProvider&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre></p>"},{"location":"guides/solid_react/#4-implementing-loginlogout-in-the-header","title":"4. Implementing Login/Logout in the header","text":"<p>Setting up login for a Solid application is easy when you're using ldo's Solid React library. With the <code>useSolidAuth()</code> hook, you can get information and methods to setup login.</p> <p>In the component below, we use the <code>session</code> object for information about the current session including <code>session.isLoggedIn</code>, a boolean indicating if the user is currently logged in, and <code>session.webId</code> to get the current user's webId. These will automatically update and rerender the component if anything changes about the current session.</p> <p>Next we use the <code>login(issuer: string)</code> method to initiate a login. Because a Solid Pod could be anywhere onthe web, we first ask the user to enter their Solid issuer then provide that to the login function.</p> <p>Finally, the <code>logout()</code> function lets you easily trigger a log out.</p> <p>Header.tsx <pre><code>import { useSolidAuth } from \"@ldo/solid-react\";\nimport { FunctionComponent } from \"react\";\n\nexport const Header: FunctionComponent = () =&gt; {\n  const { session, login, logout } = useSolidAuth();\n\n  return (\n    &lt;header&gt;\n      {session.isLoggedIn ? (\n        // Is the session is logged in\n        &lt;p&gt;\n          You are logged in with the webId {session.webId}.{\" \"}\n          &lt;button onClick={logout}&gt;Log Out&lt;/button&gt;\n        &lt;/p&gt;\n      ) : (\n        // If the session is not logged in\n        &lt;p&gt;\n          You are not Logged In{\" \"}\n          &lt;button\n            onClick={() =&gt; {\n              // Get the Solid issuer the user should log into\n              const issuer = prompt(\n                \"Enter your Solid Issuer\",\n                \"https://solidweb.me\"\n              );\n              if (!issuer) return;\n              login(issuer);\n            }}\n          &gt;\n            Log In\n          &lt;/button&gt;\n        &lt;/p&gt;\n      )}\n      &lt;hr /&gt;\n    &lt;/header&gt;\n  );\n};\n</code></pre></p> <p>Because <code>useSolidAuth</code> is a hook, you can use it anywhere in the application, even components that don't contain buttons for \"login\" and \"logout.\" For example, we could use the <code>session</code> object in <code>Blog.tsx</code> to display a message if the user is not logged in.</p> <p>Blog.tsx <pre><code>import { FunctionComponent } from \"react\";\nimport { MakePost } from \"./MakePost\";\nimport { Post } from \"./Post\";\nimport { useSolidAuth } from \"@ldo/solid-react\";\n\nexport const Blog: FunctionComponent = () =&gt; {\n  const { session } = useSolidAuth();\n  if (!session.isLoggedIn) return &lt;p&gt;No blog available. Log in first.&lt;/p&gt;;\n\n  return (\n    &lt;main&gt;\n      &lt;MakePost /&gt;\n      &lt;hr /&gt;\n      &lt;Post /&gt;\n    &lt;/main&gt;\n  );\n};\n</code></pre></p> <p>Once you've implemented these changes, the application should look like this when logged out:</p> <p></p> <p>And this when logged in:</p> <p></p>"},{"location":"guides/solid_react/#5-setting-up-a-shape","title":"5. Setting up a shape","text":"<p>In step 6, we're going to use information from a user's Solid WebId profile. But, before we can do that, we want to set up a shape for the Solid Profile.</p> <p>LDO uses ShEx \"Shapes\" as schemas to describe how data looks in an application. We can get started by using the <code>init</code> command line tool to get the project ready to use shapes.</p> <pre><code>npx @ldo/cli init\n</code></pre> <p>This command will install required libraries and creates two folders: the <code>.shapes</code> folder and the <code>.ldo</code> folder.</p> <p>If you look in the <code>.shapes</code> folder, you'll find a default file called <code>foafProfile.shex</code>. This is a ShEx shape that defines a very simplified profile object.</p> <p>If you look in the <code>.ldo</code> folder, you'll files generated from the shape. For example, <code>foafProfile.typings.ts</code> contains the Typescript typings associated with the shape, <code>foafProfile.context.ts</code> conatians a JSON-LD context for the shape, and <code>foafProfile.shapeTypes.ts</code> contains a shape type, a special object that groups all the information for a shape together. We'll be using ShapeTypes later in this tutorial.</p> <p>For our project, we want to use a Solid Profile, so let's delete the \"foafProfile\" ShEx shape and make a new file for our Solid profile.</p> <pre><code>rm ./src/.shapes/foafProfile.shex\ntouch ./src/.shapes/solidProfile.shex\n</code></pre> <p>Now, let's create a shape for the Solid Profile. The code for a Solid profile is listed below, but you can learn more about creating ShEx shapes of your own on the ShEx website</p> <p>.shapes/solidProfile.shex <pre><code>PREFIX srs: &lt;https://shaperepo.com/schemas/solidProfile#&gt;\nPREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;\nPREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX schem: &lt;http://schema.org/&gt;\nPREFIX vcard: &lt;http://www.w3.org/2006/vcard/ns#&gt;\nPREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;\nPREFIX acl: &lt;http://www.w3.org/ns/auth/acl#&gt;\nPREFIX cert:  &lt;http://www.w3.org/ns/auth/cert#&gt;\nPREFIX ldp: &lt;http://www.w3.org/ns/ldp#&gt;\nPREFIX sp: &lt;http://www.w3.org/ns/pim/space#&gt;\nPREFIX solid: &lt;http://www.w3.org/ns/solid/terms#&gt;\n\nsrs:SolidProfileShape EXTRA a {\n  a [ schem:Person ]\n    // rdfs:comment  \"Defines the node as a Person (from Schema.org)\" ;\n  a [ foaf:Person ]\n    // rdfs:comment  \"Defines the node as a Person (from foaf)\" ;\n  vcard:fn xsd:string ?\n    // rdfs:comment  \"The formatted name of a person. Example: John Smith\" ;\n  foaf:name xsd:string ?\n    // rdfs:comment  \"An alternate way to define a person's name.\" ;\n  vcard:hasAddress @srs:AddressShape *\n    // rdfs:comment  \"The person's street address.\" ;\n  vcard:hasEmail @srs:EmailShape *\n    // rdfs:comment  \"The person's email.\" ;\n  vcard:hasPhoto IRI ?\n    // rdfs:comment  \"A link to the person's photo\" ;\n  foaf:img xsd:string ?\n    // rdfs:comment  \"Photo link but in string form\" ;\n  vcard:hasTelephone @srs:PhoneNumberShape *\n    // rdfs:comment  \"Person's telephone number\" ;\n  vcard:phone xsd:string ?\n    // rdfs:comment  \"An alternative way to define a person's telephone number using a string\" ;\n  vcard:organization-name xsd:string ?\n    // rdfs:comment  \"The name of the organization with which the person is affiliated\" ;\n  vcard:role xsd:string ?\n    // rdfs:comment  \"The name of the person's role in their organization\" ;\n  acl:trustedApp @srs:TrustedAppShape *\n    // rdfs:comment  \"A list of app origins that are trusted by this user\" ;\n  cert:key @srs:RSAPublicKeyShape *\n    // rdfs:comment  \"A list of RSA public keys that are associated with private keys the user holds.\" ;\n  ldp:inbox IRI\n    // rdfs:comment  \"The user's LDP inbox to which apps can post notifications\" ;\n  sp:preferencesFile IRI ?\n    // rdfs:comment  \"The user's preferences\" ;\n  sp:storage IRI *\n    // rdfs:comment  \"The location of a Solid storage server related to this WebId\" ;\n  solid:account IRI ?\n    // rdfs:comment  \"The user's account\" ;\n  solid:privateTypeIndex IRI *\n    // rdfs:comment  \"A registry of all types used on the user's Pod (for private access only)\" ;\n  solid:publicTypeIndex IRI *\n    // rdfs:comment  \"A registry of all types used on the user's Pod (for public access)\" ;\n  foaf:knows IRI *\n    // rdfs:comment  \"A list of WebIds for all the people this user knows.\" ;\n}\n\nsrs:AddressShape {\n  vcard:country-name xsd:string ?\n    // rdfs:comment  \"The name of the user's country of residence\" ;\n  vcard:locality xsd:string ?\n    // rdfs:comment  \"The name of the user's locality (City, Town etc.) of residence\" ;\n  vcard:postal-code xsd:string ?\n    // rdfs:comment  \"The user's postal code\" ;\n  vcard:region xsd:string ?\n    // rdfs:comment  \"The name of the user's region (State, Province etc.) of residence\" ;\n  vcard:street-address xsd:string ?\n    // rdfs:comment  \"The user's street address\" ;\n}\n\nsrs:EmailShape EXTRA a {\n  a [\n    vcard:Dom\n    vcard:Home\n    vcard:ISDN\n    vcard:Internet\n    vcard:Intl\n    vcard:Label\n    vcard:Parcel\n    vcard:Postal\n    vcard:Pref\n    vcard:Work\n    vcard:X400\n  ] ?\n    // rdfs:comment  \"The type of email.\" ;\n  vcard:value IRI\n    // rdfs:comment  \"The value of an email as a mailto link (Example &lt;mailto:jane@example.com&gt;)\" ;\n}\n\nsrs:PhoneNumberShape EXTRA a {\n  a [\n    vcard:Dom\n    vcard:Home\n    vcard:ISDN\n    vcard:Internet\n    vcard:Intl\n    vcard:Label\n    vcard:Parcel\n    vcard:Postal\n    vcard:Pref\n    vcard:Work\n    vcard:X400\n  ] ?\n    // rdfs:comment  \"They type of Phone Number\" ;\n  vcard:value IRI\n    // rdfs:comment  \"The value of a phone number as a tel link (Example &lt;tel:555-555-5555&gt;)\" ;\n}\n\nsrs:TrustedAppShape {\n  acl:mode [acl:Append acl:Control acl:Read acl:Write] +\n    // rdfs:comment  \"The level of access provided to this origin\" ;\n  acl:origin IRI\n    // rdfs:comment \"The app origin the user trusts\"\n}\n\nsrs:RSAPublicKeyShape {\n  cert:modulus xsd:string\n    // rdfs:comment  \"RSA Modulus\" ;\n  cert:exponent xsd:integer\n    // rdfs:comment  \"RSA Exponent\" ;\n}\n</code></pre></p> <p>Finally, we can run the command below to build the Solid Profile shape.</p> <pre><code>npm run build:ldo\n</code></pre> <p>You'll notice that the <code>.ldo</code> folder contains information about a solid profile.</p>"},{"location":"guides/solid_react/#6-fetching-and-using-information","title":"6. Fetching and using information","text":"<p>Let's go back to the header we built. Yeah it's cool, but if your profile includes a name, wouldn't it be better if it said, \"You are logged in as Jackson Morgan\" rather than \"You are logged in with the webId https://solidweb.me/jackson3/profile/card#me?\"</p> <p>Well, we can fix that by retrieving the user's profile document and using the data from it.</p> <p>We can use the <code>useResource</code> and <code>useSubject</code> hooks to do this.</p> <p>Header.tsx <pre><code>import { FunctionComponent } from \"react\";\nimport { useResource, useSolidAuth, useSubject } from \"@ldo/solid-react\";\nimport { SolidProfileShapeShapeType } from \"./.ldo/solidProfile.shapeTypes\";\n\nexport const Header: FunctionComponent = () =&gt; {\n  const { session, login, logout } = useSolidAuth();\n  const webIdResource = useResource(session.webId);\n  const profile = useSubject(SolidProfileShapeShapeType, session.webId);\n\n  const loggedInName = webIdResource?.isReading()\n    ? \"LOADING...\"\n    : profile?.fn\n    ? profile.fn\n    : session.webId;\n\n  return (\n    &lt;header&gt;\n      {session.isLoggedIn ? (\n        // Is the session is logged in\n        &lt;p&gt;\n          You are logged as {loggedInName}.{\" \"}\n          &lt;button onClick={logout}&gt;Log Out&lt;/button&gt;\n        &lt;/p&gt;\n      ) : (\n// ...\n</code></pre></p> <p>The <code>useResource(uri: string)</code> will load a provided URI into your application. You can use methods like <code>.isReading()</code> to get the current status of the resource. When anything updates with the resource, a rerender will be triggered on your component.</p> <p>RDF data is automatically loaded into a central dataset inside your application. To access that dataset, we can use <code>useSubject(uri: string)</code>. <code>useSubject</code> takes in a ShapeType and an uri. It returns a JSON representation of that URI given the ShapeType. In the above example, we've provided the autogenerated <code>SolidProfileShapeShapeType</code> as well as the webId. This essentially says to LDO, \"The URI I've provided is a Solid Profile. Please give me JSON representing this as a Solid Profile.\"</p> <p>Once we have the subject, all we have to do is treat it like JSON. To get the \"formalName\" for a profile, just call <code>profile.fn</code>.</p>"},{"location":"guides/solid_react/#7-getting-the-main-container","title":"7. Getting the main container","text":"<p>Let's move on to building the blog section of our site. One of the biggest questions when building Solid applications is \"Where should I save new data?\" While that question may have an different answer in the future, today apps traditionally create a new folder to save new data to.</p> <p>But, to create a new folder, we want to know what the root folder of the application is. At the time of login, the only URL we know is the WebId, so we want to find the root folder for that WebId. It's not always to root domain. For example, on some pod servers a WebId follows this format <code>https://example.pod/myusername/profile/card#me</code> and the root file is <code>https://example.pod/myusername/</code>. So, how do we know which container is the real root container? Well, we can use the <code>getRootContainer</code> method.</p> <p>Let's add the following hook to Blog.tsx</p> <pre><code>// ...\nimport { useLdo, useSolidAuth } from \"@ldo/solid-react\";\nimport { ContainerUri } from \"@ldo/solid\";\n\nexport const Blog: FunctionComponent = () =&gt; {\n  const { session } = useSolidAuth();\n\n  const { getResource } = useLdo();\n  const [mainContainerUri, setMainContainerUri] = useState&lt;\n    ContainerUri | undefined\n  &gt;();\n\n  useEffect(() =&gt; {\n    if (session.webId) {\n      // Get the WebId resource\n      const webIdResource = getResource(session.webId);\n      // Get the root container associated with that WebId\n      webIdResource.getRootContainer().then((rootContainerResult) =&gt; {\n        // Check if there is an error\n        if (rootContainerResult.isError) return;\n        // Get a child of the root resource called \"my-solid-app/\"\n        const mainContainer = rootContainerResult.child(\"my-solid-app/\");\n        setMainContainerUri(mainContainer.uri);\n        // Create the main container if it doesn't exist yet\n        mainContainer.createIfAbsent();\n      });\n    }\n  }, [getResource, session.webId]);\n\n  if (!session.isLoggedIn) return &lt;p&gt;No blog available. Log in first.&lt;/p&gt;;\n</code></pre> <p>Let's walk through what's happening here. First, we can use the <code>useLdo</code> hook to get a number of useful functions for interacting with data (and we'll use more in the future). In this case, we're getting the <code>getResource</code> function. This serves roughly the same purpose as the <code>useResource</code> hook, but in function form rather than hook form. Keep in mind that resources retrieved from the <code>getResource</code> function won't trigger rerenders on update, so it's best used when you need a resource for purposes other than the render.</p> <p>Using the <code>getResource</code> function, we get a resource representing the webId. Every resource has the <code>getRootContainer</code> method which returns a promise with either the root container, or an error. Everything returned by LDO methods has the <code>isError</code> parameter, so you can easily check if it's an error.</p> <p>We'll then save the URI of the main application container so we can use it in step 8.</p> <p>Any container resource has the <code>child</code> method which gets a representation of the any child, and with that representation we can call the <code>createIfAbsent</code> method to create the create out application's main container.</p> <p>We'll use the value of \"mainContainerUri\" in the next step.</p>"},{"location":"guides/solid_react/#8-rendering-container-children","title":"8. Rendering Container Children","text":"<p>Before we continue, let's talk a bit about the folder structure for this application. We just got our \"main folder\", the folder we'll save everything to. Inside that folder, we'll put our individual blog posts. These will be folders themselves with potentially two files: a post data file (index.ttl) and some image file. Overall, our folder layout will look like this:</p> <pre><code>rootContainer/\n\u251c\u2500 my-solid-app/\n\u2502  \u251c\u2500 post1/\n\u2502  \u2502  \u251c\u2500 index.ttl\n\u2502  \u2502  \u251c\u2500 some_image.png/\n\u2502  \u251c\u2500 post2/\n\u2502  \u2502  \u251c\u2500 index.ttl\n\u2502  \u2502  \u251c\u2500 another_image.jpg/\n</code></pre> <p>We've already created the <code>my-solid-app/</code> container, so let's add a bit of functionality to create the post folders.</p> <p>First, let's modify Blog.tsx to fetch the value of the main container and use that information. We'll use the <code>useResource</code> hook on the main container keep track of the status of the main container. </p> <p>Blog.tsx <pre><code>// ...\nimport { useLdo, useResource, useSolidAuth } from \"@ldo/solid-react\";\nimport { ContainerUri, Container } from \"@ldo/solid\";\n\nexport const Blog: FunctionComponent = () =&gt; {\n  const { session } = useSolidAuth();\n\n  const { getResource } = useLdo();\n  const [mainContainerUri, setMainContainerUri] = useState&lt;\n    ContainerUri | undefined\n  &gt;();\n\n  useEffect(() =&gt; {\n    if (session.webId) {\n      // Get the WebId resource\n      const webIdResource = getResource(session.webId);\n      // Get the root container associated with that WebId\n      webIdResource.getRootContainer().then((rootContainerResult) =&gt; {\n        // Check if there is an error\n        if (rootContainerResult.isError) return;\n        // Get a child of the root resource called \"my-solid-app/\"\n        const mainContainer = rootContainerResult.child(\"my-solid-app/\");\n        setMainContainerUri(mainContainer.uri);\n        // Create the main container if it doesn't exist yet\n        mainContainer.createIfAbsent();\n      });\n    }\n  }, [getResource, session.webId]);\n\n  const mainContainer = useResource(mainContainerUri);\n\n  return (\n    &lt;main&gt;\n      &lt;MakePost mainContainer={mainContainer} /&gt;\n      &lt;hr /&gt;\n      {mainContainer\n        // Get all the children of the main container\n        ?.children()\n        // Filter out children that aren't containers themselves\n        .filter((child): child is Container =&gt; child.type === \"container\")\n        // Render a \"Post\" for each child\n        .map((child) =&gt; (\n          &lt;Fragment key={child.uri}&gt; \n            &lt;Post key={child.uri} postUri={child.uri} /&gt;\n            &lt;hr /&gt;\n          &lt;/Fragment&gt;\n        ))}\n    &lt;/main&gt;\n  );\n};\n</code></pre></p> <p>In the render, we can use the <code>children()</code> method on the main container to get all the child elements of our container. As discussed earlier, the only children of this container should be containers themselves, so we'll filter out all non-containers. And finally, we render the post for each child.</p> <p>Now that we can iterate through all the Posts made on the Solid Pod, let's create a little render method for those Posts. For now, we'll just display the URI for the Post, but we'll make it more complex in the future. Notice that we've added a new prop to the Post component so that we can pass in the <code>postUri</code>.</p> <p>Post.tsx <pre><code>import { ContainerUri } from \"@ldo/solid\";\n\nexport const Post: FunctionComponent&lt;{ postUri: ContainerUri }&gt; = ({\n  postUri,\n}) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;p&gt;ContainerURI is: {postUri}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre></p> <p>Finally, let's add some simple functionality to MakePost.tsx that creates the containers for Posts. We'll add functionality to fill that Post with content in future steps.</p> <p>MakePost.tsx <pre><code>// ...\nimport { Container } from \"@ldo/solid\";\nimport { v4 } from \"uuid\";\n\nexport const MakePost: FunctionComponent&lt;{ mainContainer?: Container }&gt; = ({\n  mainContainer,\n}) =&gt; {\n  const [message, setMessage] = useState(\"\");\n  const [selectedFile, setSelectedFile] = useState&lt;File | undefined&gt;();\n\n  const onSubmit = useCallback(\n    async (e: FormEvent&lt;HTMLFormElement&gt;) =&gt; {\n      e.preventDefault();\n\n      // Don't create a post is main container isn't present\n      if (!mainContainer) return;\n\n      // Create the container for the post\n      const postContainerResult = await mainContainer.createChildAndOverwrite(\n        `${v4()}/`\n      );\n      // Check if there was an error\n      if (postContainerResult.isError) {\n        alert(postContainerResult.message);\n        return;\n      }\n      const postContainer = postContainerResult.resource;\n    },\n    [message, selectedFile, mainContainer]\n  );\n  //...\n</code></pre></p> <p>Note that we've added a prop to include a main container. We use this in the <code>onSubmit</code> function to call the <code>createChildAndOverwrite</code> method. We can generate a name for the sub-folder any way we want, but in this example, we used UUID to generate a random name for the folder.</p> <p>Finally, we check to see if the result is an error, and if it isn't we extract our new Post container from the result.</p> <p>Once this step is done, you should be able to press the \"Post\" button to create posts (or at least the container for the post. We'll make the rest of the post in future steps). It should look like this.</p> <p></p>"},{"location":"guides/solid_react/#9-uploading-unstructured-data","title":"9. Uploading unstructured data","text":"<p>Pods aren't just for storing containers, of course. They can also about storing raw data like images and videos. Let's add the ability to upload an image to our application.</p> <p>MakePost.tsx <pre><code>import { Container, Leaf, LeafUri } from \"@ldo/solid\";\n// ...\n  const onSubmit = useCallback(\n    async (e: FormEvent&lt;HTMLFormElement&gt;) =&gt; {\n      e.preventDefault();\n\n      // Don't create a post is main container isn't present\n      if (!mainContainer) return;\n\n      // Create the container for the post\n      const postContainerResult = await mainContainer.createChildAndOverwrite(\n        `${v4()}/`\n      );\n      // Check if there was an error\n      if (postContainerResult.isError) {\n        alert(postContainerResult.message);\n        return;\n      }\n      const postContainer = postContainerResult.resource;\n\n      // Upload Image\n      let uploadedImage: Leaf | undefined;\n      if (selectedFile) {\n        const result = await postContainer.uploadChildAndOverwrite(\n          selectedFile.name as LeafUri,\n          selectedFile,\n          selectedFile.type\n        );\n        if (result.isError) {\n          alert(result.message);\n          await postContainer.delete();\n          return;\n        }\n        uploadedImage = result.resource;\n      }\n    },\n    [message, selectedFile, mainContainer]\n  );\n</code></pre></p> <p>We added the above section to the onSubmit function in MakePost.tsx. In this part of code, we use the selected file created in Step 2 as well as the post container's <code>uploadChildAndOverwrite</code> method to upload the file. This method takes in three parameters:  * The name of the file.  * The file itself (or any Blob)  * The file's mime-type</p> <p>Finally, we check if there's an error, and if there isn't, we assign the result to a variable, <code>uploadedImage</code>. We'll use this in step 10.</p> <p>After implementing this step, your application should now be able to upload photos to your Pod.</p>"},{"location":"guides/solid_react/#10-addeding-structured-data","title":"10. Addeding structured data.","text":"<p>Unstructured data is good, but the real lifeblood of Solid comes from its structured data. In this step, we'll create a Post document that contains the Post's text body, a link to the image, and it's time of posting.</p> <p>Before we can do that, like we did with the profile, we want to have a ShEx shape for a social media posting. Create a new file called ./.shapes.post.shex and paste the following ShEx shape.</p> <p>./.shapes/post.shex <pre><code>PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\nPREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt;\nPREFIX ex: &lt;https://example.com/&gt;\nBASE &lt;http://schema.org/&gt;\n\nex:PostSh {\n  a [&lt;SocialMediaPosting&gt; &lt;CreativeWork&gt; &lt;Thing&gt;] ;\n  &lt;articleBody&gt; xsd:string?\n      // rdfs:label '''articleBody'''\n      // rdfs:comment '''The actual body of the article. ''' ;\n  &lt;uploadDate&gt; xsd:date\n      // rdfs:label '''uploadDate'''\n      // rdfs:comment '''Date when this media object was uploaded to this site.''' ;\n  &lt;image&gt; IRI ?\n      // rdfs:label '''image'''\n      // rdfs:comment '''A media object that encodes this CreativeWork. This property is a synonym for encoding.''' ;\n  &lt;publisher&gt; IRI\n      // rdfs:label '''publisher'''\n      // rdfs:comment '''The publisher of the creative work.''' ;\n}\n// rdfs:label '''SocialMediaPost'''\n// rdfs:comment '''A post to a social media platform, including blog posts, tweets, Facebook posts, etc.'''\n</code></pre></p> <p>Now we can build the shapes again by running:</p> <pre><code>npm run build:ldo\n</code></pre> <p>With the new shape in order, let's add some code to MakePost.tsx to create the structured data we need.</p> <pre><code>import { PostShShapeType } from \"./.ldo/post.shapeTypes\";\nimport { useLdo } from \"@ldo/solid-react\";\n\nexport const MakePost: FunctionComponent&lt;{ mainContainer: Container }&gt; = ({\n  mainContainer,\n}) =&gt; {\n  // ...\n  const { createData, commitData } = useLdo();\n\n  const onSubmit = useCallback(\n    async (e: FormEvent&lt;HTMLFormElement&gt;) =&gt; {\n      // ...\n\n      // Create Post\n      const indexResource = postContainer.child(\"index.ttl\");\n      // Create new data of type \"Post\" where the subject is the index\n      // resource's uri, and write any changes to the indexResource.\n      const post = createData(\n        PostShShapeType,\n        indexResource.uri,\n        indexResource\n      );\n      // Set the article body\n      post.articleBody = message;\n      if (uploadedImage) {\n        // Link the URI to the \n        post.image = { \"@id\": uploadedImage.uri };\n      }\n      // Say that the type is a \"SocialMediaPosting\"\n      post.type = { \"@id\": \"SocialMediaPosting\" };\n      // Add an upload date\n      post.uploadDate = new Date().toISOString();\n      // The commitData function handles sending the data to the Pod.\n      const result = await commitData(post);\n      if (result.isError) {\n        alert(result.message);\n      }\n    },\n    [mainContainer, selectedFile, createData, message, commitData]\n  );\n  // ...\n</code></pre> <p>Structured data is a little different than unstructured data. Data can potentially exist in multiple resources. That isn't the case here, but we're still going to treat index.ttl, the resource, separately from the data we put on the resource.</p> <p>When we want to create data we can use the <code>createData</code> function (which we can get through the <code>useLdo</code> hook). <code>createData</code> takes three arguments: * The ShapeType of the data. In this case, we're asserting that this data is a \"Post.\" * The uri for the data's \"subject.\" In this case, it's the same as the index.ttl resource. * A list of resources that this data will be written to. All triples that are created when you modify this data will be saved to this list of resources.</p> <p>From there, we can just modify the data as if it were normal JSON. Note that in some cases we set a field to <code>{ \"@id\": uri }</code>. This means that the field should point to the given URI.</p> <p>Finally the <code>commitData()</code> method takes the modified data and syncs it with the Solid Pods.</p> <p>When all is saved, the data on the Pod should look something like this:</p> <pre><code>&lt;https://solidweb.me/jackson3/my-solid-app/7780dac6-7ed2-4ab1-ab31-e63257bc4b3f/index.ttl&gt; &lt;http://schema.org/articleBody&gt; \"Hello this is a post\";\n    &lt;http://schema.org/image&gt; &lt;https://solidweb.me/jackson3/my-solid-app/7780dac6-7ed2-4ab1-ab31-e63257bc4b3f/coolImage.png&gt;;\n    a &lt;http://schema.org/SocialMediaPosting&gt;;\n    &lt;http://schema.org/uploadDate&gt; \"2023-09-26T19:01:17.263Z\"^^&lt;http://www.w3.org/2001/XMLSchema#date&gt;.\n</code></pre>"},{"location":"guides/solid_react/#11-displaying-the-post","title":"11. Displaying the Post","text":"<p>Finally, let's bring it all together and modify Post.tsx to display the uploaded data.</p> <p>Post.tsx <pre><code>import { FunctionComponent, useCallback, useMemo } from \"react\";\nimport { ContainerUri, LeafUri } from \"@ldo/solid\";\nimport { useLdo, useResource, useSubject } from \"@ldo/solid-react\";\nimport { PostShShapeType } from \"./.ldo/post.shapeTypes\";\n\nexport const Post: FunctionComponent&lt;{ postUri: ContainerUri }&gt; = ({\n  postUri,\n}) =&gt; {\n  const postIndexUri = `${postUri}index.ttl`;\n  const postResource = useResource(postIndexUri);\n  const post = useSubject(PostShShapeType, postIndexUri);\n  const { getResource } = useLdo();\n  const imageResource = useResource(\n    post?.image?.[\"@id\"] as LeafUri | undefined\n  );\n\n  // Convert the blob into a URL to be used in the img tag\n  const blobUrl = useMemo(() =&gt; {\n    if (imageResource &amp;&amp; imageResource.isBinary()) {\n      return URL.createObjectURL(imageResource.getBlob()!);\n    }\n    return undefined;\n  }, [imageResource]);\n\n  const deletePost = useCallback(async () =&gt; {\n    const postContainer = getResource(postUri);\n    await postContainer.delete();\n  }, [postUri, getResource]);\n\n  if (postResource.status.isError) {\n    return &lt;p&gt;postResource.status.message&lt;/p&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;{post.articleBody}&lt;/p&gt;\n      {blobUrl &amp;&amp; (\n        &lt;img src={blobUrl} alt={post.articleBody} style={{ height: 300 }} /&gt;\n      )}\n      &lt;button onClick={deletePost}&gt;Delete Post&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre></p> <p>Here, we've employed a few concepts that we're already familiar with as well as a few new tricks. Of course, we're using \"useResource\" and \"useSubject\" to get data about the Post. Then we can render that information by treating it just like JSON. For example <code>&lt;p&gt;{post.articleBody}&lt;/p&gt;</code>.</p> <p>Notice that we can get the URL for the image with <code>post.image[\"@id\"]</code>, but we're not using that directly in the img tag (eg <code>&lt;img src={post.image[\"@id\"]} /&gt;</code>). Why? Many resources on a Solid Pod (these included) are not open to the public. If we put the image URL directly in the the img tag, the request to get that image would be unauthorized. Instead, we perform an authenticated fetch on the image the same way we do with anything else: using <code>useResource</code>. Once we have the resource, we can convert the resource to a blob url with <code>URL.createObjectURL(imageResource.getBlob())</code>.</p> <p>We've also added a delete button. Deleting containers and resources is just as simple as running <code>resource.delete()</code>.</p>"},{"location":"guides/solid_react/#conclusion","title":"Conclusion","text":"<p>And with that, you have a fully functional Solid application. LDO's React/Solid integration keeps track of state and makes sure everything is run efficiently so you can focus on developing your application.</p>"},{"location":"guides/stupid_easy/","title":"Building with LDO is Stupid Easy","text":"<p>Let's build an LDO React app in a few very easy steps.</p>"},{"location":"guides/stupid_easy/#1-initialize-your-react-app","title":"1. Initialize your React App","text":"<pre><code>npx create-react-app stupid-easy-solid --template typescript\ncd stupid-easy-solid\nnpm run start\n</code></pre>"},{"location":"guides/stupid_easy/#2-initialize-ldo","title":"2. Initialize LDO","text":"<pre><code>npx @ldo/cli init\nnpm i @ldo/solid-react\n</code></pre>"},{"location":"guides/stupid_easy/#3-observe-the-generated-files-in-the-srcldo-folder","title":"3. Observe the generated files in the <code>/src/.ldo</code> folder","text":"<p>FoafProfile.typings.ts</p> <pre><code>import { ContextDefinition } from \"jsonld\";\n\nexport interface FoafProfile {\n  \"@id\"?: string;\n  \"@context\"?: ContextDefinition;\n  /**\n   * Defines the node as a Person (from foaf)\n   */\n  type: {\n    \"@id\": \"Person\";\n  };\n  /**\n   * Define a person's name.\n   */\n  name?: string;\n  /**\n   * Photo link but in string form\n   */\n  img?: string;\n  /**\n   * A list of WebIds for all the people this user knows.\n   */\n  knows?: FoafProfile[];\n}\n</code></pre> <p>FoafProfile.shapeTypes.ts</p> <pre><code>import { ShapeType } from \"@ldo/ldo\";\nimport { foafProfileSchema } from \"./foafProfile.schema\";\nimport { foafProfileContext } from \"./foafProfile.context\";\nimport { FoafProfile } from \"./foafProfile.typings\";\n\nexport const FoafProfileShapeType: ShapeType&lt;FoafProfile&gt; = {\n  schema: foafProfileSchema,\n  shape: \"https://example.com/FoafProfile\",\n  context: foafProfileContext,\n};\n</code></pre>"},{"location":"guides/stupid_easy/#4-set-up-component-structure","title":"4. Set up Component Structure","text":"<p>App.tsx</p> <pre><code>import { Login } from './Login';\n\nfunction App() {\n  return (\n    &lt;Login /&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Login.tsx</p> <pre><code>import { FunctionComponent } from \"react\";\nimport { Profile } from \"./Profile\";\n\nexport const Login: FunctionComponent = () =&gt; {\n  return &lt;div&gt;\n    Login\n    &lt;Profile /&gt;\n  &lt;/div&gt;\n}\n</code></pre> <p>Profile.tsx</p> <pre><code>import { FunctionComponent } from \"react\";\n\nexport const Profile: FunctionComponent = () =&gt; {\n  return &lt;div&gt;Profile&lt;/div&gt;\n}\n</code></pre>"},{"location":"guides/stupid_easy/#5-add-a-wrapper-component","title":"5. Add a wrapper component","text":"<p>App.tsx</p> <pre><code>import { BrowserSolidLdoProvider } from '@ldo/solid-react';\nimport { Login } from './Login';\n\nfunction App() {\n  return (\n    &lt;BrowserSolidLdoProvider&gt;\n      &lt;Login /&gt;\n    &lt;/BrowserSolidLdoProvider&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"guides/stupid_easy/#6-trigger-login","title":"6. Trigger Login","text":"<p>Login.tsx</p> <pre><code>import { useSolidAuth } from \"@ldo/solid-react\";\nimport { FunctionComponent } from \"react\";\nimport { Profile } from \"./Profile\";\n\nexport const Login: FunctionComponent = () =&gt; {\n  const { login, logout, session } = useSolidAuth();\n\n  if (!session.isLoggedIn) {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;Currently Logged Out&lt;/p&gt;\n        &lt;button onClick={() =&gt; {\n          const issuer = prompt(\"What is your Solid Issuer?\", \"https://solidweb.me\");\n          if (issuer) login(issuer);\n        }}&gt;Log In&lt;/button&gt;\n      &lt;/div&gt;\n    )\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Logged in as {session.webId}&lt;/p&gt;\n      &lt;button onClick={logout}&gt;Log Out&lt;/button&gt;\n      &lt;Profile /&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"guides/stupid_easy/#7-fetch-and-display-data","title":"7. Fetch and Display Data","text":"<p>Profile.tsx</p> <pre><code>import { useResource, useSolidAuth, useSubject } from \"@ldo/solid-react\";\nimport { FunctionComponent } from \"react\";\nimport { FoafProfileShapeType } from \"./.ldo/foafProfile.shapeTypes\"\n\nexport const Profile: FunctionComponent = () =&gt; {\n  const { session } = useSolidAuth();\n  const webIdResource = useResource(session.webId);\n  const profile = useSubject(FoafProfileShapeType, session.webId);\n\n  if (webIdResource?.isLoading()) {\n    return &lt;p&gt;Loading...&lt;/p&gt;\n  }\n\n  return &lt;div&gt;\n    &lt;p&gt;Hello! Welcome {profile?.name}.&lt;/p&gt;\n  &lt;/div&gt;\n}\n</code></pre>"},{"location":"guides/stupid_easy/#8-modify-data","title":"8. Modify Data","text":"<pre><code>import { useLdo, useResource, useSolidAuth, useSubject } from \"@ldo/solid-react\";\nimport { FunctionComponent } from \"react\";\nimport { FoafProfileShapeType } from \"./.ldo/foafProfile.shapeTypes\"\n\nexport const Profile: FunctionComponent = () =&gt; {\n  const { session } = useSolidAuth();\n  const webIdResource = useResource(session.webId);\n  const profile = useSubject(FoafProfileShapeType, session.webId);\n  const { changeData, commitData } = useLdo();  \n\n  if (webIdResource?.isLoading()) {\n    return &lt;p&gt;Loading...&lt;/p&gt;\n  }\n\n  return &lt;div&gt;\n    &lt;p&gt;Hello! Welcome {profile?.name}.&lt;/p&gt;\n    &lt;input value={profile?.name} onChange={async (e) =&gt; {\n      if (!profile || !webIdResource) return;\n      const cProfile = changeData(profile, webIdResource);\n      cProfile.name = e.target.value;\n      await commitData(cProfile);\n    }} /&gt;\n  &lt;/div&gt;\n}\n</code></pre>"}]}